/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.noting.model.impl;

import com.adjecti.noting.model.Noting;
import com.adjecti.noting.model.NotingModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Noting service. Represents a row in the &quot;OFB_Noting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotingImpl
 * @generated
 */
public class NotingModelImpl
	extends BaseModelImpl<Noting> implements NotingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a noting model instance should use the <code>Noting</code> interface instead.
	 */
	public static final String TABLE_NAME = "OFB_Noting";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"noteId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"content", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"pdfId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OFB_Noting (uuid_ VARCHAR(75) null,noteId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,content STRING null,title VARCHAR(75) null,pdfId LONG)";

	public static final String TABLE_SQL_DROP = "drop table OFB_Noting";

	public static final String ORDER_BY_JPQL = " ORDER BY noting.noteId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY OFB_Noting.noteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long NOTEID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public NotingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Noting.class;
	}

	@Override
	public String getModelClassName() {
		return Noting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Noting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Noting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noting, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Noting)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Noting, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Noting, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Noting)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Noting, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Noting, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Noting>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Noting.class.getClassLoader(), Noting.class, ModelWrapper.class);

		try {
			Constructor<Noting> constructor =
				(Constructor<Noting>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Noting, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Noting, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Noting, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Noting, Object>>();
		Map<String, BiConsumer<Noting, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Noting, ?>>();

		attributeGetterFunctions.put("uuid", Noting::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Noting, String>)Noting::setUuid);
		attributeGetterFunctions.put("noteId", Noting::getNoteId);
		attributeSetterBiConsumers.put(
			"noteId", (BiConsumer<Noting, Long>)Noting::setNoteId);
		attributeGetterFunctions.put("groupId", Noting::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Noting, Long>)Noting::setGroupId);
		attributeGetterFunctions.put("companyId", Noting::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Noting, Long>)Noting::setCompanyId);
		attributeGetterFunctions.put("userId", Noting::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Noting, Long>)Noting::setUserId);
		attributeGetterFunctions.put("userName", Noting::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Noting, String>)Noting::setUserName);
		attributeGetterFunctions.put("createDate", Noting::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Noting, Date>)Noting::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Noting::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Noting, Date>)Noting::setModifiedDate);
		attributeGetterFunctions.put("content", Noting::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Noting, String>)Noting::setContent);
		attributeGetterFunctions.put("title", Noting::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Noting, String>)Noting::setTitle);
		attributeGetterFunctions.put("pdfId", Noting::getPdfId);
		attributeSetterBiConsumers.put(
			"pdfId", (BiConsumer<Noting, Long>)Noting::setPdfId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getNoteId() {
		return _noteId;
	}

	@Override
	public void setNoteId(long noteId) {
		_noteId = noteId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public long getPdfId() {
		return _pdfId;
	}

	@Override
	public void setPdfId(long pdfId) {
		_pdfId = pdfId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Noting.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Noting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Noting toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Noting>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotingImpl notingImpl = new NotingImpl();

		notingImpl.setUuid(getUuid());
		notingImpl.setNoteId(getNoteId());
		notingImpl.setGroupId(getGroupId());
		notingImpl.setCompanyId(getCompanyId());
		notingImpl.setUserId(getUserId());
		notingImpl.setUserName(getUserName());
		notingImpl.setCreateDate(getCreateDate());
		notingImpl.setModifiedDate(getModifiedDate());
		notingImpl.setContent(getContent());
		notingImpl.setTitle(getTitle());
		notingImpl.setPdfId(getPdfId());

		notingImpl.resetOriginalValues();

		return notingImpl;
	}

	@Override
	public int compareTo(Noting noting) {
		long primaryKey = noting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Noting)) {
			return false;
		}

		Noting noting = (Noting)object;

		long primaryKey = noting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Noting> toCacheModel() {
		NotingCacheModel notingCacheModel = new NotingCacheModel();

		notingCacheModel.uuid = getUuid();

		String uuid = notingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			notingCacheModel.uuid = null;
		}

		notingCacheModel.noteId = getNoteId();

		notingCacheModel.groupId = getGroupId();

		notingCacheModel.companyId = getCompanyId();

		notingCacheModel.userId = getUserId();

		notingCacheModel.userName = getUserName();

		String userName = notingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notingCacheModel.createDate = createDate.getTime();
		}
		else {
			notingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notingCacheModel.content = getContent();

		String content = notingCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			notingCacheModel.content = null;
		}

		notingCacheModel.title = getTitle();

		String title = notingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			notingCacheModel.title = null;
		}

		notingCacheModel.pdfId = getPdfId();

		return notingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Noting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Noting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noting, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Noting)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Noting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Noting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Noting, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Noting)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Noting>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _noteId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _content;
	private String _title;
	private long _pdfId;
	private long _columnBitmask;
	private Noting _escapedModel;

}