/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the EmployeePermission service. Represents a row in the &quot;pis_EmployeePermission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.adjecti.pis.liferay.model.impl.EmployeePermissionModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.adjecti.pis.liferay.model.impl.EmployeePermissionImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeePermission
 * @generated
 */
@ProviderType
public interface EmployeePermissionModel
	extends BaseModel<EmployeePermission>, GroupedModel, ShardedModel,
			WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a employee permission model instance should use the {@link EmployeePermission} interface instead.
	 */

	/**
	 * Returns the primary key of this employee permission.
	 *
	 * @return the primary key of this employee permission
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this employee permission.
	 *
	 * @param primaryKey the primary key of this employee permission
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the employee permission ID of this employee permission.
	 *
	 * @return the employee permission ID of this employee permission
	 */
	public long getEmployeePermissionId();

	/**
	 * Sets the employee permission ID of this employee permission.
	 *
	 * @param employeePermissionId the employee permission ID of this employee permission
	 */
	public void setEmployeePermissionId(long employeePermissionId);

	/**
	 * Returns the group ID of this employee permission.
	 *
	 * @return the group ID of this employee permission
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this employee permission.
	 *
	 * @param groupId the group ID of this employee permission
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this employee permission.
	 *
	 * @return the company ID of this employee permission
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this employee permission.
	 *
	 * @param companyId the company ID of this employee permission
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this employee permission.
	 *
	 * @return the user ID of this employee permission
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this employee permission.
	 *
	 * @param userId the user ID of this employee permission
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this employee permission.
	 *
	 * @return the user uuid of this employee permission
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this employee permission.
	 *
	 * @param userUuid the user uuid of this employee permission
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this employee permission.
	 *
	 * @return the user name of this employee permission
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this employee permission.
	 *
	 * @param userName the user name of this employee permission
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this employee permission.
	 *
	 * @return the create date of this employee permission
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this employee permission.
	 *
	 * @param createDate the create date of this employee permission
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this employee permission.
	 *
	 * @return the modified date of this employee permission
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this employee permission.
	 *
	 * @param modifiedDate the modified date of this employee permission
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this employee permission.
	 *
	 * @return the status of this employee permission
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this employee permission.
	 *
	 * @param status the status of this employee permission
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this employee permission.
	 *
	 * @return the status by user ID of this employee permission
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this employee permission.
	 *
	 * @param statusByUserId the status by user ID of this employee permission
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this employee permission.
	 *
	 * @return the status by user uuid of this employee permission
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this employee permission.
	 *
	 * @param statusByUserUuid the status by user uuid of this employee permission
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this employee permission.
	 *
	 * @return the status by user name of this employee permission
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this employee permission.
	 *
	 * @param statusByUserName the status by user name of this employee permission
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this employee permission.
	 *
	 * @return the status date of this employee permission
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this employee permission.
	 *
	 * @param statusDate the status date of this employee permission
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the idam user of this employee permission.
	 *
	 * @return the idam user of this employee permission
	 */
	public boolean getIdamUser();

	/**
	 * Returns <code>true</code> if this employee permission is idam user.
	 *
	 * @return <code>true</code> if this employee permission is idam user; <code>false</code> otherwise
	 */
	public boolean isIdamUser();

	/**
	 * Sets whether this employee permission is idam user.
	 *
	 * @param idamUser the idam user of this employee permission
	 */
	public void setIdamUser(boolean idamUser);

	/**
	 * Returns the digital signing of this employee permission.
	 *
	 * @return the digital signing of this employee permission
	 */
	public boolean getDigitalSigning();

	/**
	 * Returns <code>true</code> if this employee permission is digital signing.
	 *
	 * @return <code>true</code> if this employee permission is digital signing; <code>false</code> otherwise
	 */
	public boolean isDigitalSigning();

	/**
	 * Sets whether this employee permission is digital signing.
	 *
	 * @param digitalSigning the digital signing of this employee permission
	 */
	public void setDigitalSigning(boolean digitalSigning);

	/**
	 * Returns the pis access of this employee permission.
	 *
	 * @return the pis access of this employee permission
	 */
	public boolean getPisAccess();

	/**
	 * Returns <code>true</code> if this employee permission is pis access.
	 *
	 * @return <code>true</code> if this employee permission is pis access; <code>false</code> otherwise
	 */
	public boolean isPisAccess();

	/**
	 * Sets whether this employee permission is pis access.
	 *
	 * @param pisAccess the pis access of this employee permission
	 */
	public void setPisAccess(boolean pisAccess);

	/**
	 * Returns the email access of this employee permission.
	 *
	 * @return the email access of this employee permission
	 */
	public boolean getEmailAccess();

	/**
	 * Returns <code>true</code> if this employee permission is email access.
	 *
	 * @return <code>true</code> if this employee permission is email access; <code>false</code> otherwise
	 */
	public boolean isEmailAccess();

	/**
	 * Sets whether this employee permission is email access.
	 *
	 * @param emailAccess the email access of this employee permission
	 */
	public void setEmailAccess(boolean emailAccess);

	/**
	 * Returns the e gov access of this employee permission.
	 *
	 * @return the e gov access of this employee permission
	 */
	public boolean getEGovAccess();

	/**
	 * Returns <code>true</code> if this employee permission is e gov access.
	 *
	 * @return <code>true</code> if this employee permission is e gov access; <code>false</code> otherwise
	 */
	public boolean isEGovAccess();

	/**
	 * Sets whether this employee permission is e gov access.
	 *
	 * @param eGovAccess the e gov access of this employee permission
	 */
	public void setEGovAccess(boolean eGovAccess);

	/**
	 * Returns the idam user created of this employee permission.
	 *
	 * @return the idam user created of this employee permission
	 */
	public boolean getIdamUserCreated();

	/**
	 * Returns <code>true</code> if this employee permission is idam user created.
	 *
	 * @return <code>true</code> if this employee permission is idam user created; <code>false</code> otherwise
	 */
	public boolean isIdamUserCreated();

	/**
	 * Sets whether this employee permission is idam user created.
	 *
	 * @param idamUserCreated the idam user created of this employee permission
	 */
	public void setIdamUserCreated(boolean idamUserCreated);

	/**
	 * Returns the user created of this employee permission.
	 *
	 * @return the user created of this employee permission
	 */
	public boolean getUserCreated();

	/**
	 * Returns <code>true</code> if this employee permission is user created.
	 *
	 * @return <code>true</code> if this employee permission is user created; <code>false</code> otherwise
	 */
	public boolean isUserCreated();

	/**
	 * Sets whether this employee permission is user created.
	 *
	 * @param userCreated the user created of this employee permission
	 */
	public void setUserCreated(boolean userCreated);

	/**
	 * Returns the employee created of this employee permission.
	 *
	 * @return the employee created of this employee permission
	 */
	public boolean getEmployeeCreated();

	/**
	 * Returns <code>true</code> if this employee permission is employee created.
	 *
	 * @return <code>true</code> if this employee permission is employee created; <code>false</code> otherwise
	 */
	public boolean isEmployeeCreated();

	/**
	 * Sets whether this employee permission is employee created.
	 *
	 * @param employeeCreated the employee created of this employee permission
	 */
	public void setEmployeeCreated(boolean employeeCreated);

	/**
	 * Returns the first name of this employee permission.
	 *
	 * @return the first name of this employee permission
	 */
	@AutoEscape
	public String getFirstName();

	/**
	 * Sets the first name of this employee permission.
	 *
	 * @param firstName the first name of this employee permission
	 */
	public void setFirstName(String firstName);

	/**
	 * Returns the personal no of this employee permission.
	 *
	 * @return the personal no of this employee permission
	 */
	public long getPersonalNo();

	/**
	 * Sets the personal no of this employee permission.
	 *
	 * @param personalNo the personal no of this employee permission
	 */
	public void setPersonalNo(long personalNo);

	/**
	 * Returns the last name of this employee permission.
	 *
	 * @return the last name of this employee permission
	 */
	@AutoEscape
	public String getLastName();

	/**
	 * Sets the last name of this employee permission.
	 *
	 * @param lastName the last name of this employee permission
	 */
	public void setLastName(String lastName);

	/**
	 * Returns the email address of this employee permission.
	 *
	 * @return the email address of this employee permission
	 */
	@AutoEscape
	public String getEmailAddress();

	/**
	 * Sets the email address of this employee permission.
	 *
	 * @param emailAddress the email address of this employee permission
	 */
	public void setEmailAddress(String emailAddress);

	/**
	 * Returns the designation ID of this employee permission.
	 *
	 * @return the designation ID of this employee permission
	 */
	public long getDesignationId();

	/**
	 * Sets the designation ID of this employee permission.
	 *
	 * @param designationId the designation ID of this employee permission
	 */
	public void setDesignationId(long designationId);

	/**
	 * Returns the employee ID of this employee permission.
	 *
	 * @return the employee ID of this employee permission
	 */
	public long getEmployeeId();

	/**
	 * Sets the employee ID of this employee permission.
	 *
	 * @param employeeId the employee ID of this employee permission
	 */
	public void setEmployeeId(long employeeId);

	/**
	 * Returns the joining process ID of this employee permission.
	 *
	 * @return the joining process ID of this employee permission
	 */
	public long getJoiningProcessId();

	/**
	 * Sets the joining process ID of this employee permission.
	 *
	 * @param joiningProcessId the joining process ID of this employee permission
	 */
	public void setJoiningProcessId(long joiningProcessId);

	/**
	 * Returns the single user onboarding ID of this employee permission.
	 *
	 * @return the single user onboarding ID of this employee permission
	 */
	public long getSingleUserOnboardingId();

	/**
	 * Sets the single user onboarding ID of this employee permission.
	 *
	 * @param singleUserOnboardingId the single user onboarding ID of this employee permission
	 */
	public void setSingleUserOnboardingId(long singleUserOnboardingId);

	/**
	 * Returns the registration request ID of this employee permission.
	 *
	 * @return the registration request ID of this employee permission
	 */
	public long getRegistrationRequestId();

	/**
	 * Sets the registration request ID of this employee permission.
	 *
	 * @param registrationRequestId the registration request ID of this employee permission
	 */
	public void setRegistrationRequestId(long registrationRequestId);

	/**
	 * Returns the form of this employee permission.
	 *
	 * @return the form of this employee permission
	 */
	@AutoEscape
	public String getForm();

	/**
	 * Sets the form of this employee permission.
	 *
	 * @param form the form of this employee permission
	 */
	public void setForm(String form);

	/**
	 * Returns the current state of this employee permission.
	 *
	 * @return the current state of this employee permission
	 */
	@AutoEscape
	public String getCurrentState();

	/**
	 * Sets the current state of this employee permission.
	 *
	 * @param currentState the current state of this employee permission
	 */
	public void setCurrentState(String currentState);

	/**
	 * Returns <code>true</code> if this employee permission is approved.
	 *
	 * @return <code>true</code> if this employee permission is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this employee permission is denied.
	 *
	 * @return <code>true</code> if this employee permission is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this employee permission is a draft.
	 *
	 * @return <code>true</code> if this employee permission is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this employee permission is expired.
	 *
	 * @return <code>true</code> if this employee permission is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this employee permission is inactive.
	 *
	 * @return <code>true</code> if this employee permission is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this employee permission is incomplete.
	 *
	 * @return <code>true</code> if this employee permission is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this employee permission is pending.
	 *
	 * @return <code>true</code> if this employee permission is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this employee permission is scheduled.
	 *
	 * @return <code>true</code> if this employee permission is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

}