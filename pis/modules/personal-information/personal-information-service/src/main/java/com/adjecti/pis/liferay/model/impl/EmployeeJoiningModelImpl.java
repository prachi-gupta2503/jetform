/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeJoining;
import com.adjecti.pis.liferay.model.EmployeeJoiningModel;
import com.adjecti.pis.liferay.model.EmployeeJoiningSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeJoining service. Represents a row in the &quot;pis_EmployeeJoining&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeJoiningModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeJoiningImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeJoiningImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeJoiningModelImpl
	extends BaseModelImpl<EmployeeJoining> implements EmployeeJoiningModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee joining model instance should use the <code>EmployeeJoining</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeJoining";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeJoiningId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"aadhaarNo", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"exServiceMan", Types.BOOLEAN},
		{"panNo", Types.VARCHAR}, {"personalNo", Types.VARCHAR},
		{"peopleId", Types.BIGINT}, {"fullName", Types.VARCHAR},
		{"designationId", Types.BIGINT}, {"gradeId", Types.BIGINT},
		{"payLevelId", Types.BIGINT}, {"postId", Types.BIGINT},
		{"tradeId", Types.BIGINT}, {"organizationId", Types.BIGINT},
		{"subOrganizationId", Types.BIGINT},
		{"designationClassId", Types.BIGINT},
		{"designationGroupId", Types.BIGINT}, {"joiningModeId", Types.BIGINT},
		{"joiningLetterId", Types.BIGINT}, {"gradeModeId", Types.BIGINT},
		{"fromDate", Types.TIMESTAMP}, {"toDate", Types.TIMESTAMP},
		{"selectionDate", Types.TIMESTAMP},
		{"confirmationDate", Types.TIMESTAMP},
		{"gradeConfirmationDate", Types.TIMESTAMP},
		{"govtServiceDate", Types.TIMESTAMP},
		{"recruitmentBatch", Types.VARCHAR}, {"employeeId", Types.BIGINT},
		{"emailId", Types.VARCHAR}, {"postBox", Types.VARCHAR},
		{"dateOfJoining", Types.TIMESTAMP},
		{"dateOfJoiningOrganization", Types.TIMESTAMP}, {"rank_", Types.BIGINT},
		{"joiningProcessId", Types.BIGINT}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeJoiningId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("aadhaarNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exServiceMan", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("panNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("peopleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payLevelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subOrganizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningModeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningLetterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeModeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("selectionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("confirmationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gradeConfirmationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("govtServiceDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recruitmentBatch", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postBox", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfJoining", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfJoiningOrganization", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rank_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeJoining (employeeJoiningId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,aadhaarNo VARCHAR(75) null,emailAddress VARCHAR(75) null,exServiceMan BOOLEAN,panNo VARCHAR(75) null,personalNo VARCHAR(75) null,peopleId LONG,fullName VARCHAR(75) null,designationId LONG,gradeId LONG,payLevelId LONG,postId LONG,tradeId LONG,organizationId LONG,subOrganizationId LONG,designationClassId LONG,designationGroupId LONG,joiningModeId LONG,joiningLetterId LONG,gradeModeId LONG,fromDate DATE null,toDate DATE null,selectionDate DATE null,confirmationDate DATE null,gradeConfirmationDate DATE null,govtServiceDate DATE null,recruitmentBatch VARCHAR(75) null,employeeId LONG,emailId VARCHAR(75) null,postBox VARCHAR(75) null,dateOfJoining DATE null,dateOfJoiningOrganization DATE null,rank_ LONG,joiningProcessId LONG,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeJoining";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeJoining.employeeJoiningId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeJoining.employeeJoiningId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GRADEMODEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SUBORGANIZATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEJOININGID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeJoining toModel(EmployeeJoiningSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeJoining model = new EmployeeJoiningImpl();

		model.setEmployeeJoiningId(soapModel.getEmployeeJoiningId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAadhaarNo(soapModel.getAadhaarNo());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setExServiceMan(soapModel.isExServiceMan());
		model.setPanNo(soapModel.getPanNo());
		model.setPersonalNo(soapModel.getPersonalNo());
		model.setPeopleId(soapModel.getPeopleId());
		model.setFullName(soapModel.getFullName());
		model.setDesignationId(soapModel.getDesignationId());
		model.setGradeId(soapModel.getGradeId());
		model.setPayLevelId(soapModel.getPayLevelId());
		model.setPostId(soapModel.getPostId());
		model.setTradeId(soapModel.getTradeId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setSubOrganizationId(soapModel.getSubOrganizationId());
		model.setDesignationClassId(soapModel.getDesignationClassId());
		model.setDesignationGroupId(soapModel.getDesignationGroupId());
		model.setJoiningModeId(soapModel.getJoiningModeId());
		model.setJoiningLetterId(soapModel.getJoiningLetterId());
		model.setGradeModeId(soapModel.getGradeModeId());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setSelectionDate(soapModel.getSelectionDate());
		model.setConfirmationDate(soapModel.getConfirmationDate());
		model.setGradeConfirmationDate(soapModel.getGradeConfirmationDate());
		model.setGovtServiceDate(soapModel.getGovtServiceDate());
		model.setRecruitmentBatch(soapModel.getRecruitmentBatch());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setEmailId(soapModel.getEmailId());
		model.setPostBox(soapModel.getPostBox());
		model.setDateOfJoining(soapModel.getDateOfJoining());
		model.setDateOfJoiningOrganization(
			soapModel.getDateOfJoiningOrganization());
		model.setRank(soapModel.getRank());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeJoining> toModels(
		EmployeeJoiningSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeJoining> models = new ArrayList<EmployeeJoining>(
			soapModels.length);

		for (EmployeeJoiningSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeJoiningModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeJoiningId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeJoiningId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeJoiningId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeJoining.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeJoining.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeJoining, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeJoining, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeJoining, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeJoining)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeJoining, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeJoining, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeJoining)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeJoining, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeJoining, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeJoining>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeJoining.class.getClassLoader(), EmployeeJoining.class,
			ModelWrapper.class);

		try {
			Constructor<EmployeeJoining> constructor =
				(Constructor<EmployeeJoining>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeJoining, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeJoining, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeJoining, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EmployeeJoining, Object>>();
		Map<String, BiConsumer<EmployeeJoining, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EmployeeJoining, ?>>();

		attributeGetterFunctions.put(
			"employeeJoiningId", EmployeeJoining::getEmployeeJoiningId);
		attributeSetterBiConsumers.put(
			"employeeJoiningId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setEmployeeJoiningId);
		attributeGetterFunctions.put("groupId", EmployeeJoining::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeJoining::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeJoining::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setUserId);
		attributeGetterFunctions.put("userName", EmployeeJoining::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeJoining::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeJoining, Date>)EmployeeJoining::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeJoining::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setModifiedDate);
		attributeGetterFunctions.put(
			"aadhaarNo", EmployeeJoining::getAadhaarNo);
		attributeSetterBiConsumers.put(
			"aadhaarNo",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setAadhaarNo);
		attributeGetterFunctions.put(
			"emailAddress", EmployeeJoining::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<EmployeeJoining, String>)
				EmployeeJoining::setEmailAddress);
		attributeGetterFunctions.put(
			"exServiceMan", EmployeeJoining::getExServiceMan);
		attributeSetterBiConsumers.put(
			"exServiceMan",
			(BiConsumer<EmployeeJoining, Boolean>)
				EmployeeJoining::setExServiceMan);
		attributeGetterFunctions.put("panNo", EmployeeJoining::getPanNo);
		attributeSetterBiConsumers.put(
			"panNo",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setPanNo);
		attributeGetterFunctions.put(
			"personalNo", EmployeeJoining::getPersonalNo);
		attributeSetterBiConsumers.put(
			"personalNo",
			(BiConsumer<EmployeeJoining, String>)
				EmployeeJoining::setPersonalNo);
		attributeGetterFunctions.put("peopleId", EmployeeJoining::getPeopleId);
		attributeSetterBiConsumers.put(
			"peopleId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setPeopleId);
		attributeGetterFunctions.put("fullName", EmployeeJoining::getFullName);
		attributeSetterBiConsumers.put(
			"fullName",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setFullName);
		attributeGetterFunctions.put(
			"designationId", EmployeeJoining::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setDesignationId);
		attributeGetterFunctions.put("gradeId", EmployeeJoining::getGradeId);
		attributeSetterBiConsumers.put(
			"gradeId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setGradeId);
		attributeGetterFunctions.put(
			"payLevelId", EmployeeJoining::getPayLevelId);
		attributeSetterBiConsumers.put(
			"payLevelId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setPayLevelId);
		attributeGetterFunctions.put("postId", EmployeeJoining::getPostId);
		attributeSetterBiConsumers.put(
			"postId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setPostId);
		attributeGetterFunctions.put("tradeId", EmployeeJoining::getTradeId);
		attributeSetterBiConsumers.put(
			"tradeId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setTradeId);
		attributeGetterFunctions.put(
			"organizationId", EmployeeJoining::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setOrganizationId);
		attributeGetterFunctions.put(
			"subOrganizationId", EmployeeJoining::getSubOrganizationId);
		attributeSetterBiConsumers.put(
			"subOrganizationId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setSubOrganizationId);
		attributeGetterFunctions.put(
			"designationClassId", EmployeeJoining::getDesignationClassId);
		attributeSetterBiConsumers.put(
			"designationClassId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setDesignationClassId);
		attributeGetterFunctions.put(
			"designationGroupId", EmployeeJoining::getDesignationGroupId);
		attributeSetterBiConsumers.put(
			"designationGroupId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setDesignationGroupId);
		attributeGetterFunctions.put(
			"joiningModeId", EmployeeJoining::getJoiningModeId);
		attributeSetterBiConsumers.put(
			"joiningModeId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setJoiningModeId);
		attributeGetterFunctions.put(
			"joiningLetterId", EmployeeJoining::getJoiningLetterId);
		attributeSetterBiConsumers.put(
			"joiningLetterId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setJoiningLetterId);
		attributeGetterFunctions.put(
			"gradeModeId", EmployeeJoining::getGradeModeId);
		attributeSetterBiConsumers.put(
			"gradeModeId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setGradeModeId);
		attributeGetterFunctions.put("fromDate", EmployeeJoining::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate",
			(BiConsumer<EmployeeJoining, Date>)EmployeeJoining::setFromDate);
		attributeGetterFunctions.put("toDate", EmployeeJoining::getToDate);
		attributeSetterBiConsumers.put(
			"toDate",
			(BiConsumer<EmployeeJoining, Date>)EmployeeJoining::setToDate);
		attributeGetterFunctions.put(
			"selectionDate", EmployeeJoining::getSelectionDate);
		attributeSetterBiConsumers.put(
			"selectionDate",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setSelectionDate);
		attributeGetterFunctions.put(
			"confirmationDate", EmployeeJoining::getConfirmationDate);
		attributeSetterBiConsumers.put(
			"confirmationDate",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setConfirmationDate);
		attributeGetterFunctions.put(
			"gradeConfirmationDate", EmployeeJoining::getGradeConfirmationDate);
		attributeSetterBiConsumers.put(
			"gradeConfirmationDate",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setGradeConfirmationDate);
		attributeGetterFunctions.put(
			"govtServiceDate", EmployeeJoining::getGovtServiceDate);
		attributeSetterBiConsumers.put(
			"govtServiceDate",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setGovtServiceDate);
		attributeGetterFunctions.put(
			"recruitmentBatch", EmployeeJoining::getRecruitmentBatch);
		attributeSetterBiConsumers.put(
			"recruitmentBatch",
			(BiConsumer<EmployeeJoining, String>)
				EmployeeJoining::setRecruitmentBatch);
		attributeGetterFunctions.put(
			"employeeId", EmployeeJoining::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setEmployeeId);
		attributeGetterFunctions.put("emailId", EmployeeJoining::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setEmailId);
		attributeGetterFunctions.put("postBox", EmployeeJoining::getPostBox);
		attributeSetterBiConsumers.put(
			"postBox",
			(BiConsumer<EmployeeJoining, String>)EmployeeJoining::setPostBox);
		attributeGetterFunctions.put(
			"dateOfJoining", EmployeeJoining::getDateOfJoining);
		attributeSetterBiConsumers.put(
			"dateOfJoining",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setDateOfJoining);
		attributeGetterFunctions.put(
			"dateOfJoiningOrganization",
			EmployeeJoining::getDateOfJoiningOrganization);
		attributeSetterBiConsumers.put(
			"dateOfJoiningOrganization",
			(BiConsumer<EmployeeJoining, Date>)
				EmployeeJoining::setDateOfJoiningOrganization);
		attributeGetterFunctions.put("rank", EmployeeJoining::getRank);
		attributeSetterBiConsumers.put(
			"rank",
			(BiConsumer<EmployeeJoining, Long>)EmployeeJoining::setRank);
		attributeGetterFunctions.put(
			"joiningProcessId", EmployeeJoining::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<EmployeeJoining, Long>)
				EmployeeJoining::setJoiningProcessId);
		attributeGetterFunctions.put("status", EmployeeJoining::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeJoining, Integer>)EmployeeJoining::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeJoiningId() {
		return _employeeJoiningId;
	}

	@Override
	public void setEmployeeJoiningId(long employeeJoiningId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeJoiningId = employeeJoiningId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAadhaarNo() {
		if (_aadhaarNo == null) {
			return "";
		}
		else {
			return _aadhaarNo;
		}
	}

	@Override
	public void setAadhaarNo(String aadhaarNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aadhaarNo = aadhaarNo;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public boolean getExServiceMan() {
		return _exServiceMan;
	}

	@JSON
	@Override
	public boolean isExServiceMan() {
		return _exServiceMan;
	}

	@Override
	public void setExServiceMan(boolean exServiceMan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exServiceMan = exServiceMan;
	}

	@JSON
	@Override
	public String getPanNo() {
		if (_panNo == null) {
			return "";
		}
		else {
			return _panNo;
		}
	}

	@Override
	public void setPanNo(String panNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_panNo = panNo;
	}

	@JSON
	@Override
	public String getPersonalNo() {
		if (_personalNo == null) {
			return "";
		}
		else {
			return _personalNo;
		}
	}

	@Override
	public void setPersonalNo(String personalNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalNo = personalNo;
	}

	@JSON
	@Override
	public long getPeopleId() {
		return _peopleId;
	}

	@Override
	public void setPeopleId(long peopleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_peopleId = peopleId;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	@JSON
	@Override
	public long getGradeId() {
		return _gradeId;
	}

	@Override
	public void setGradeId(long gradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeId = gradeId;
	}

	@JSON
	@Override
	public long getPayLevelId() {
		return _payLevelId;
	}

	@Override
	public void setPayLevelId(long payLevelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payLevelId = payLevelId;
	}

	@JSON
	@Override
	public long getPostId() {
		return _postId;
	}

	@Override
	public void setPostId(long postId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postId = postId;
	}

	@JSON
	@Override
	public long getTradeId() {
		return _tradeId;
	}

	@Override
	public void setTradeId(long tradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeId = tradeId;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@JSON
	@Override
	public long getSubOrganizationId() {
		return _subOrganizationId;
	}

	@Override
	public void setSubOrganizationId(long subOrganizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subOrganizationId = subOrganizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSubOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("subOrganizationId"));
	}

	@JSON
	@Override
	public long getDesignationClassId() {
		return _designationClassId;
	}

	@Override
	public void setDesignationClassId(long designationClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationClassId = designationClassId;
	}

	@JSON
	@Override
	public long getDesignationGroupId() {
		return _designationGroupId;
	}

	@Override
	public void setDesignationGroupId(long designationGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationGroupId = designationGroupId;
	}

	@JSON
	@Override
	public long getJoiningModeId() {
		return _joiningModeId;
	}

	@Override
	public void setJoiningModeId(long joiningModeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningModeId = joiningModeId;
	}

	@JSON
	@Override
	public long getJoiningLetterId() {
		return _joiningLetterId;
	}

	@Override
	public void setJoiningLetterId(long joiningLetterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningLetterId = joiningLetterId;
	}

	@JSON
	@Override
	public long getGradeModeId() {
		return _gradeModeId;
	}

	@Override
	public void setGradeModeId(long gradeModeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeModeId = gradeModeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGradeModeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("gradeModeId"));
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toDate = toDate;
	}

	@JSON
	@Override
	public Date getSelectionDate() {
		return _selectionDate;
	}

	@Override
	public void setSelectionDate(Date selectionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_selectionDate = selectionDate;
	}

	@JSON
	@Override
	public Date getConfirmationDate() {
		return _confirmationDate;
	}

	@Override
	public void setConfirmationDate(Date confirmationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_confirmationDate = confirmationDate;
	}

	@JSON
	@Override
	public Date getGradeConfirmationDate() {
		return _gradeConfirmationDate;
	}

	@Override
	public void setGradeConfirmationDate(Date gradeConfirmationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeConfirmationDate = gradeConfirmationDate;
	}

	@JSON
	@Override
	public Date getGovtServiceDate() {
		return _govtServiceDate;
	}

	@Override
	public void setGovtServiceDate(Date govtServiceDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_govtServiceDate = govtServiceDate;
	}

	@JSON
	@Override
	public String getRecruitmentBatch() {
		if (_recruitmentBatch == null) {
			return "";
		}
		else {
			return _recruitmentBatch;
		}
	}

	@Override
	public void setRecruitmentBatch(String recruitmentBatch) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recruitmentBatch = recruitmentBatch;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public String getEmailId() {
		if (_emailId == null) {
			return "";
		}
		else {
			return _emailId;
		}
	}

	@Override
	public void setEmailId(String emailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailId = emailId;
	}

	@JSON
	@Override
	public String getPostBox() {
		if (_postBox == null) {
			return "";
		}
		else {
			return _postBox;
		}
	}

	@Override
	public void setPostBox(String postBox) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postBox = postBox;
	}

	@JSON
	@Override
	public Date getDateOfJoining() {
		return _dateOfJoining;
	}

	@Override
	public void setDateOfJoining(Date dateOfJoining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfJoining = dateOfJoining;
	}

	@JSON
	@Override
	public Date getDateOfJoiningOrganization() {
		return _dateOfJoiningOrganization;
	}

	@Override
	public void setDateOfJoiningOrganization(Date dateOfJoiningOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfJoiningOrganization = dateOfJoiningOrganization;
	}

	@JSON
	@Override
	public long getRank() {
		return _rank;
	}

	@Override
	public void setRank(long rank) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rank = rank;
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeJoining.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeJoining toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeJoining>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeJoiningImpl employeeJoiningImpl = new EmployeeJoiningImpl();

		employeeJoiningImpl.setEmployeeJoiningId(getEmployeeJoiningId());
		employeeJoiningImpl.setGroupId(getGroupId());
		employeeJoiningImpl.setCompanyId(getCompanyId());
		employeeJoiningImpl.setUserId(getUserId());
		employeeJoiningImpl.setUserName(getUserName());
		employeeJoiningImpl.setCreateDate(getCreateDate());
		employeeJoiningImpl.setModifiedDate(getModifiedDate());
		employeeJoiningImpl.setAadhaarNo(getAadhaarNo());
		employeeJoiningImpl.setEmailAddress(getEmailAddress());
		employeeJoiningImpl.setExServiceMan(isExServiceMan());
		employeeJoiningImpl.setPanNo(getPanNo());
		employeeJoiningImpl.setPersonalNo(getPersonalNo());
		employeeJoiningImpl.setPeopleId(getPeopleId());
		employeeJoiningImpl.setFullName(getFullName());
		employeeJoiningImpl.setDesignationId(getDesignationId());
		employeeJoiningImpl.setGradeId(getGradeId());
		employeeJoiningImpl.setPayLevelId(getPayLevelId());
		employeeJoiningImpl.setPostId(getPostId());
		employeeJoiningImpl.setTradeId(getTradeId());
		employeeJoiningImpl.setOrganizationId(getOrganizationId());
		employeeJoiningImpl.setSubOrganizationId(getSubOrganizationId());
		employeeJoiningImpl.setDesignationClassId(getDesignationClassId());
		employeeJoiningImpl.setDesignationGroupId(getDesignationGroupId());
		employeeJoiningImpl.setJoiningModeId(getJoiningModeId());
		employeeJoiningImpl.setJoiningLetterId(getJoiningLetterId());
		employeeJoiningImpl.setGradeModeId(getGradeModeId());
		employeeJoiningImpl.setFromDate(getFromDate());
		employeeJoiningImpl.setToDate(getToDate());
		employeeJoiningImpl.setSelectionDate(getSelectionDate());
		employeeJoiningImpl.setConfirmationDate(getConfirmationDate());
		employeeJoiningImpl.setGradeConfirmationDate(
			getGradeConfirmationDate());
		employeeJoiningImpl.setGovtServiceDate(getGovtServiceDate());
		employeeJoiningImpl.setRecruitmentBatch(getRecruitmentBatch());
		employeeJoiningImpl.setEmployeeId(getEmployeeId());
		employeeJoiningImpl.setEmailId(getEmailId());
		employeeJoiningImpl.setPostBox(getPostBox());
		employeeJoiningImpl.setDateOfJoining(getDateOfJoining());
		employeeJoiningImpl.setDateOfJoiningOrganization(
			getDateOfJoiningOrganization());
		employeeJoiningImpl.setRank(getRank());
		employeeJoiningImpl.setJoiningProcessId(getJoiningProcessId());
		employeeJoiningImpl.setStatus(getStatus());

		employeeJoiningImpl.resetOriginalValues();

		return employeeJoiningImpl;
	}

	@Override
	public int compareTo(EmployeeJoining employeeJoining) {
		long primaryKey = employeeJoining.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeJoining)) {
			return false;
		}

		EmployeeJoining employeeJoining = (EmployeeJoining)object;

		long primaryKey = employeeJoining.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeJoining> toCacheModel() {
		EmployeeJoiningCacheModel employeeJoiningCacheModel =
			new EmployeeJoiningCacheModel();

		employeeJoiningCacheModel.employeeJoiningId = getEmployeeJoiningId();

		employeeJoiningCacheModel.groupId = getGroupId();

		employeeJoiningCacheModel.companyId = getCompanyId();

		employeeJoiningCacheModel.userId = getUserId();

		employeeJoiningCacheModel.userName = getUserName();

		String userName = employeeJoiningCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeJoiningCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeJoiningCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeJoiningCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeJoiningCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeJoiningCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeJoiningCacheModel.aadhaarNo = getAadhaarNo();

		String aadhaarNo = employeeJoiningCacheModel.aadhaarNo;

		if ((aadhaarNo != null) && (aadhaarNo.length() == 0)) {
			employeeJoiningCacheModel.aadhaarNo = null;
		}

		employeeJoiningCacheModel.emailAddress = getEmailAddress();

		String emailAddress = employeeJoiningCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			employeeJoiningCacheModel.emailAddress = null;
		}

		employeeJoiningCacheModel.exServiceMan = isExServiceMan();

		employeeJoiningCacheModel.panNo = getPanNo();

		String panNo = employeeJoiningCacheModel.panNo;

		if ((panNo != null) && (panNo.length() == 0)) {
			employeeJoiningCacheModel.panNo = null;
		}

		employeeJoiningCacheModel.personalNo = getPersonalNo();

		String personalNo = employeeJoiningCacheModel.personalNo;

		if ((personalNo != null) && (personalNo.length() == 0)) {
			employeeJoiningCacheModel.personalNo = null;
		}

		employeeJoiningCacheModel.peopleId = getPeopleId();

		employeeJoiningCacheModel.fullName = getFullName();

		String fullName = employeeJoiningCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			employeeJoiningCacheModel.fullName = null;
		}

		employeeJoiningCacheModel.designationId = getDesignationId();

		employeeJoiningCacheModel.gradeId = getGradeId();

		employeeJoiningCacheModel.payLevelId = getPayLevelId();

		employeeJoiningCacheModel.postId = getPostId();

		employeeJoiningCacheModel.tradeId = getTradeId();

		employeeJoiningCacheModel.organizationId = getOrganizationId();

		employeeJoiningCacheModel.subOrganizationId = getSubOrganizationId();

		employeeJoiningCacheModel.designationClassId = getDesignationClassId();

		employeeJoiningCacheModel.designationGroupId = getDesignationGroupId();

		employeeJoiningCacheModel.joiningModeId = getJoiningModeId();

		employeeJoiningCacheModel.joiningLetterId = getJoiningLetterId();

		employeeJoiningCacheModel.gradeModeId = getGradeModeId();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			employeeJoiningCacheModel.fromDate = fromDate.getTime();
		}
		else {
			employeeJoiningCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			employeeJoiningCacheModel.toDate = toDate.getTime();
		}
		else {
			employeeJoiningCacheModel.toDate = Long.MIN_VALUE;
		}

		Date selectionDate = getSelectionDate();

		if (selectionDate != null) {
			employeeJoiningCacheModel.selectionDate = selectionDate.getTime();
		}
		else {
			employeeJoiningCacheModel.selectionDate = Long.MIN_VALUE;
		}

		Date confirmationDate = getConfirmationDate();

		if (confirmationDate != null) {
			employeeJoiningCacheModel.confirmationDate =
				confirmationDate.getTime();
		}
		else {
			employeeJoiningCacheModel.confirmationDate = Long.MIN_VALUE;
		}

		Date gradeConfirmationDate = getGradeConfirmationDate();

		if (gradeConfirmationDate != null) {
			employeeJoiningCacheModel.gradeConfirmationDate =
				gradeConfirmationDate.getTime();
		}
		else {
			employeeJoiningCacheModel.gradeConfirmationDate = Long.MIN_VALUE;
		}

		Date govtServiceDate = getGovtServiceDate();

		if (govtServiceDate != null) {
			employeeJoiningCacheModel.govtServiceDate =
				govtServiceDate.getTime();
		}
		else {
			employeeJoiningCacheModel.govtServiceDate = Long.MIN_VALUE;
		}

		employeeJoiningCacheModel.recruitmentBatch = getRecruitmentBatch();

		String recruitmentBatch = employeeJoiningCacheModel.recruitmentBatch;

		if ((recruitmentBatch != null) && (recruitmentBatch.length() == 0)) {
			employeeJoiningCacheModel.recruitmentBatch = null;
		}

		employeeJoiningCacheModel.employeeId = getEmployeeId();

		employeeJoiningCacheModel.emailId = getEmailId();

		String emailId = employeeJoiningCacheModel.emailId;

		if ((emailId != null) && (emailId.length() == 0)) {
			employeeJoiningCacheModel.emailId = null;
		}

		employeeJoiningCacheModel.postBox = getPostBox();

		String postBox = employeeJoiningCacheModel.postBox;

		if ((postBox != null) && (postBox.length() == 0)) {
			employeeJoiningCacheModel.postBox = null;
		}

		Date dateOfJoining = getDateOfJoining();

		if (dateOfJoining != null) {
			employeeJoiningCacheModel.dateOfJoining = dateOfJoining.getTime();
		}
		else {
			employeeJoiningCacheModel.dateOfJoining = Long.MIN_VALUE;
		}

		Date dateOfJoiningOrganization = getDateOfJoiningOrganization();

		if (dateOfJoiningOrganization != null) {
			employeeJoiningCacheModel.dateOfJoiningOrganization =
				dateOfJoiningOrganization.getTime();
		}
		else {
			employeeJoiningCacheModel.dateOfJoiningOrganization =
				Long.MIN_VALUE;
		}

		employeeJoiningCacheModel.rank = getRank();

		employeeJoiningCacheModel.joiningProcessId = getJoiningProcessId();

		employeeJoiningCacheModel.status = getStatus();

		return employeeJoiningCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeJoining, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeJoining, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeJoining, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EmployeeJoining)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeJoining, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeJoining, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeJoining, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmployeeJoining)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeJoining>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeJoiningId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _aadhaarNo;
	private String _emailAddress;
	private boolean _exServiceMan;
	private String _panNo;
	private String _personalNo;
	private long _peopleId;
	private String _fullName;
	private long _designationId;
	private long _gradeId;
	private long _payLevelId;
	private long _postId;
	private long _tradeId;
	private long _organizationId;
	private long _subOrganizationId;
	private long _designationClassId;
	private long _designationGroupId;
	private long _joiningModeId;
	private long _joiningLetterId;
	private long _gradeModeId;
	private Date _fromDate;
	private Date _toDate;
	private Date _selectionDate;
	private Date _confirmationDate;
	private Date _gradeConfirmationDate;
	private Date _govtServiceDate;
	private String _recruitmentBatch;
	private long _employeeId;
	private String _emailId;
	private String _postBox;
	private Date _dateOfJoining;
	private Date _dateOfJoiningOrganization;
	private long _rank;
	private long _joiningProcessId;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeJoining, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeJoining)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeJoiningId", _employeeJoiningId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("aadhaarNo", _aadhaarNo);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("exServiceMan", _exServiceMan);
		_columnOriginalValues.put("panNo", _panNo);
		_columnOriginalValues.put("personalNo", _personalNo);
		_columnOriginalValues.put("peopleId", _peopleId);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("gradeId", _gradeId);
		_columnOriginalValues.put("payLevelId", _payLevelId);
		_columnOriginalValues.put("postId", _postId);
		_columnOriginalValues.put("tradeId", _tradeId);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("subOrganizationId", _subOrganizationId);
		_columnOriginalValues.put("designationClassId", _designationClassId);
		_columnOriginalValues.put("designationGroupId", _designationGroupId);
		_columnOriginalValues.put("joiningModeId", _joiningModeId);
		_columnOriginalValues.put("joiningLetterId", _joiningLetterId);
		_columnOriginalValues.put("gradeModeId", _gradeModeId);
		_columnOriginalValues.put("fromDate", _fromDate);
		_columnOriginalValues.put("toDate", _toDate);
		_columnOriginalValues.put("selectionDate", _selectionDate);
		_columnOriginalValues.put("confirmationDate", _confirmationDate);
		_columnOriginalValues.put(
			"gradeConfirmationDate", _gradeConfirmationDate);
		_columnOriginalValues.put("govtServiceDate", _govtServiceDate);
		_columnOriginalValues.put("recruitmentBatch", _recruitmentBatch);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("emailId", _emailId);
		_columnOriginalValues.put("postBox", _postBox);
		_columnOriginalValues.put("dateOfJoining", _dateOfJoining);
		_columnOriginalValues.put(
			"dateOfJoiningOrganization", _dateOfJoiningOrganization);
		_columnOriginalValues.put("rank_", _rank);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("rank_", "rank");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeJoiningId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("aadhaarNo", 128L);

		columnBitmasks.put("emailAddress", 256L);

		columnBitmasks.put("exServiceMan", 512L);

		columnBitmasks.put("panNo", 1024L);

		columnBitmasks.put("personalNo", 2048L);

		columnBitmasks.put("peopleId", 4096L);

		columnBitmasks.put("fullName", 8192L);

		columnBitmasks.put("designationId", 16384L);

		columnBitmasks.put("gradeId", 32768L);

		columnBitmasks.put("payLevelId", 65536L);

		columnBitmasks.put("postId", 131072L);

		columnBitmasks.put("tradeId", 262144L);

		columnBitmasks.put("organizationId", 524288L);

		columnBitmasks.put("subOrganizationId", 1048576L);

		columnBitmasks.put("designationClassId", 2097152L);

		columnBitmasks.put("designationGroupId", 4194304L);

		columnBitmasks.put("joiningModeId", 8388608L);

		columnBitmasks.put("joiningLetterId", 16777216L);

		columnBitmasks.put("gradeModeId", 33554432L);

		columnBitmasks.put("fromDate", 67108864L);

		columnBitmasks.put("toDate", 134217728L);

		columnBitmasks.put("selectionDate", 268435456L);

		columnBitmasks.put("confirmationDate", 536870912L);

		columnBitmasks.put("gradeConfirmationDate", 1073741824L);

		columnBitmasks.put("govtServiceDate", 2147483648L);

		columnBitmasks.put("recruitmentBatch", 4294967296L);

		columnBitmasks.put("employeeId", 8589934592L);

		columnBitmasks.put("emailId", 17179869184L);

		columnBitmasks.put("postBox", 34359738368L);

		columnBitmasks.put("dateOfJoining", 68719476736L);

		columnBitmasks.put("dateOfJoiningOrganization", 137438953472L);

		columnBitmasks.put("rank_", 274877906944L);

		columnBitmasks.put("joiningProcessId", 549755813888L);

		columnBitmasks.put("status", 1099511627776L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeJoining _escapedModel;

}