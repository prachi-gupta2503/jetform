/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.SampleProcessRequest;
import com.adjecti.pis.liferay.model.SampleProcessRequestModel;
import com.adjecti.pis.liferay.model.SampleProcessRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SampleProcessRequest service. Represents a row in the &quot;pis_SampleProcessRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SampleProcessRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleProcessRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SampleProcessRequestImpl
 * @generated
 */
@JSON(strict = true)
public class SampleProcessRequestModelImpl
	extends BaseModelImpl<SampleProcessRequest>
	implements SampleProcessRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sample process request model instance should use the <code>SampleProcessRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_SampleProcessRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"sampleProcessRequestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"employeeId", Types.BIGINT}, {"deputationOrganization", Types.VARCHAR},
		{"deputationAddress", Types.VARCHAR}, {"deputationCity", Types.VARCHAR},
		{"deputationState", Types.VARCHAR}, {"processFileId", Types.BIGINT},
		{"processFileNo", Types.BIGINT}, {"doPart1Content", Types.VARCHAR},
		{"doPart1SumittedDate", Types.TIMESTAMP},
		{"doPart1ReviewDate", Types.TIMESTAMP}, {"doPart1Status", Types.BIGINT},
		{"doPart2Content", Types.VARCHAR},
		{"doPart2SumittedDate", Types.TIMESTAMP},
		{"doPart2ReviewDate", Types.TIMESTAMP}, {"doPart2Status", Types.BIGINT},
		{"requestStatus", Types.INTEGER},
		{"requestCompletedDate", Types.TIMESTAMP},
		{"reviewDate", Types.TIMESTAMP}, {"reviewerUserId", Types.BIGINT},
		{"approveDate", Types.TIMESTAMP}, {"approverUserId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleProcessRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deputationOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("processFileNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("doPart1Content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doPart1SumittedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("doPart1ReviewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("doPart1Status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("doPart2Content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doPart2SumittedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("doPart2ReviewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("doPart2Status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("requestCompletedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reviewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reviewerUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("approveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approverUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_SampleProcessRequest (uuid_ VARCHAR(75) null,sampleProcessRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,deputationOrganization VARCHAR(75) null,deputationAddress VARCHAR(75) null,deputationCity VARCHAR(75) null,deputationState VARCHAR(75) null,processFileId LONG,processFileNo LONG,doPart1Content VARCHAR(75) null,doPart1SumittedDate DATE null,doPart1ReviewDate DATE null,doPart1Status LONG,doPart2Content VARCHAR(75) null,doPart2SumittedDate DATE null,doPart2ReviewDate DATE null,doPart2Status LONG,requestStatus INTEGER,requestCompletedDate DATE null,reviewDate DATE null,reviewerUserId LONG,approveDate DATE null,approverUserId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_SampleProcessRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sampleProcessRequest.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_SampleProcessRequest.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long APPROVERUSERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REVIEWERUSERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static SampleProcessRequest toModel(
		SampleProcessRequestSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		SampleProcessRequest model = new SampleProcessRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setSampleProcessRequestId(soapModel.getSampleProcessRequestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setDeputationOrganization(soapModel.getDeputationOrganization());
		model.setDeputationAddress(soapModel.getDeputationAddress());
		model.setDeputationCity(soapModel.getDeputationCity());
		model.setDeputationState(soapModel.getDeputationState());
		model.setProcessFileId(soapModel.getProcessFileId());
		model.setProcessFileNo(soapModel.getProcessFileNo());
		model.setDoPart1Content(soapModel.getDoPart1Content());
		model.setDoPart1SumittedDate(soapModel.getDoPart1SumittedDate());
		model.setDoPart1ReviewDate(soapModel.getDoPart1ReviewDate());
		model.setDoPart1Status(soapModel.getDoPart1Status());
		model.setDoPart2Content(soapModel.getDoPart2Content());
		model.setDoPart2SumittedDate(soapModel.getDoPart2SumittedDate());
		model.setDoPart2ReviewDate(soapModel.getDoPart2ReviewDate());
		model.setDoPart2Status(soapModel.getDoPart2Status());
		model.setRequestStatus(soapModel.getRequestStatus());
		model.setRequestCompletedDate(soapModel.getRequestCompletedDate());
		model.setReviewDate(soapModel.getReviewDate());
		model.setReviewerUserId(soapModel.getReviewerUserId());
		model.setApproveDate(soapModel.getApproveDate());
		model.setApproverUserId(soapModel.getApproverUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<SampleProcessRequest> toModels(
		SampleProcessRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<SampleProcessRequest> models = new ArrayList<SampleProcessRequest>(
			soapModels.length);

		for (SampleProcessRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SampleProcessRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sampleProcessRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSampleProcessRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sampleProcessRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SampleProcessRequest.class;
	}

	@Override
	public String getModelClassName() {
		return SampleProcessRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SampleProcessRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SampleProcessRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleProcessRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SampleProcessRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SampleProcessRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SampleProcessRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SampleProcessRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SampleProcessRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SampleProcessRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SampleProcessRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SampleProcessRequest.class.getClassLoader(),
			SampleProcessRequest.class, ModelWrapper.class);

		try {
			Constructor<SampleProcessRequest> constructor =
				(Constructor<SampleProcessRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<SampleProcessRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SampleProcessRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SampleProcessRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<SampleProcessRequest, Object>>();
		Map<String, BiConsumer<SampleProcessRequest, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<SampleProcessRequest, ?>>();

		attributeGetterFunctions.put("uuid", SampleProcessRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setUuid);
		attributeGetterFunctions.put(
			"sampleProcessRequestId",
			SampleProcessRequest::getSampleProcessRequestId);
		attributeSetterBiConsumers.put(
			"sampleProcessRequestId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setSampleProcessRequestId);
		attributeGetterFunctions.put(
			"groupId", SampleProcessRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setGroupId);
		attributeGetterFunctions.put(
			"companyId", SampleProcessRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setCompanyId);
		attributeGetterFunctions.put("userId", SampleProcessRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setUserId);
		attributeGetterFunctions.put(
			"userName", SampleProcessRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setUserName);
		attributeGetterFunctions.put(
			"createDate", SampleProcessRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", SampleProcessRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", SampleProcessRequest::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setEmployeeId);
		attributeGetterFunctions.put(
			"deputationOrganization",
			SampleProcessRequest::getDeputationOrganization);
		attributeSetterBiConsumers.put(
			"deputationOrganization",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDeputationOrganization);
		attributeGetterFunctions.put(
			"deputationAddress", SampleProcessRequest::getDeputationAddress);
		attributeSetterBiConsumers.put(
			"deputationAddress",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDeputationAddress);
		attributeGetterFunctions.put(
			"deputationCity", SampleProcessRequest::getDeputationCity);
		attributeSetterBiConsumers.put(
			"deputationCity",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDeputationCity);
		attributeGetterFunctions.put(
			"deputationState", SampleProcessRequest::getDeputationState);
		attributeSetterBiConsumers.put(
			"deputationState",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDeputationState);
		attributeGetterFunctions.put(
			"processFileId", SampleProcessRequest::getProcessFileId);
		attributeSetterBiConsumers.put(
			"processFileId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setProcessFileId);
		attributeGetterFunctions.put(
			"processFileNo", SampleProcessRequest::getProcessFileNo);
		attributeSetterBiConsumers.put(
			"processFileNo",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setProcessFileNo);
		attributeGetterFunctions.put(
			"doPart1Content", SampleProcessRequest::getDoPart1Content);
		attributeSetterBiConsumers.put(
			"doPart1Content",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDoPart1Content);
		attributeGetterFunctions.put(
			"doPart1SumittedDate",
			SampleProcessRequest::getDoPart1SumittedDate);
		attributeSetterBiConsumers.put(
			"doPart1SumittedDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setDoPart1SumittedDate);
		attributeGetterFunctions.put(
			"doPart1ReviewDate", SampleProcessRequest::getDoPart1ReviewDate);
		attributeSetterBiConsumers.put(
			"doPart1ReviewDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setDoPart1ReviewDate);
		attributeGetterFunctions.put(
			"doPart1Status", SampleProcessRequest::getDoPart1Status);
		attributeSetterBiConsumers.put(
			"doPart1Status",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setDoPart1Status);
		attributeGetterFunctions.put(
			"doPart2Content", SampleProcessRequest::getDoPart2Content);
		attributeSetterBiConsumers.put(
			"doPart2Content",
			(BiConsumer<SampleProcessRequest, String>)
				SampleProcessRequest::setDoPart2Content);
		attributeGetterFunctions.put(
			"doPart2SumittedDate",
			SampleProcessRequest::getDoPart2SumittedDate);
		attributeSetterBiConsumers.put(
			"doPart2SumittedDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setDoPart2SumittedDate);
		attributeGetterFunctions.put(
			"doPart2ReviewDate", SampleProcessRequest::getDoPart2ReviewDate);
		attributeSetterBiConsumers.put(
			"doPart2ReviewDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setDoPart2ReviewDate);
		attributeGetterFunctions.put(
			"doPart2Status", SampleProcessRequest::getDoPart2Status);
		attributeSetterBiConsumers.put(
			"doPart2Status",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setDoPart2Status);
		attributeGetterFunctions.put(
			"requestStatus", SampleProcessRequest::getRequestStatus);
		attributeSetterBiConsumers.put(
			"requestStatus",
			(BiConsumer<SampleProcessRequest, Integer>)
				SampleProcessRequest::setRequestStatus);
		attributeGetterFunctions.put(
			"requestCompletedDate",
			SampleProcessRequest::getRequestCompletedDate);
		attributeSetterBiConsumers.put(
			"requestCompletedDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setRequestCompletedDate);
		attributeGetterFunctions.put(
			"reviewDate", SampleProcessRequest::getReviewDate);
		attributeSetterBiConsumers.put(
			"reviewDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setReviewDate);
		attributeGetterFunctions.put(
			"reviewerUserId", SampleProcessRequest::getReviewerUserId);
		attributeSetterBiConsumers.put(
			"reviewerUserId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setReviewerUserId);
		attributeGetterFunctions.put(
			"approveDate", SampleProcessRequest::getApproveDate);
		attributeSetterBiConsumers.put(
			"approveDate",
			(BiConsumer<SampleProcessRequest, Date>)
				SampleProcessRequest::setApproveDate);
		attributeGetterFunctions.put(
			"approverUserId", SampleProcessRequest::getApproverUserId);
		attributeSetterBiConsumers.put(
			"approverUserId",
			(BiConsumer<SampleProcessRequest, Long>)
				SampleProcessRequest::setApproverUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSampleProcessRequestId() {
		return _sampleProcessRequestId;
	}

	@Override
	public void setSampleProcessRequestId(long sampleProcessRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sampleProcessRequestId = sampleProcessRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public String getDeputationOrganization() {
		if (_deputationOrganization == null) {
			return "";
		}
		else {
			return _deputationOrganization;
		}
	}

	@Override
	public void setDeputationOrganization(String deputationOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationOrganization = deputationOrganization;
	}

	@JSON
	@Override
	public String getDeputationAddress() {
		if (_deputationAddress == null) {
			return "";
		}
		else {
			return _deputationAddress;
		}
	}

	@Override
	public void setDeputationAddress(String deputationAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationAddress = deputationAddress;
	}

	@JSON
	@Override
	public String getDeputationCity() {
		if (_deputationCity == null) {
			return "";
		}
		else {
			return _deputationCity;
		}
	}

	@Override
	public void setDeputationCity(String deputationCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationCity = deputationCity;
	}

	@JSON
	@Override
	public String getDeputationState() {
		if (_deputationState == null) {
			return "";
		}
		else {
			return _deputationState;
		}
	}

	@Override
	public void setDeputationState(String deputationState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationState = deputationState;
	}

	@JSON
	@Override
	public long getProcessFileId() {
		return _processFileId;
	}

	@Override
	public void setProcessFileId(long processFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileId = processFileId;
	}

	@JSON
	@Override
	public long getProcessFileNo() {
		return _processFileNo;
	}

	@Override
	public void setProcessFileNo(long processFileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileNo = processFileNo;
	}

	@JSON
	@Override
	public String getDoPart1Content() {
		if (_doPart1Content == null) {
			return "";
		}
		else {
			return _doPart1Content;
		}
	}

	@Override
	public void setDoPart1Content(String doPart1Content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart1Content = doPart1Content;
	}

	@JSON
	@Override
	public Date getDoPart1SumittedDate() {
		return _doPart1SumittedDate;
	}

	@Override
	public void setDoPart1SumittedDate(Date doPart1SumittedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart1SumittedDate = doPart1SumittedDate;
	}

	@JSON
	@Override
	public Date getDoPart1ReviewDate() {
		return _doPart1ReviewDate;
	}

	@Override
	public void setDoPart1ReviewDate(Date doPart1ReviewDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart1ReviewDate = doPart1ReviewDate;
	}

	@JSON
	@Override
	public long getDoPart1Status() {
		return _doPart1Status;
	}

	@Override
	public void setDoPart1Status(long doPart1Status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart1Status = doPart1Status;
	}

	@JSON
	@Override
	public String getDoPart2Content() {
		if (_doPart2Content == null) {
			return "";
		}
		else {
			return _doPart2Content;
		}
	}

	@Override
	public void setDoPart2Content(String doPart2Content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart2Content = doPart2Content;
	}

	@JSON
	@Override
	public Date getDoPart2SumittedDate() {
		return _doPart2SumittedDate;
	}

	@Override
	public void setDoPart2SumittedDate(Date doPart2SumittedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart2SumittedDate = doPart2SumittedDate;
	}

	@JSON
	@Override
	public Date getDoPart2ReviewDate() {
		return _doPart2ReviewDate;
	}

	@Override
	public void setDoPart2ReviewDate(Date doPart2ReviewDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart2ReviewDate = doPart2ReviewDate;
	}

	@JSON
	@Override
	public long getDoPart2Status() {
		return _doPart2Status;
	}

	@Override
	public void setDoPart2Status(long doPart2Status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doPart2Status = doPart2Status;
	}

	@JSON
	@Override
	public int getRequestStatus() {
		return _requestStatus;
	}

	@Override
	public void setRequestStatus(int requestStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestStatus = requestStatus;
	}

	@JSON
	@Override
	public Date getRequestCompletedDate() {
		return _requestCompletedDate;
	}

	@Override
	public void setRequestCompletedDate(Date requestCompletedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestCompletedDate = requestCompletedDate;
	}

	@JSON
	@Override
	public Date getReviewDate() {
		return _reviewDate;
	}

	@Override
	public void setReviewDate(Date reviewDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewDate = reviewDate;
	}

	@JSON
	@Override
	public long getReviewerUserId() {
		return _reviewerUserId;
	}

	@Override
	public void setReviewerUserId(long reviewerUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewerUserId = reviewerUserId;
	}

	@Override
	public String getReviewerUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getReviewerUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setReviewerUserUuid(String reviewerUserUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalReviewerUserId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("reviewerUserId"));
	}

	@JSON
	@Override
	public Date getApproveDate() {
		return _approveDate;
	}

	@Override
	public void setApproveDate(Date approveDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approveDate = approveDate;
	}

	@JSON
	@Override
	public long getApproverUserId() {
		return _approverUserId;
	}

	@Override
	public void setApproverUserId(long approverUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approverUserId = approverUserId;
	}

	@Override
	public String getApproverUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getApproverUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setApproverUserUuid(String approverUserUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalApproverUserId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("approverUserId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(SampleProcessRequest.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SampleProcessRequest.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SampleProcessRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SampleProcessRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SampleProcessRequestImpl sampleProcessRequestImpl =
			new SampleProcessRequestImpl();

		sampleProcessRequestImpl.setUuid(getUuid());
		sampleProcessRequestImpl.setSampleProcessRequestId(
			getSampleProcessRequestId());
		sampleProcessRequestImpl.setGroupId(getGroupId());
		sampleProcessRequestImpl.setCompanyId(getCompanyId());
		sampleProcessRequestImpl.setUserId(getUserId());
		sampleProcessRequestImpl.setUserName(getUserName());
		sampleProcessRequestImpl.setCreateDate(getCreateDate());
		sampleProcessRequestImpl.setModifiedDate(getModifiedDate());
		sampleProcessRequestImpl.setEmployeeId(getEmployeeId());
		sampleProcessRequestImpl.setDeputationOrganization(
			getDeputationOrganization());
		sampleProcessRequestImpl.setDeputationAddress(getDeputationAddress());
		sampleProcessRequestImpl.setDeputationCity(getDeputationCity());
		sampleProcessRequestImpl.setDeputationState(getDeputationState());
		sampleProcessRequestImpl.setProcessFileId(getProcessFileId());
		sampleProcessRequestImpl.setProcessFileNo(getProcessFileNo());
		sampleProcessRequestImpl.setDoPart1Content(getDoPart1Content());
		sampleProcessRequestImpl.setDoPart1SumittedDate(
			getDoPart1SumittedDate());
		sampleProcessRequestImpl.setDoPart1ReviewDate(getDoPart1ReviewDate());
		sampleProcessRequestImpl.setDoPart1Status(getDoPart1Status());
		sampleProcessRequestImpl.setDoPart2Content(getDoPart2Content());
		sampleProcessRequestImpl.setDoPart2SumittedDate(
			getDoPart2SumittedDate());
		sampleProcessRequestImpl.setDoPart2ReviewDate(getDoPart2ReviewDate());
		sampleProcessRequestImpl.setDoPart2Status(getDoPart2Status());
		sampleProcessRequestImpl.setRequestStatus(getRequestStatus());
		sampleProcessRequestImpl.setRequestCompletedDate(
			getRequestCompletedDate());
		sampleProcessRequestImpl.setReviewDate(getReviewDate());
		sampleProcessRequestImpl.setReviewerUserId(getReviewerUserId());
		sampleProcessRequestImpl.setApproveDate(getApproveDate());
		sampleProcessRequestImpl.setApproverUserId(getApproverUserId());

		sampleProcessRequestImpl.resetOriginalValues();

		return sampleProcessRequestImpl;
	}

	@Override
	public int compareTo(SampleProcessRequest sampleProcessRequest) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sampleProcessRequest.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SampleProcessRequest)) {
			return false;
		}

		SampleProcessRequest sampleProcessRequest =
			(SampleProcessRequest)object;

		long primaryKey = sampleProcessRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SampleProcessRequest> toCacheModel() {
		SampleProcessRequestCacheModel sampleProcessRequestCacheModel =
			new SampleProcessRequestCacheModel();

		sampleProcessRequestCacheModel.uuid = getUuid();

		String uuid = sampleProcessRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sampleProcessRequestCacheModel.uuid = null;
		}

		sampleProcessRequestCacheModel.sampleProcessRequestId =
			getSampleProcessRequestId();

		sampleProcessRequestCacheModel.groupId = getGroupId();

		sampleProcessRequestCacheModel.companyId = getCompanyId();

		sampleProcessRequestCacheModel.userId = getUserId();

		sampleProcessRequestCacheModel.userName = getUserName();

		String userName = sampleProcessRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sampleProcessRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sampleProcessRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sampleProcessRequestCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sampleProcessRequestCacheModel.employeeId = getEmployeeId();

		sampleProcessRequestCacheModel.deputationOrganization =
			getDeputationOrganization();

		String deputationOrganization =
			sampleProcessRequestCacheModel.deputationOrganization;

		if ((deputationOrganization != null) &&
			(deputationOrganization.length() == 0)) {

			sampleProcessRequestCacheModel.deputationOrganization = null;
		}

		sampleProcessRequestCacheModel.deputationAddress =
			getDeputationAddress();

		String deputationAddress =
			sampleProcessRequestCacheModel.deputationAddress;

		if ((deputationAddress != null) && (deputationAddress.length() == 0)) {
			sampleProcessRequestCacheModel.deputationAddress = null;
		}

		sampleProcessRequestCacheModel.deputationCity = getDeputationCity();

		String deputationCity = sampleProcessRequestCacheModel.deputationCity;

		if ((deputationCity != null) && (deputationCity.length() == 0)) {
			sampleProcessRequestCacheModel.deputationCity = null;
		}

		sampleProcessRequestCacheModel.deputationState = getDeputationState();

		String deputationState = sampleProcessRequestCacheModel.deputationState;

		if ((deputationState != null) && (deputationState.length() == 0)) {
			sampleProcessRequestCacheModel.deputationState = null;
		}

		sampleProcessRequestCacheModel.processFileId = getProcessFileId();

		sampleProcessRequestCacheModel.processFileNo = getProcessFileNo();

		sampleProcessRequestCacheModel.doPart1Content = getDoPart1Content();

		String doPart1Content = sampleProcessRequestCacheModel.doPart1Content;

		if ((doPart1Content != null) && (doPart1Content.length() == 0)) {
			sampleProcessRequestCacheModel.doPart1Content = null;
		}

		Date doPart1SumittedDate = getDoPart1SumittedDate();

		if (doPart1SumittedDate != null) {
			sampleProcessRequestCacheModel.doPart1SumittedDate =
				doPart1SumittedDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.doPart1SumittedDate = Long.MIN_VALUE;
		}

		Date doPart1ReviewDate = getDoPart1ReviewDate();

		if (doPart1ReviewDate != null) {
			sampleProcessRequestCacheModel.doPart1ReviewDate =
				doPart1ReviewDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.doPart1ReviewDate = Long.MIN_VALUE;
		}

		sampleProcessRequestCacheModel.doPart1Status = getDoPart1Status();

		sampleProcessRequestCacheModel.doPart2Content = getDoPart2Content();

		String doPart2Content = sampleProcessRequestCacheModel.doPart2Content;

		if ((doPart2Content != null) && (doPart2Content.length() == 0)) {
			sampleProcessRequestCacheModel.doPart2Content = null;
		}

		Date doPart2SumittedDate = getDoPart2SumittedDate();

		if (doPart2SumittedDate != null) {
			sampleProcessRequestCacheModel.doPart2SumittedDate =
				doPart2SumittedDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.doPart2SumittedDate = Long.MIN_VALUE;
		}

		Date doPart2ReviewDate = getDoPart2ReviewDate();

		if (doPart2ReviewDate != null) {
			sampleProcessRequestCacheModel.doPart2ReviewDate =
				doPart2ReviewDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.doPart2ReviewDate = Long.MIN_VALUE;
		}

		sampleProcessRequestCacheModel.doPart2Status = getDoPart2Status();

		sampleProcessRequestCacheModel.requestStatus = getRequestStatus();

		Date requestCompletedDate = getRequestCompletedDate();

		if (requestCompletedDate != null) {
			sampleProcessRequestCacheModel.requestCompletedDate =
				requestCompletedDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.requestCompletedDate =
				Long.MIN_VALUE;
		}

		Date reviewDate = getReviewDate();

		if (reviewDate != null) {
			sampleProcessRequestCacheModel.reviewDate = reviewDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.reviewDate = Long.MIN_VALUE;
		}

		sampleProcessRequestCacheModel.reviewerUserId = getReviewerUserId();

		Date approveDate = getApproveDate();

		if (approveDate != null) {
			sampleProcessRequestCacheModel.approveDate = approveDate.getTime();
		}
		else {
			sampleProcessRequestCacheModel.approveDate = Long.MIN_VALUE;
		}

		sampleProcessRequestCacheModel.approverUserId = getApproverUserId();

		return sampleProcessRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SampleProcessRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SampleProcessRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleProcessRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((SampleProcessRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SampleProcessRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SampleProcessRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleProcessRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((SampleProcessRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SampleProcessRequest>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _sampleProcessRequestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private String _deputationOrganization;
	private String _deputationAddress;
	private String _deputationCity;
	private String _deputationState;
	private long _processFileId;
	private long _processFileNo;
	private String _doPart1Content;
	private Date _doPart1SumittedDate;
	private Date _doPart1ReviewDate;
	private long _doPart1Status;
	private String _doPart2Content;
	private Date _doPart2SumittedDate;
	private Date _doPart2ReviewDate;
	private long _doPart2Status;
	private int _requestStatus;
	private Date _requestCompletedDate;
	private Date _reviewDate;
	private long _reviewerUserId;
	private Date _approveDate;
	private long _approverUserId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SampleProcessRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SampleProcessRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"sampleProcessRequestId", _sampleProcessRequestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put(
			"deputationOrganization", _deputationOrganization);
		_columnOriginalValues.put("deputationAddress", _deputationAddress);
		_columnOriginalValues.put("deputationCity", _deputationCity);
		_columnOriginalValues.put("deputationState", _deputationState);
		_columnOriginalValues.put("processFileId", _processFileId);
		_columnOriginalValues.put("processFileNo", _processFileNo);
		_columnOriginalValues.put("doPart1Content", _doPart1Content);
		_columnOriginalValues.put("doPart1SumittedDate", _doPart1SumittedDate);
		_columnOriginalValues.put("doPart1ReviewDate", _doPart1ReviewDate);
		_columnOriginalValues.put("doPart1Status", _doPart1Status);
		_columnOriginalValues.put("doPart2Content", _doPart2Content);
		_columnOriginalValues.put("doPart2SumittedDate", _doPart2SumittedDate);
		_columnOriginalValues.put("doPart2ReviewDate", _doPart2ReviewDate);
		_columnOriginalValues.put("doPart2Status", _doPart2Status);
		_columnOriginalValues.put("requestStatus", _requestStatus);
		_columnOriginalValues.put(
			"requestCompletedDate", _requestCompletedDate);
		_columnOriginalValues.put("reviewDate", _reviewDate);
		_columnOriginalValues.put("reviewerUserId", _reviewerUserId);
		_columnOriginalValues.put("approveDate", _approveDate);
		_columnOriginalValues.put("approverUserId", _approverUserId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("sampleProcessRequestId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("employeeId", 256L);

		columnBitmasks.put("deputationOrganization", 512L);

		columnBitmasks.put("deputationAddress", 1024L);

		columnBitmasks.put("deputationCity", 2048L);

		columnBitmasks.put("deputationState", 4096L);

		columnBitmasks.put("processFileId", 8192L);

		columnBitmasks.put("processFileNo", 16384L);

		columnBitmasks.put("doPart1Content", 32768L);

		columnBitmasks.put("doPart1SumittedDate", 65536L);

		columnBitmasks.put("doPart1ReviewDate", 131072L);

		columnBitmasks.put("doPart1Status", 262144L);

		columnBitmasks.put("doPart2Content", 524288L);

		columnBitmasks.put("doPart2SumittedDate", 1048576L);

		columnBitmasks.put("doPart2ReviewDate", 2097152L);

		columnBitmasks.put("doPart2Status", 4194304L);

		columnBitmasks.put("requestStatus", 8388608L);

		columnBitmasks.put("requestCompletedDate", 16777216L);

		columnBitmasks.put("reviewDate", 33554432L);

		columnBitmasks.put("reviewerUserId", 67108864L);

		columnBitmasks.put("approveDate", 134217728L);

		columnBitmasks.put("approverUserId", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SampleProcessRequest _escapedModel;

}