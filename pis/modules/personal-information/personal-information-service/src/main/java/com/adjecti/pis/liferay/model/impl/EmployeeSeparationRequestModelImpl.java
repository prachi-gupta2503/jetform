/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeSeparationRequest;
import com.adjecti.pis.liferay.model.EmployeeSeparationRequestModel;
import com.adjecti.pis.liferay.model.EmployeeSeparationRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeSeparationRequest service. Represents a row in the &quot;pis_EmployeeSeparationRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeSeparationRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeSeparationRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeSeparationRequestImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeSeparationRequestModelImpl
	extends BaseModelImpl<EmployeeSeparationRequest>
	implements EmployeeSeparationRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee separation request model instance should use the <code>EmployeeSeparationRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeSeparationRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"employeeSeparationRequestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"employeeId", Types.BIGINT}, {"separationMode", Types.VARCHAR},
		{"separationDate", Types.TIMESTAMP}, {"remarks", Types.VARCHAR},
		{"processFileId", Types.BIGINT}, {"processFileNo", Types.VARCHAR},
		{"officeOrderNo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeSeparationRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("separationMode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("separationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("processFileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeOrderNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeSeparationRequest (uuid_ VARCHAR(75) null,employeeSeparationRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,separationMode VARCHAR(75) null,separationDate DATE null,remarks VARCHAR(75) null,processFileId LONG,processFileNo VARCHAR(75) null,officeOrderNo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeSeparationRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeSeparationRequest.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeSeparationRequest.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeSeparationRequest toModel(
		EmployeeSeparationRequestSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		EmployeeSeparationRequest model = new EmployeeSeparationRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setEmployeeSeparationRequestId(
			soapModel.getEmployeeSeparationRequestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setSeparationMode(soapModel.getSeparationMode());
		model.setSeparationDate(soapModel.getSeparationDate());
		model.setRemarks(soapModel.getRemarks());
		model.setProcessFileId(soapModel.getProcessFileId());
		model.setProcessFileNo(soapModel.getProcessFileNo());
		model.setOfficeOrderNo(soapModel.getOfficeOrderNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeSeparationRequest> toModels(
		EmployeeSeparationRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeSeparationRequest> models =
			new ArrayList<EmployeeSeparationRequest>(soapModels.length);

		for (EmployeeSeparationRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeSeparationRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeSeparationRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeSeparationRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeSeparationRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeSeparationRequest.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeSeparationRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeSeparationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeSeparationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeSeparationRequest, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeSeparationRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeSeparationRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeSeparationRequest, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeSeparationRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeSeparationRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeSeparationRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeSeparationRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeSeparationRequest.class.getClassLoader(),
			EmployeeSeparationRequest.class, ModelWrapper.class);

		try {
			Constructor<EmployeeSeparationRequest> constructor =
				(Constructor<EmployeeSeparationRequest>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<EmployeeSeparationRequest, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<EmployeeSeparationRequest, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeSeparationRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeeSeparationRequest, Object>>();
		Map<String, BiConsumer<EmployeeSeparationRequest, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EmployeeSeparationRequest, ?>>();

		attributeGetterFunctions.put(
			"uuid", EmployeeSeparationRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setUuid);
		attributeGetterFunctions.put(
			"employeeSeparationRequestId",
			EmployeeSeparationRequest::getEmployeeSeparationRequestId);
		attributeSetterBiConsumers.put(
			"employeeSeparationRequestId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setEmployeeSeparationRequestId);
		attributeGetterFunctions.put(
			"groupId", EmployeeSeparationRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeSeparationRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setCompanyId);
		attributeGetterFunctions.put(
			"userId", EmployeeSeparationRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setUserId);
		attributeGetterFunctions.put(
			"userName", EmployeeSeparationRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeSeparationRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeSeparationRequest, Date>)
				EmployeeSeparationRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeSeparationRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeSeparationRequest, Date>)
				EmployeeSeparationRequest::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", EmployeeSeparationRequest::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setEmployeeId);
		attributeGetterFunctions.put(
			"separationMode", EmployeeSeparationRequest::getSeparationMode);
		attributeSetterBiConsumers.put(
			"separationMode",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setSeparationMode);
		attributeGetterFunctions.put(
			"separationDate", EmployeeSeparationRequest::getSeparationDate);
		attributeSetterBiConsumers.put(
			"separationDate",
			(BiConsumer<EmployeeSeparationRequest, Date>)
				EmployeeSeparationRequest::setSeparationDate);
		attributeGetterFunctions.put(
			"remarks", EmployeeSeparationRequest::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setRemarks);
		attributeGetterFunctions.put(
			"processFileId", EmployeeSeparationRequest::getProcessFileId);
		attributeSetterBiConsumers.put(
			"processFileId",
			(BiConsumer<EmployeeSeparationRequest, Long>)
				EmployeeSeparationRequest::setProcessFileId);
		attributeGetterFunctions.put(
			"processFileNo", EmployeeSeparationRequest::getProcessFileNo);
		attributeSetterBiConsumers.put(
			"processFileNo",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setProcessFileNo);
		attributeGetterFunctions.put(
			"officeOrderNo", EmployeeSeparationRequest::getOfficeOrderNo);
		attributeSetterBiConsumers.put(
			"officeOrderNo",
			(BiConsumer<EmployeeSeparationRequest, String>)
				EmployeeSeparationRequest::setOfficeOrderNo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEmployeeSeparationRequestId() {
		return _employeeSeparationRequestId;
	}

	@Override
	public void setEmployeeSeparationRequestId(
		long employeeSeparationRequestId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeSeparationRequestId = employeeSeparationRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public String getSeparationMode() {
		if (_separationMode == null) {
			return "";
		}
		else {
			return _separationMode;
		}
	}

	@Override
	public void setSeparationMode(String separationMode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationMode = separationMode;
	}

	@JSON
	@Override
	public Date getSeparationDate() {
		return _separationDate;
	}

	@Override
	public void setSeparationDate(Date separationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationDate = separationDate;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public long getProcessFileId() {
		return _processFileId;
	}

	@Override
	public void setProcessFileId(long processFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileId = processFileId;
	}

	@JSON
	@Override
	public String getProcessFileNo() {
		if (_processFileNo == null) {
			return "";
		}
		else {
			return _processFileNo;
		}
	}

	@Override
	public void setProcessFileNo(String processFileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileNo = processFileNo;
	}

	@JSON
	@Override
	public String getOfficeOrderNo() {
		if (_officeOrderNo == null) {
			return "";
		}
		else {
			return _officeOrderNo;
		}
	}

	@Override
	public void setOfficeOrderNo(String officeOrderNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officeOrderNo = officeOrderNo;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				EmployeeSeparationRequest.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeSeparationRequest.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeSeparationRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeSeparationRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeSeparationRequestImpl employeeSeparationRequestImpl =
			new EmployeeSeparationRequestImpl();

		employeeSeparationRequestImpl.setUuid(getUuid());
		employeeSeparationRequestImpl.setEmployeeSeparationRequestId(
			getEmployeeSeparationRequestId());
		employeeSeparationRequestImpl.setGroupId(getGroupId());
		employeeSeparationRequestImpl.setCompanyId(getCompanyId());
		employeeSeparationRequestImpl.setUserId(getUserId());
		employeeSeparationRequestImpl.setUserName(getUserName());
		employeeSeparationRequestImpl.setCreateDate(getCreateDate());
		employeeSeparationRequestImpl.setModifiedDate(getModifiedDate());
		employeeSeparationRequestImpl.setEmployeeId(getEmployeeId());
		employeeSeparationRequestImpl.setSeparationMode(getSeparationMode());
		employeeSeparationRequestImpl.setSeparationDate(getSeparationDate());
		employeeSeparationRequestImpl.setRemarks(getRemarks());
		employeeSeparationRequestImpl.setProcessFileId(getProcessFileId());
		employeeSeparationRequestImpl.setProcessFileNo(getProcessFileNo());
		employeeSeparationRequestImpl.setOfficeOrderNo(getOfficeOrderNo());

		employeeSeparationRequestImpl.resetOriginalValues();

		return employeeSeparationRequestImpl;
	}

	@Override
	public int compareTo(EmployeeSeparationRequest employeeSeparationRequest) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), employeeSeparationRequest.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeSeparationRequest)) {
			return false;
		}

		EmployeeSeparationRequest employeeSeparationRequest =
			(EmployeeSeparationRequest)object;

		long primaryKey = employeeSeparationRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeSeparationRequest> toCacheModel() {
		EmployeeSeparationRequestCacheModel
			employeeSeparationRequestCacheModel =
				new EmployeeSeparationRequestCacheModel();

		employeeSeparationRequestCacheModel.uuid = getUuid();

		String uuid = employeeSeparationRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeSeparationRequestCacheModel.uuid = null;
		}

		employeeSeparationRequestCacheModel.employeeSeparationRequestId =
			getEmployeeSeparationRequestId();

		employeeSeparationRequestCacheModel.groupId = getGroupId();

		employeeSeparationRequestCacheModel.companyId = getCompanyId();

		employeeSeparationRequestCacheModel.userId = getUserId();

		employeeSeparationRequestCacheModel.userName = getUserName();

		String userName = employeeSeparationRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeSeparationRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeSeparationRequestCacheModel.createDate =
				createDate.getTime();
		}
		else {
			employeeSeparationRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeSeparationRequestCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			employeeSeparationRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeSeparationRequestCacheModel.employeeId = getEmployeeId();

		employeeSeparationRequestCacheModel.separationMode =
			getSeparationMode();

		String separationMode =
			employeeSeparationRequestCacheModel.separationMode;

		if ((separationMode != null) && (separationMode.length() == 0)) {
			employeeSeparationRequestCacheModel.separationMode = null;
		}

		Date separationDate = getSeparationDate();

		if (separationDate != null) {
			employeeSeparationRequestCacheModel.separationDate =
				separationDate.getTime();
		}
		else {
			employeeSeparationRequestCacheModel.separationDate = Long.MIN_VALUE;
		}

		employeeSeparationRequestCacheModel.remarks = getRemarks();

		String remarks = employeeSeparationRequestCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			employeeSeparationRequestCacheModel.remarks = null;
		}

		employeeSeparationRequestCacheModel.processFileId = getProcessFileId();

		employeeSeparationRequestCacheModel.processFileNo = getProcessFileNo();

		String processFileNo =
			employeeSeparationRequestCacheModel.processFileNo;

		if ((processFileNo != null) && (processFileNo.length() == 0)) {
			employeeSeparationRequestCacheModel.processFileNo = null;
		}

		employeeSeparationRequestCacheModel.officeOrderNo = getOfficeOrderNo();

		String officeOrderNo =
			employeeSeparationRequestCacheModel.officeOrderNo;

		if ((officeOrderNo != null) && (officeOrderNo.length() == 0)) {
			employeeSeparationRequestCacheModel.officeOrderNo = null;
		}

		return employeeSeparationRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeSeparationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeSeparationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeSeparationRequest, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((EmployeeSeparationRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeSeparationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeSeparationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeSeparationRequest, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((EmployeeSeparationRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, EmployeeSeparationRequest>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private String _uuid;
	private long _employeeSeparationRequestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private String _separationMode;
	private Date _separationDate;
	private String _remarks;
	private long _processFileId;
	private String _processFileNo;
	private String _officeOrderNo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeSeparationRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeSeparationRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"employeeSeparationRequestId", _employeeSeparationRequestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("separationMode", _separationMode);
		_columnOriginalValues.put("separationDate", _separationDate);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("processFileId", _processFileId);
		_columnOriginalValues.put("processFileNo", _processFileNo);
		_columnOriginalValues.put("officeOrderNo", _officeOrderNo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("employeeSeparationRequestId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("employeeId", 256L);

		columnBitmasks.put("separationMode", 512L);

		columnBitmasks.put("separationDate", 1024L);

		columnBitmasks.put("remarks", 2048L);

		columnBitmasks.put("processFileId", 4096L);

		columnBitmasks.put("processFileNo", 8192L);

		columnBitmasks.put("officeOrderNo", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeSeparationRequest _escapedModel;

}