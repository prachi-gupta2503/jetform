/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeDeputationRequest;
import com.adjecti.pis.liferay.model.EmployeeDeputationRequestModel;
import com.adjecti.pis.liferay.model.EmployeeDeputationRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeDeputationRequest service. Represents a row in the &quot;pis_EmployeeDeputationRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeDeputationRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDeputationRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeDeputationRequestImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeDeputationRequestModelImpl
	extends BaseModelImpl<EmployeeDeputationRequest>
	implements EmployeeDeputationRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee deputation request model instance should use the <code>EmployeeDeputationRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeDeputationRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"employeeDeputationRequestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"employeeId", Types.BIGINT}, {"deputationOrganization", Types.VARCHAR},
		{"deputationAddress", Types.VARCHAR}, {"deputationCity", Types.VARCHAR},
		{"deputationState", Types.VARCHAR},
		{"deputationStartDate", Types.TIMESTAMP},
		{"lastDateInCurrentUnit", Types.TIMESTAMP},
		{"processFileId", Types.BIGINT}, {"processFileNo", Types.VARCHAR},
		{"officeOrderNo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeDeputationRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deputationOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputationStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastDateInCurrentUnit", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("processFileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeOrderNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeDeputationRequest (uuid_ VARCHAR(75) null,employeeDeputationRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,deputationOrganization VARCHAR(75) null,deputationAddress VARCHAR(75) null,deputationCity VARCHAR(75) null,deputationState VARCHAR(75) null,deputationStartDate DATE null,lastDateInCurrentUnit DATE null,processFileId LONG,processFileNo VARCHAR(75) null,officeOrderNo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeDeputationRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeDeputationRequest.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeDeputationRequest.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeDeputationRequest toModel(
		EmployeeDeputationRequestSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		EmployeeDeputationRequest model = new EmployeeDeputationRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setEmployeeDeputationRequestId(
			soapModel.getEmployeeDeputationRequestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setDeputationOrganization(soapModel.getDeputationOrganization());
		model.setDeputationAddress(soapModel.getDeputationAddress());
		model.setDeputationCity(soapModel.getDeputationCity());
		model.setDeputationState(soapModel.getDeputationState());
		model.setDeputationStartDate(soapModel.getDeputationStartDate());
		model.setLastDateInCurrentUnit(soapModel.getLastDateInCurrentUnit());
		model.setProcessFileId(soapModel.getProcessFileId());
		model.setProcessFileNo(soapModel.getProcessFileNo());
		model.setOfficeOrderNo(soapModel.getOfficeOrderNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeDeputationRequest> toModels(
		EmployeeDeputationRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeDeputationRequest> models =
			new ArrayList<EmployeeDeputationRequest>(soapModels.length);

		for (EmployeeDeputationRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeDeputationRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeDeputationRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeDeputationRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeDeputationRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeDeputationRequest.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeDeputationRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeDeputationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeDeputationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeDeputationRequest, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeDeputationRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeDeputationRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeDeputationRequest, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeDeputationRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeDeputationRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeDeputationRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeDeputationRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeDeputationRequest.class.getClassLoader(),
			EmployeeDeputationRequest.class, ModelWrapper.class);

		try {
			Constructor<EmployeeDeputationRequest> constructor =
				(Constructor<EmployeeDeputationRequest>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<EmployeeDeputationRequest, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<EmployeeDeputationRequest, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeDeputationRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeeDeputationRequest, Object>>();
		Map<String, BiConsumer<EmployeeDeputationRequest, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EmployeeDeputationRequest, ?>>();

		attributeGetterFunctions.put(
			"uuid", EmployeeDeputationRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setUuid);
		attributeGetterFunctions.put(
			"employeeDeputationRequestId",
			EmployeeDeputationRequest::getEmployeeDeputationRequestId);
		attributeSetterBiConsumers.put(
			"employeeDeputationRequestId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setEmployeeDeputationRequestId);
		attributeGetterFunctions.put(
			"groupId", EmployeeDeputationRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeDeputationRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setCompanyId);
		attributeGetterFunctions.put(
			"userId", EmployeeDeputationRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setUserId);
		attributeGetterFunctions.put(
			"userName", EmployeeDeputationRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeDeputationRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeDeputationRequest, Date>)
				EmployeeDeputationRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeDeputationRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeDeputationRequest, Date>)
				EmployeeDeputationRequest::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", EmployeeDeputationRequest::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setEmployeeId);
		attributeGetterFunctions.put(
			"deputationOrganization",
			EmployeeDeputationRequest::getDeputationOrganization);
		attributeSetterBiConsumers.put(
			"deputationOrganization",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setDeputationOrganization);
		attributeGetterFunctions.put(
			"deputationAddress",
			EmployeeDeputationRequest::getDeputationAddress);
		attributeSetterBiConsumers.put(
			"deputationAddress",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setDeputationAddress);
		attributeGetterFunctions.put(
			"deputationCity", EmployeeDeputationRequest::getDeputationCity);
		attributeSetterBiConsumers.put(
			"deputationCity",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setDeputationCity);
		attributeGetterFunctions.put(
			"deputationState", EmployeeDeputationRequest::getDeputationState);
		attributeSetterBiConsumers.put(
			"deputationState",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setDeputationState);
		attributeGetterFunctions.put(
			"deputationStartDate",
			EmployeeDeputationRequest::getDeputationStartDate);
		attributeSetterBiConsumers.put(
			"deputationStartDate",
			(BiConsumer<EmployeeDeputationRequest, Date>)
				EmployeeDeputationRequest::setDeputationStartDate);
		attributeGetterFunctions.put(
			"lastDateInCurrentUnit",
			EmployeeDeputationRequest::getLastDateInCurrentUnit);
		attributeSetterBiConsumers.put(
			"lastDateInCurrentUnit",
			(BiConsumer<EmployeeDeputationRequest, Date>)
				EmployeeDeputationRequest::setLastDateInCurrentUnit);
		attributeGetterFunctions.put(
			"processFileId", EmployeeDeputationRequest::getProcessFileId);
		attributeSetterBiConsumers.put(
			"processFileId",
			(BiConsumer<EmployeeDeputationRequest, Long>)
				EmployeeDeputationRequest::setProcessFileId);
		attributeGetterFunctions.put(
			"processFileNo", EmployeeDeputationRequest::getProcessFileNo);
		attributeSetterBiConsumers.put(
			"processFileNo",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setProcessFileNo);
		attributeGetterFunctions.put(
			"officeOrderNo", EmployeeDeputationRequest::getOfficeOrderNo);
		attributeSetterBiConsumers.put(
			"officeOrderNo",
			(BiConsumer<EmployeeDeputationRequest, String>)
				EmployeeDeputationRequest::setOfficeOrderNo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEmployeeDeputationRequestId() {
		return _employeeDeputationRequestId;
	}

	@Override
	public void setEmployeeDeputationRequestId(
		long employeeDeputationRequestId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeDeputationRequestId = employeeDeputationRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public String getDeputationOrganization() {
		if (_deputationOrganization == null) {
			return "";
		}
		else {
			return _deputationOrganization;
		}
	}

	@Override
	public void setDeputationOrganization(String deputationOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationOrganization = deputationOrganization;
	}

	@JSON
	@Override
	public String getDeputationAddress() {
		if (_deputationAddress == null) {
			return "";
		}
		else {
			return _deputationAddress;
		}
	}

	@Override
	public void setDeputationAddress(String deputationAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationAddress = deputationAddress;
	}

	@JSON
	@Override
	public String getDeputationCity() {
		if (_deputationCity == null) {
			return "";
		}
		else {
			return _deputationCity;
		}
	}

	@Override
	public void setDeputationCity(String deputationCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationCity = deputationCity;
	}

	@JSON
	@Override
	public String getDeputationState() {
		if (_deputationState == null) {
			return "";
		}
		else {
			return _deputationState;
		}
	}

	@Override
	public void setDeputationState(String deputationState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationState = deputationState;
	}

	@JSON
	@Override
	public Date getDeputationStartDate() {
		return _deputationStartDate;
	}

	@Override
	public void setDeputationStartDate(Date deputationStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputationStartDate = deputationStartDate;
	}

	@JSON
	@Override
	public Date getLastDateInCurrentUnit() {
		return _lastDateInCurrentUnit;
	}

	@Override
	public void setLastDateInCurrentUnit(Date lastDateInCurrentUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastDateInCurrentUnit = lastDateInCurrentUnit;
	}

	@JSON
	@Override
	public long getProcessFileId() {
		return _processFileId;
	}

	@Override
	public void setProcessFileId(long processFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileId = processFileId;
	}

	@JSON
	@Override
	public String getProcessFileNo() {
		if (_processFileNo == null) {
			return "";
		}
		else {
			return _processFileNo;
		}
	}

	@Override
	public void setProcessFileNo(String processFileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processFileNo = processFileNo;
	}

	@JSON
	@Override
	public String getOfficeOrderNo() {
		if (_officeOrderNo == null) {
			return "";
		}
		else {
			return _officeOrderNo;
		}
	}

	@Override
	public void setOfficeOrderNo(String officeOrderNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officeOrderNo = officeOrderNo;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				EmployeeDeputationRequest.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeDeputationRequest.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeDeputationRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeDeputationRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeDeputationRequestImpl employeeDeputationRequestImpl =
			new EmployeeDeputationRequestImpl();

		employeeDeputationRequestImpl.setUuid(getUuid());
		employeeDeputationRequestImpl.setEmployeeDeputationRequestId(
			getEmployeeDeputationRequestId());
		employeeDeputationRequestImpl.setGroupId(getGroupId());
		employeeDeputationRequestImpl.setCompanyId(getCompanyId());
		employeeDeputationRequestImpl.setUserId(getUserId());
		employeeDeputationRequestImpl.setUserName(getUserName());
		employeeDeputationRequestImpl.setCreateDate(getCreateDate());
		employeeDeputationRequestImpl.setModifiedDate(getModifiedDate());
		employeeDeputationRequestImpl.setEmployeeId(getEmployeeId());
		employeeDeputationRequestImpl.setDeputationOrganization(
			getDeputationOrganization());
		employeeDeputationRequestImpl.setDeputationAddress(
			getDeputationAddress());
		employeeDeputationRequestImpl.setDeputationCity(getDeputationCity());
		employeeDeputationRequestImpl.setDeputationState(getDeputationState());
		employeeDeputationRequestImpl.setDeputationStartDate(
			getDeputationStartDate());
		employeeDeputationRequestImpl.setLastDateInCurrentUnit(
			getLastDateInCurrentUnit());
		employeeDeputationRequestImpl.setProcessFileId(getProcessFileId());
		employeeDeputationRequestImpl.setProcessFileNo(getProcessFileNo());
		employeeDeputationRequestImpl.setOfficeOrderNo(getOfficeOrderNo());

		employeeDeputationRequestImpl.resetOriginalValues();

		return employeeDeputationRequestImpl;
	}

	@Override
	public int compareTo(EmployeeDeputationRequest employeeDeputationRequest) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), employeeDeputationRequest.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeDeputationRequest)) {
			return false;
		}

		EmployeeDeputationRequest employeeDeputationRequest =
			(EmployeeDeputationRequest)object;

		long primaryKey = employeeDeputationRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeDeputationRequest> toCacheModel() {
		EmployeeDeputationRequestCacheModel
			employeeDeputationRequestCacheModel =
				new EmployeeDeputationRequestCacheModel();

		employeeDeputationRequestCacheModel.uuid = getUuid();

		String uuid = employeeDeputationRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeDeputationRequestCacheModel.uuid = null;
		}

		employeeDeputationRequestCacheModel.employeeDeputationRequestId =
			getEmployeeDeputationRequestId();

		employeeDeputationRequestCacheModel.groupId = getGroupId();

		employeeDeputationRequestCacheModel.companyId = getCompanyId();

		employeeDeputationRequestCacheModel.userId = getUserId();

		employeeDeputationRequestCacheModel.userName = getUserName();

		String userName = employeeDeputationRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeDeputationRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeDeputationRequestCacheModel.createDate =
				createDate.getTime();
		}
		else {
			employeeDeputationRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeDeputationRequestCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			employeeDeputationRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeDeputationRequestCacheModel.employeeId = getEmployeeId();

		employeeDeputationRequestCacheModel.deputationOrganization =
			getDeputationOrganization();

		String deputationOrganization =
			employeeDeputationRequestCacheModel.deputationOrganization;

		if ((deputationOrganization != null) &&
			(deputationOrganization.length() == 0)) {

			employeeDeputationRequestCacheModel.deputationOrganization = null;
		}

		employeeDeputationRequestCacheModel.deputationAddress =
			getDeputationAddress();

		String deputationAddress =
			employeeDeputationRequestCacheModel.deputationAddress;

		if ((deputationAddress != null) && (deputationAddress.length() == 0)) {
			employeeDeputationRequestCacheModel.deputationAddress = null;
		}

		employeeDeputationRequestCacheModel.deputationCity =
			getDeputationCity();

		String deputationCity =
			employeeDeputationRequestCacheModel.deputationCity;

		if ((deputationCity != null) && (deputationCity.length() == 0)) {
			employeeDeputationRequestCacheModel.deputationCity = null;
		}

		employeeDeputationRequestCacheModel.deputationState =
			getDeputationState();

		String deputationState =
			employeeDeputationRequestCacheModel.deputationState;

		if ((deputationState != null) && (deputationState.length() == 0)) {
			employeeDeputationRequestCacheModel.deputationState = null;
		}

		Date deputationStartDate = getDeputationStartDate();

		if (deputationStartDate != null) {
			employeeDeputationRequestCacheModel.deputationStartDate =
				deputationStartDate.getTime();
		}
		else {
			employeeDeputationRequestCacheModel.deputationStartDate =
				Long.MIN_VALUE;
		}

		Date lastDateInCurrentUnit = getLastDateInCurrentUnit();

		if (lastDateInCurrentUnit != null) {
			employeeDeputationRequestCacheModel.lastDateInCurrentUnit =
				lastDateInCurrentUnit.getTime();
		}
		else {
			employeeDeputationRequestCacheModel.lastDateInCurrentUnit =
				Long.MIN_VALUE;
		}

		employeeDeputationRequestCacheModel.processFileId = getProcessFileId();

		employeeDeputationRequestCacheModel.processFileNo = getProcessFileNo();

		String processFileNo =
			employeeDeputationRequestCacheModel.processFileNo;

		if ((processFileNo != null) && (processFileNo.length() == 0)) {
			employeeDeputationRequestCacheModel.processFileNo = null;
		}

		employeeDeputationRequestCacheModel.officeOrderNo = getOfficeOrderNo();

		String officeOrderNo =
			employeeDeputationRequestCacheModel.officeOrderNo;

		if ((officeOrderNo != null) && (officeOrderNo.length() == 0)) {
			employeeDeputationRequestCacheModel.officeOrderNo = null;
		}

		return employeeDeputationRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeDeputationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeDeputationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeDeputationRequest, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((EmployeeDeputationRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeDeputationRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeDeputationRequest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeDeputationRequest, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((EmployeeDeputationRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, EmployeeDeputationRequest>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private String _uuid;
	private long _employeeDeputationRequestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private String _deputationOrganization;
	private String _deputationAddress;
	private String _deputationCity;
	private String _deputationState;
	private Date _deputationStartDate;
	private Date _lastDateInCurrentUnit;
	private long _processFileId;
	private String _processFileNo;
	private String _officeOrderNo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeDeputationRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeDeputationRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"employeeDeputationRequestId", _employeeDeputationRequestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put(
			"deputationOrganization", _deputationOrganization);
		_columnOriginalValues.put("deputationAddress", _deputationAddress);
		_columnOriginalValues.put("deputationCity", _deputationCity);
		_columnOriginalValues.put("deputationState", _deputationState);
		_columnOriginalValues.put("deputationStartDate", _deputationStartDate);
		_columnOriginalValues.put(
			"lastDateInCurrentUnit", _lastDateInCurrentUnit);
		_columnOriginalValues.put("processFileId", _processFileId);
		_columnOriginalValues.put("processFileNo", _processFileNo);
		_columnOriginalValues.put("officeOrderNo", _officeOrderNo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("employeeDeputationRequestId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("employeeId", 256L);

		columnBitmasks.put("deputationOrganization", 512L);

		columnBitmasks.put("deputationAddress", 1024L);

		columnBitmasks.put("deputationCity", 2048L);

		columnBitmasks.put("deputationState", 4096L);

		columnBitmasks.put("deputationStartDate", 8192L);

		columnBitmasks.put("lastDateInCurrentUnit", 16384L);

		columnBitmasks.put("processFileId", 32768L);

		columnBitmasks.put("processFileNo", 65536L);

		columnBitmasks.put("officeOrderNo", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeDeputationRequest _escapedModel;

}