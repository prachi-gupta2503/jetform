/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.FamilyEducationDetail;
import com.adjecti.pis.liferay.model.FamilyEducationDetailModel;
import com.adjecti.pis.liferay.model.FamilyEducationDetailSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FamilyEducationDetail service. Represents a row in the &quot;pis_FamilyEducationDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FamilyEducationDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FamilyEducationDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FamilyEducationDetailImpl
 * @generated
 */
@JSON(strict = true)
public class FamilyEducationDetailModelImpl
	extends BaseModelImpl<FamilyEducationDetail>
	implements FamilyEducationDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a family education detail model instance should use the <code>FamilyEducationDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_FamilyEducationDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"familyEducationDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"boardUniversity", Types.VARCHAR},
		{"cityOfStudy", Types.VARCHAR}, {"fromYear", Types.INTEGER},
		{"institutionName", Types.VARCHAR}, {"toYear", Types.INTEGER},
		{"familyMemberId", Types.BIGINT}, {"levelId", Types.BIGINT},
		{"stateId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("familyEducationDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("boardUniversity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityOfStudy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("institutionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("familyMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("levelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_FamilyEducationDetail (familyEducationDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,boardUniversity VARCHAR(75) null,cityOfStudy VARCHAR(75) null,fromYear INTEGER,institutionName VARCHAR(75) null,toYear INTEGER,familyMemberId LONG,levelId LONG,stateId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_FamilyEducationDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY familyEducationDetail.familyEducationDetailId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_FamilyEducationDetail.familyEducationDetailId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FAMILYEDUCATIONDETAILID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static FamilyEducationDetail toModel(
		FamilyEducationDetailSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		FamilyEducationDetail model = new FamilyEducationDetailImpl();

		model.setFamilyEducationDetailId(
			soapModel.getFamilyEducationDetailId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBoardUniversity(soapModel.getBoardUniversity());
		model.setCityOfStudy(soapModel.getCityOfStudy());
		model.setFromYear(soapModel.getFromYear());
		model.setInstitutionName(soapModel.getInstitutionName());
		model.setToYear(soapModel.getToYear());
		model.setFamilyMemberId(soapModel.getFamilyMemberId());
		model.setLevelId(soapModel.getLevelId());
		model.setStateId(soapModel.getStateId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<FamilyEducationDetail> toModels(
		FamilyEducationDetailSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<FamilyEducationDetail> models =
			new ArrayList<FamilyEducationDetail>(soapModels.length);

		for (FamilyEducationDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FamilyEducationDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _familyEducationDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFamilyEducationDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _familyEducationDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FamilyEducationDetail.class;
	}

	@Override
	public String getModelClassName() {
		return FamilyEducationDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FamilyEducationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FamilyEducationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyEducationDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FamilyEducationDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FamilyEducationDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FamilyEducationDetail, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FamilyEducationDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FamilyEducationDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FamilyEducationDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FamilyEducationDetail>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FamilyEducationDetail.class.getClassLoader(),
			FamilyEducationDetail.class, ModelWrapper.class);

		try {
			Constructor<FamilyEducationDetail> constructor =
				(Constructor<FamilyEducationDetail>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FamilyEducationDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FamilyEducationDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FamilyEducationDetail, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FamilyEducationDetail, Object>>();
		Map<String, BiConsumer<FamilyEducationDetail, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FamilyEducationDetail, ?>>();

		attributeGetterFunctions.put(
			"familyEducationDetailId",
			FamilyEducationDetail::getFamilyEducationDetailId);
		attributeSetterBiConsumers.put(
			"familyEducationDetailId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setFamilyEducationDetailId);
		attributeGetterFunctions.put(
			"groupId", FamilyEducationDetail::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FamilyEducationDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setCompanyId);
		attributeGetterFunctions.put(
			"userId", FamilyEducationDetail::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setUserId);
		attributeGetterFunctions.put(
			"userName", FamilyEducationDetail::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FamilyEducationDetail, String>)
				FamilyEducationDetail::setUserName);
		attributeGetterFunctions.put(
			"createDate", FamilyEducationDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FamilyEducationDetail, Date>)
				FamilyEducationDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FamilyEducationDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FamilyEducationDetail, Date>)
				FamilyEducationDetail::setModifiedDate);
		attributeGetterFunctions.put(
			"boardUniversity", FamilyEducationDetail::getBoardUniversity);
		attributeSetterBiConsumers.put(
			"boardUniversity",
			(BiConsumer<FamilyEducationDetail, String>)
				FamilyEducationDetail::setBoardUniversity);
		attributeGetterFunctions.put(
			"cityOfStudy", FamilyEducationDetail::getCityOfStudy);
		attributeSetterBiConsumers.put(
			"cityOfStudy",
			(BiConsumer<FamilyEducationDetail, String>)
				FamilyEducationDetail::setCityOfStudy);
		attributeGetterFunctions.put(
			"fromYear", FamilyEducationDetail::getFromYear);
		attributeSetterBiConsumers.put(
			"fromYear",
			(BiConsumer<FamilyEducationDetail, Integer>)
				FamilyEducationDetail::setFromYear);
		attributeGetterFunctions.put(
			"institutionName", FamilyEducationDetail::getInstitutionName);
		attributeSetterBiConsumers.put(
			"institutionName",
			(BiConsumer<FamilyEducationDetail, String>)
				FamilyEducationDetail::setInstitutionName);
		attributeGetterFunctions.put(
			"toYear", FamilyEducationDetail::getToYear);
		attributeSetterBiConsumers.put(
			"toYear",
			(BiConsumer<FamilyEducationDetail, Integer>)
				FamilyEducationDetail::setToYear);
		attributeGetterFunctions.put(
			"familyMemberId", FamilyEducationDetail::getFamilyMemberId);
		attributeSetterBiConsumers.put(
			"familyMemberId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setFamilyMemberId);
		attributeGetterFunctions.put(
			"levelId", FamilyEducationDetail::getLevelId);
		attributeSetterBiConsumers.put(
			"levelId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setLevelId);
		attributeGetterFunctions.put(
			"stateId", FamilyEducationDetail::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<FamilyEducationDetail, Long>)
				FamilyEducationDetail::setStateId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFamilyEducationDetailId() {
		return _familyEducationDetailId;
	}

	@Override
	public void setFamilyEducationDetailId(long familyEducationDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyEducationDetailId = familyEducationDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBoardUniversity() {
		if (_boardUniversity == null) {
			return "";
		}
		else {
			return _boardUniversity;
		}
	}

	@Override
	public void setBoardUniversity(String boardUniversity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_boardUniversity = boardUniversity;
	}

	@JSON
	@Override
	public String getCityOfStudy() {
		if (_cityOfStudy == null) {
			return "";
		}
		else {
			return _cityOfStudy;
		}
	}

	@Override
	public void setCityOfStudy(String cityOfStudy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityOfStudy = cityOfStudy;
	}

	@JSON
	@Override
	public int getFromYear() {
		return _fromYear;
	}

	@Override
	public void setFromYear(int fromYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromYear = fromYear;
	}

	@JSON
	@Override
	public String getInstitutionName() {
		if (_institutionName == null) {
			return "";
		}
		else {
			return _institutionName;
		}
	}

	@Override
	public void setInstitutionName(String institutionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_institutionName = institutionName;
	}

	@JSON
	@Override
	public int getToYear() {
		return _toYear;
	}

	@Override
	public void setToYear(int toYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toYear = toYear;
	}

	@JSON
	@Override
	public long getFamilyMemberId() {
		return _familyMemberId;
	}

	@Override
	public void setFamilyMemberId(long familyMemberId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyMemberId = familyMemberId;
	}

	@JSON
	@Override
	public long getLevelId() {
		return _levelId;
	}

	@Override
	public void setLevelId(long levelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_levelId = levelId;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FamilyEducationDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FamilyEducationDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FamilyEducationDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FamilyEducationDetailImpl familyEducationDetailImpl =
			new FamilyEducationDetailImpl();

		familyEducationDetailImpl.setFamilyEducationDetailId(
			getFamilyEducationDetailId());
		familyEducationDetailImpl.setGroupId(getGroupId());
		familyEducationDetailImpl.setCompanyId(getCompanyId());
		familyEducationDetailImpl.setUserId(getUserId());
		familyEducationDetailImpl.setUserName(getUserName());
		familyEducationDetailImpl.setCreateDate(getCreateDate());
		familyEducationDetailImpl.setModifiedDate(getModifiedDate());
		familyEducationDetailImpl.setBoardUniversity(getBoardUniversity());
		familyEducationDetailImpl.setCityOfStudy(getCityOfStudy());
		familyEducationDetailImpl.setFromYear(getFromYear());
		familyEducationDetailImpl.setInstitutionName(getInstitutionName());
		familyEducationDetailImpl.setToYear(getToYear());
		familyEducationDetailImpl.setFamilyMemberId(getFamilyMemberId());
		familyEducationDetailImpl.setLevelId(getLevelId());
		familyEducationDetailImpl.setStateId(getStateId());

		familyEducationDetailImpl.resetOriginalValues();

		return familyEducationDetailImpl;
	}

	@Override
	public int compareTo(FamilyEducationDetail familyEducationDetail) {
		long primaryKey = familyEducationDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FamilyEducationDetail)) {
			return false;
		}

		FamilyEducationDetail familyEducationDetail =
			(FamilyEducationDetail)object;

		long primaryKey = familyEducationDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FamilyEducationDetail> toCacheModel() {
		FamilyEducationDetailCacheModel familyEducationDetailCacheModel =
			new FamilyEducationDetailCacheModel();

		familyEducationDetailCacheModel.familyEducationDetailId =
			getFamilyEducationDetailId();

		familyEducationDetailCacheModel.groupId = getGroupId();

		familyEducationDetailCacheModel.companyId = getCompanyId();

		familyEducationDetailCacheModel.userId = getUserId();

		familyEducationDetailCacheModel.userName = getUserName();

		String userName = familyEducationDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			familyEducationDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			familyEducationDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			familyEducationDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			familyEducationDetailCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			familyEducationDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		familyEducationDetailCacheModel.boardUniversity = getBoardUniversity();

		String boardUniversity =
			familyEducationDetailCacheModel.boardUniversity;

		if ((boardUniversity != null) && (boardUniversity.length() == 0)) {
			familyEducationDetailCacheModel.boardUniversity = null;
		}

		familyEducationDetailCacheModel.cityOfStudy = getCityOfStudy();

		String cityOfStudy = familyEducationDetailCacheModel.cityOfStudy;

		if ((cityOfStudy != null) && (cityOfStudy.length() == 0)) {
			familyEducationDetailCacheModel.cityOfStudy = null;
		}

		familyEducationDetailCacheModel.fromYear = getFromYear();

		familyEducationDetailCacheModel.institutionName = getInstitutionName();

		String institutionName =
			familyEducationDetailCacheModel.institutionName;

		if ((institutionName != null) && (institutionName.length() == 0)) {
			familyEducationDetailCacheModel.institutionName = null;
		}

		familyEducationDetailCacheModel.toYear = getToYear();

		familyEducationDetailCacheModel.familyMemberId = getFamilyMemberId();

		familyEducationDetailCacheModel.levelId = getLevelId();

		familyEducationDetailCacheModel.stateId = getStateId();

		return familyEducationDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FamilyEducationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FamilyEducationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyEducationDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((FamilyEducationDetail)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FamilyEducationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FamilyEducationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyEducationDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((FamilyEducationDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FamilyEducationDetail>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _familyEducationDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _boardUniversity;
	private String _cityOfStudy;
	private int _fromYear;
	private String _institutionName;
	private int _toYear;
	private long _familyMemberId;
	private long _levelId;
	private long _stateId;

	public <T> T getColumnValue(String columnName) {
		Function<FamilyEducationDetail, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FamilyEducationDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"familyEducationDetailId", _familyEducationDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("boardUniversity", _boardUniversity);
		_columnOriginalValues.put("cityOfStudy", _cityOfStudy);
		_columnOriginalValues.put("fromYear", _fromYear);
		_columnOriginalValues.put("institutionName", _institutionName);
		_columnOriginalValues.put("toYear", _toYear);
		_columnOriginalValues.put("familyMemberId", _familyMemberId);
		_columnOriginalValues.put("levelId", _levelId);
		_columnOriginalValues.put("stateId", _stateId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("familyEducationDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("boardUniversity", 128L);

		columnBitmasks.put("cityOfStudy", 256L);

		columnBitmasks.put("fromYear", 512L);

		columnBitmasks.put("institutionName", 1024L);

		columnBitmasks.put("toYear", 2048L);

		columnBitmasks.put("familyMemberId", 4096L);

		columnBitmasks.put("levelId", 8192L);

		columnBitmasks.put("stateId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FamilyEducationDetail _escapedModel;

}