/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.Employee;
import com.adjecti.pis.liferay.model.EmployeeModel;
import com.adjecti.pis.liferay.model.EmployeeSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;pis_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl
	extends BaseModelImpl<Employee> implements EmployeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the <code>Employee</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_Employee";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"employeeId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"state_", Types.VARCHAR}, {"personalNo", Types.VARCHAR},
		{"peopleId", Types.BIGINT}, {"emailId", Types.VARCHAR},
		{"designationId", Types.BIGINT}, {"gradeId", Types.BIGINT},
		{"payLevelId", Types.BIGINT}, {"postId", Types.BIGINT},
		{"tradeId", Types.BIGINT}, {"cadreId", Types.BIGINT},
		{"organizationId", Types.BIGINT}, {"subOrganizationId", Types.BIGINT},
		{"gradeModeId", Types.BIGINT}, {"designationClassId", Types.BIGINT},
		{"designationGroupId", Types.BIGINT}, {"postName", Types.VARCHAR},
		{"employmentStatus", Types.INTEGER}, {"dateOfJoining", Types.TIMESTAMP},
		{"dateOfJoiningOrganization", Types.TIMESTAMP},
		{"currentDesignationDate", Types.TIMESTAMP},
		{"retirementDate", Types.TIMESTAMP}, {"joiningProcessId", Types.BIGINT},
		{"processType", Types.VARCHAR}, {"loginId", Types.VARCHAR},
		{"bioData", Types.VARCHAR}, {"message", Types.VARCHAR},
		{"gpfNps", Types.VARCHAR}, {"gpfNpsNo", Types.VARCHAR},
		{"rank_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("peopleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payLevelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cadreId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subOrganizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeModeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employmentStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dateOfJoining", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfJoiningOrganization", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentDesignationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("retirementDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("processType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loginId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bioData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gpfNps", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gpfNpsNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rank_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_Employee (uuid_ VARCHAR(75) null,employeeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,state_ VARCHAR(75) null,personalNo VARCHAR(75) null,peopleId LONG,emailId VARCHAR(75) null,designationId LONG,gradeId LONG,payLevelId LONG,postId LONG,tradeId LONG,cadreId LONG,organizationId LONG,subOrganizationId LONG,gradeModeId LONG,designationClassId LONG,designationGroupId LONG,postName VARCHAR(75) null,employmentStatus INTEGER,dateOfJoining DATE null,dateOfJoiningOrganization DATE null,currentDesignationDate DATE null,retirementDate DATE null,joiningProcessId LONG,processType VARCHAR(75) null,loginId VARCHAR(75) null,bioData STRING null,message STRING null,gpfNps VARCHAR(75) null,gpfNpsNo VARCHAR(75) null,rank_ INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table pis_Employee";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employee.designationId ASC, employee.rank ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_Employee.designationId ASC, pis_Employee.rank_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CADREID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESIGNATIONGROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESIGNATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMAILID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GPFNPSNO_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GRADEID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GRADEMODEID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long LOGINID_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 4096L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PEOPLEID_COLUMN_BITMASK = 8192L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PERSONALNO_COLUMN_BITMASK = 16384L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long RETIREMENTDATE_COLUMN_BITMASK = 32768L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 65536L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SUBORGANIZATIONID_COLUMN_BITMASK = 131072L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TRADEID_COLUMN_BITMASK = 262144L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 524288L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1048576L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long RANK_COLUMN_BITMASK = 2097152L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Employee toModel(EmployeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Employee model = new EmployeeImpl();

		model.setUuid(soapModel.getUuid());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setState(soapModel.getState());
		model.setPersonalNo(soapModel.getPersonalNo());
		model.setPeopleId(soapModel.getPeopleId());
		model.setEmailId(soapModel.getEmailId());
		model.setDesignationId(soapModel.getDesignationId());
		model.setGradeId(soapModel.getGradeId());
		model.setPayLevelId(soapModel.getPayLevelId());
		model.setPostId(soapModel.getPostId());
		model.setTradeId(soapModel.getTradeId());
		model.setCadreId(soapModel.getCadreId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setSubOrganizationId(soapModel.getSubOrganizationId());
		model.setGradeModeId(soapModel.getGradeModeId());
		model.setDesignationClassId(soapModel.getDesignationClassId());
		model.setDesignationGroupId(soapModel.getDesignationGroupId());
		model.setPostName(soapModel.getPostName());
		model.setEmploymentStatus(soapModel.getEmploymentStatus());
		model.setDateOfJoining(soapModel.getDateOfJoining());
		model.setDateOfJoiningOrganization(
			soapModel.getDateOfJoiningOrganization());
		model.setCurrentDesignationDate(soapModel.getCurrentDesignationDate());
		model.setRetirementDate(soapModel.getRetirementDate());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setProcessType(soapModel.getProcessType());
		model.setLoginId(soapModel.getLoginId());
		model.setBioData(soapModel.getBioData());
		model.setMessage(soapModel.getMessage());
		model.setGpfNps(soapModel.getGpfNps());
		model.setGpfNpsNo(soapModel.getGpfNpsNo());
		model.setRank(soapModel.getRank());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Employee> toModels(EmployeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Employee> models = new ArrayList<Employee>(soapModels.length);

		for (EmployeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Employee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Employee, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Employee, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Employee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Employee, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Employee, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Employee>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Employee.class.getClassLoader(), Employee.class,
			ModelWrapper.class);

		try {
			Constructor<Employee> constructor =
				(Constructor<Employee>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Employee, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Employee, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Employee, Object>>();
		Map<String, BiConsumer<Employee, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Employee, ?>>();

		attributeGetterFunctions.put("uuid", Employee::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Employee, String>)Employee::setUuid);
		attributeGetterFunctions.put("employeeId", Employee::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId", (BiConsumer<Employee, Long>)Employee::setEmployeeId);
		attributeGetterFunctions.put("groupId", Employee::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Employee, Long>)Employee::setGroupId);
		attributeGetterFunctions.put("companyId", Employee::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Employee, Long>)Employee::setCompanyId);
		attributeGetterFunctions.put("userId", Employee::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Employee, Long>)Employee::setUserId);
		attributeGetterFunctions.put("userName", Employee::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Employee, String>)Employee::setUserName);
		attributeGetterFunctions.put("createDate", Employee::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Employee, Date>)Employee::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Employee::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Employee, Date>)Employee::setModifiedDate);
		attributeGetterFunctions.put("status", Employee::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Employee, Integer>)Employee::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Employee::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Employee, Long>)Employee::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Employee::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Employee, String>)Employee::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Employee::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Employee, Date>)Employee::setStatusDate);
		attributeGetterFunctions.put("state", Employee::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Employee, String>)Employee::setState);
		attributeGetterFunctions.put("personalNo", Employee::getPersonalNo);
		attributeSetterBiConsumers.put(
			"personalNo",
			(BiConsumer<Employee, String>)Employee::setPersonalNo);
		attributeGetterFunctions.put("peopleId", Employee::getPeopleId);
		attributeSetterBiConsumers.put(
			"peopleId", (BiConsumer<Employee, Long>)Employee::setPeopleId);
		attributeGetterFunctions.put("emailId", Employee::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId", (BiConsumer<Employee, String>)Employee::setEmailId);
		attributeGetterFunctions.put(
			"designationId", Employee::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<Employee, Long>)Employee::setDesignationId);
		attributeGetterFunctions.put("gradeId", Employee::getGradeId);
		attributeSetterBiConsumers.put(
			"gradeId", (BiConsumer<Employee, Long>)Employee::setGradeId);
		attributeGetterFunctions.put("payLevelId", Employee::getPayLevelId);
		attributeSetterBiConsumers.put(
			"payLevelId", (BiConsumer<Employee, Long>)Employee::setPayLevelId);
		attributeGetterFunctions.put("postId", Employee::getPostId);
		attributeSetterBiConsumers.put(
			"postId", (BiConsumer<Employee, Long>)Employee::setPostId);
		attributeGetterFunctions.put("tradeId", Employee::getTradeId);
		attributeSetterBiConsumers.put(
			"tradeId", (BiConsumer<Employee, Long>)Employee::setTradeId);
		attributeGetterFunctions.put("cadreId", Employee::getCadreId);
		attributeSetterBiConsumers.put(
			"cadreId", (BiConsumer<Employee, Long>)Employee::setCadreId);
		attributeGetterFunctions.put(
			"organizationId", Employee::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<Employee, Long>)Employee::setOrganizationId);
		attributeGetterFunctions.put(
			"subOrganizationId", Employee::getSubOrganizationId);
		attributeSetterBiConsumers.put(
			"subOrganizationId",
			(BiConsumer<Employee, Long>)Employee::setSubOrganizationId);
		attributeGetterFunctions.put("gradeModeId", Employee::getGradeModeId);
		attributeSetterBiConsumers.put(
			"gradeModeId",
			(BiConsumer<Employee, Long>)Employee::setGradeModeId);
		attributeGetterFunctions.put(
			"designationClassId", Employee::getDesignationClassId);
		attributeSetterBiConsumers.put(
			"designationClassId",
			(BiConsumer<Employee, Long>)Employee::setDesignationClassId);
		attributeGetterFunctions.put(
			"designationGroupId", Employee::getDesignationGroupId);
		attributeSetterBiConsumers.put(
			"designationGroupId",
			(BiConsumer<Employee, Long>)Employee::setDesignationGroupId);
		attributeGetterFunctions.put("postName", Employee::getPostName);
		attributeSetterBiConsumers.put(
			"postName", (BiConsumer<Employee, String>)Employee::setPostName);
		attributeGetterFunctions.put(
			"employmentStatus", Employee::getEmploymentStatus);
		attributeSetterBiConsumers.put(
			"employmentStatus",
			(BiConsumer<Employee, Integer>)Employee::setEmploymentStatus);
		attributeGetterFunctions.put(
			"dateOfJoining", Employee::getDateOfJoining);
		attributeSetterBiConsumers.put(
			"dateOfJoining",
			(BiConsumer<Employee, Date>)Employee::setDateOfJoining);
		attributeGetterFunctions.put(
			"dateOfJoiningOrganization",
			Employee::getDateOfJoiningOrganization);
		attributeSetterBiConsumers.put(
			"dateOfJoiningOrganization",
			(BiConsumer<Employee, Date>)Employee::setDateOfJoiningOrganization);
		attributeGetterFunctions.put(
			"currentDesignationDate", Employee::getCurrentDesignationDate);
		attributeSetterBiConsumers.put(
			"currentDesignationDate",
			(BiConsumer<Employee, Date>)Employee::setCurrentDesignationDate);
		attributeGetterFunctions.put(
			"retirementDate", Employee::getRetirementDate);
		attributeSetterBiConsumers.put(
			"retirementDate",
			(BiConsumer<Employee, Date>)Employee::setRetirementDate);
		attributeGetterFunctions.put(
			"joiningProcessId", Employee::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<Employee, Long>)Employee::setJoiningProcessId);
		attributeGetterFunctions.put("processType", Employee::getProcessType);
		attributeSetterBiConsumers.put(
			"processType",
			(BiConsumer<Employee, String>)Employee::setProcessType);
		attributeGetterFunctions.put("loginId", Employee::getLoginId);
		attributeSetterBiConsumers.put(
			"loginId", (BiConsumer<Employee, String>)Employee::setLoginId);
		attributeGetterFunctions.put("bioData", Employee::getBioData);
		attributeSetterBiConsumers.put(
			"bioData", (BiConsumer<Employee, String>)Employee::setBioData);
		attributeGetterFunctions.put("message", Employee::getMessage);
		attributeSetterBiConsumers.put(
			"message", (BiConsumer<Employee, String>)Employee::setMessage);
		attributeGetterFunctions.put("gpfNps", Employee::getGpfNps);
		attributeSetterBiConsumers.put(
			"gpfNps", (BiConsumer<Employee, String>)Employee::setGpfNps);
		attributeGetterFunctions.put("gpfNpsNo", Employee::getGpfNpsNo);
		attributeSetterBiConsumers.put(
			"gpfNpsNo", (BiConsumer<Employee, String>)Employee::setGpfNpsNo);
		attributeGetterFunctions.put("rank", Employee::getRank);
		attributeSetterBiConsumers.put(
			"rank", (BiConsumer<Employee, Integer>)Employee::setRank);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getPersonalNo() {
		if (_personalNo == null) {
			return "";
		}
		else {
			return _personalNo;
		}
	}

	@Override
	public void setPersonalNo(String personalNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalNo = personalNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPersonalNo() {
		return getColumnOriginalValue("personalNo");
	}

	@JSON
	@Override
	public long getPeopleId() {
		return _peopleId;
	}

	@Override
	public void setPeopleId(long peopleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_peopleId = peopleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPeopleId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("peopleId"));
	}

	@JSON
	@Override
	public String getEmailId() {
		if (_emailId == null) {
			return "";
		}
		else {
			return _emailId;
		}
	}

	@Override
	public void setEmailId(String emailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailId = emailId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmailId() {
		return getColumnOriginalValue("emailId");
	}

	@JSON
	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDesignationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("designationId"));
	}

	@JSON
	@Override
	public long getGradeId() {
		return _gradeId;
	}

	@Override
	public void setGradeId(long gradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeId = gradeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGradeId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("gradeId"));
	}

	@JSON
	@Override
	public long getPayLevelId() {
		return _payLevelId;
	}

	@Override
	public void setPayLevelId(long payLevelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payLevelId = payLevelId;
	}

	@JSON
	@Override
	public long getPostId() {
		return _postId;
	}

	@Override
	public void setPostId(long postId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postId = postId;
	}

	@JSON
	@Override
	public long getTradeId() {
		return _tradeId;
	}

	@Override
	public void setTradeId(long tradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeId = tradeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTradeId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("tradeId"));
	}

	@JSON
	@Override
	public long getCadreId() {
		return _cadreId;
	}

	@Override
	public void setCadreId(long cadreId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cadreId = cadreId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCadreId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("cadreId"));
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@JSON
	@Override
	public long getSubOrganizationId() {
		return _subOrganizationId;
	}

	@Override
	public void setSubOrganizationId(long subOrganizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subOrganizationId = subOrganizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSubOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("subOrganizationId"));
	}

	@JSON
	@Override
	public long getGradeModeId() {
		return _gradeModeId;
	}

	@Override
	public void setGradeModeId(long gradeModeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeModeId = gradeModeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGradeModeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("gradeModeId"));
	}

	@JSON
	@Override
	public long getDesignationClassId() {
		return _designationClassId;
	}

	@Override
	public void setDesignationClassId(long designationClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationClassId = designationClassId;
	}

	@JSON
	@Override
	public long getDesignationGroupId() {
		return _designationGroupId;
	}

	@Override
	public void setDesignationGroupId(long designationGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationGroupId = designationGroupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDesignationGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("designationGroupId"));
	}

	@JSON
	@Override
	public String getPostName() {
		if (_postName == null) {
			return "";
		}
		else {
			return _postName;
		}
	}

	@Override
	public void setPostName(String postName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postName = postName;
	}

	@JSON
	@Override
	public int getEmploymentStatus() {
		return _employmentStatus;
	}

	@Override
	public void setEmploymentStatus(int employmentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employmentStatus = employmentStatus;
	}

	@JSON
	@Override
	public Date getDateOfJoining() {
		return _dateOfJoining;
	}

	@Override
	public void setDateOfJoining(Date dateOfJoining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfJoining = dateOfJoining;
	}

	@JSON
	@Override
	public Date getDateOfJoiningOrganization() {
		return _dateOfJoiningOrganization;
	}

	@Override
	public void setDateOfJoiningOrganization(Date dateOfJoiningOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfJoiningOrganization = dateOfJoiningOrganization;
	}

	@JSON
	@Override
	public Date getCurrentDesignationDate() {
		return _currentDesignationDate;
	}

	@Override
	public void setCurrentDesignationDate(Date currentDesignationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentDesignationDate = currentDesignationDate;
	}

	@JSON
	@Override
	public Date getRetirementDate() {
		return _retirementDate;
	}

	@Override
	public void setRetirementDate(Date retirementDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_retirementDate = retirementDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalRetirementDate() {
		return getColumnOriginalValue("retirementDate");
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return "";
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processType = processType;
	}

	@JSON
	@Override
	public String getLoginId() {
		if (_loginId == null) {
			return "";
		}
		else {
			return _loginId;
		}
	}

	@Override
	public void setLoginId(String loginId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loginId = loginId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLoginId() {
		return getColumnOriginalValue("loginId");
	}

	@JSON
	@Override
	public String getBioData() {
		if (_bioData == null) {
			return "";
		}
		else {
			return _bioData;
		}
	}

	@Override
	public void setBioData(String bioData) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bioData = bioData;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_message = message;
	}

	@JSON
	@Override
	public String getGpfNps() {
		if (_gpfNps == null) {
			return "";
		}
		else {
			return _gpfNps;
		}
	}

	@Override
	public void setGpfNps(String gpfNps) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gpfNps = gpfNps;
	}

	@JSON
	@Override
	public String getGpfNpsNo() {
		if (_gpfNpsNo == null) {
			return "";
		}
		else {
			return _gpfNpsNo;
		}
	}

	@Override
	public void setGpfNpsNo(String gpfNpsNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gpfNpsNo = gpfNpsNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalGpfNpsNo() {
		return getColumnOriginalValue("gpfNpsNo");
	}

	@JSON
	@Override
	public int getRank() {
		return _rank;
	}

	@Override
	public void setRank(int rank) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rank = rank;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Employee.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Employee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setUuid(getUuid());
		employeeImpl.setEmployeeId(getEmployeeId());
		employeeImpl.setGroupId(getGroupId());
		employeeImpl.setCompanyId(getCompanyId());
		employeeImpl.setUserId(getUserId());
		employeeImpl.setUserName(getUserName());
		employeeImpl.setCreateDate(getCreateDate());
		employeeImpl.setModifiedDate(getModifiedDate());
		employeeImpl.setStatus(getStatus());
		employeeImpl.setStatusByUserId(getStatusByUserId());
		employeeImpl.setStatusByUserName(getStatusByUserName());
		employeeImpl.setStatusDate(getStatusDate());
		employeeImpl.setState(getState());
		employeeImpl.setPersonalNo(getPersonalNo());
		employeeImpl.setPeopleId(getPeopleId());
		employeeImpl.setEmailId(getEmailId());
		employeeImpl.setDesignationId(getDesignationId());
		employeeImpl.setGradeId(getGradeId());
		employeeImpl.setPayLevelId(getPayLevelId());
		employeeImpl.setPostId(getPostId());
		employeeImpl.setTradeId(getTradeId());
		employeeImpl.setCadreId(getCadreId());
		employeeImpl.setOrganizationId(getOrganizationId());
		employeeImpl.setSubOrganizationId(getSubOrganizationId());
		employeeImpl.setGradeModeId(getGradeModeId());
		employeeImpl.setDesignationClassId(getDesignationClassId());
		employeeImpl.setDesignationGroupId(getDesignationGroupId());
		employeeImpl.setPostName(getPostName());
		employeeImpl.setEmploymentStatus(getEmploymentStatus());
		employeeImpl.setDateOfJoining(getDateOfJoining());
		employeeImpl.setDateOfJoiningOrganization(
			getDateOfJoiningOrganization());
		employeeImpl.setCurrentDesignationDate(getCurrentDesignationDate());
		employeeImpl.setRetirementDate(getRetirementDate());
		employeeImpl.setJoiningProcessId(getJoiningProcessId());
		employeeImpl.setProcessType(getProcessType());
		employeeImpl.setLoginId(getLoginId());
		employeeImpl.setBioData(getBioData());
		employeeImpl.setMessage(getMessage());
		employeeImpl.setGpfNps(getGpfNps());
		employeeImpl.setGpfNpsNo(getGpfNpsNo());
		employeeImpl.setRank(getRank());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int value = 0;

		if (getDesignationId() < employee.getDesignationId()) {
			value = -1;
		}
		else if (getDesignationId() > employee.getDesignationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getRank() < employee.getRank()) {
			value = -1;
		}
		else if (getRank() > employee.getRank()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)object;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.uuid = getUuid();

		String uuid = employeeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeCacheModel.uuid = null;
		}

		employeeCacheModel.employeeId = getEmployeeId();

		employeeCacheModel.groupId = getGroupId();

		employeeCacheModel.companyId = getCompanyId();

		employeeCacheModel.userId = getUserId();

		employeeCacheModel.userName = getUserName();

		String userName = employeeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeCacheModel.status = getStatus();

		employeeCacheModel.statusByUserId = getStatusByUserId();

		employeeCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = employeeCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			employeeCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			employeeCacheModel.statusDate = statusDate.getTime();
		}
		else {
			employeeCacheModel.statusDate = Long.MIN_VALUE;
		}

		employeeCacheModel.state = getState();

		String state = employeeCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			employeeCacheModel.state = null;
		}

		employeeCacheModel.personalNo = getPersonalNo();

		String personalNo = employeeCacheModel.personalNo;

		if ((personalNo != null) && (personalNo.length() == 0)) {
			employeeCacheModel.personalNo = null;
		}

		employeeCacheModel.peopleId = getPeopleId();

		employeeCacheModel.emailId = getEmailId();

		String emailId = employeeCacheModel.emailId;

		if ((emailId != null) && (emailId.length() == 0)) {
			employeeCacheModel.emailId = null;
		}

		employeeCacheModel.designationId = getDesignationId();

		employeeCacheModel.gradeId = getGradeId();

		employeeCacheModel.payLevelId = getPayLevelId();

		employeeCacheModel.postId = getPostId();

		employeeCacheModel.tradeId = getTradeId();

		employeeCacheModel.cadreId = getCadreId();

		employeeCacheModel.organizationId = getOrganizationId();

		employeeCacheModel.subOrganizationId = getSubOrganizationId();

		employeeCacheModel.gradeModeId = getGradeModeId();

		employeeCacheModel.designationClassId = getDesignationClassId();

		employeeCacheModel.designationGroupId = getDesignationGroupId();

		employeeCacheModel.postName = getPostName();

		String postName = employeeCacheModel.postName;

		if ((postName != null) && (postName.length() == 0)) {
			employeeCacheModel.postName = null;
		}

		employeeCacheModel.employmentStatus = getEmploymentStatus();

		Date dateOfJoining = getDateOfJoining();

		if (dateOfJoining != null) {
			employeeCacheModel.dateOfJoining = dateOfJoining.getTime();
		}
		else {
			employeeCacheModel.dateOfJoining = Long.MIN_VALUE;
		}

		Date dateOfJoiningOrganization = getDateOfJoiningOrganization();

		if (dateOfJoiningOrganization != null) {
			employeeCacheModel.dateOfJoiningOrganization =
				dateOfJoiningOrganization.getTime();
		}
		else {
			employeeCacheModel.dateOfJoiningOrganization = Long.MIN_VALUE;
		}

		Date currentDesignationDate = getCurrentDesignationDate();

		if (currentDesignationDate != null) {
			employeeCacheModel.currentDesignationDate =
				currentDesignationDate.getTime();
		}
		else {
			employeeCacheModel.currentDesignationDate = Long.MIN_VALUE;
		}

		Date retirementDate = getRetirementDate();

		if (retirementDate != null) {
			employeeCacheModel.retirementDate = retirementDate.getTime();
		}
		else {
			employeeCacheModel.retirementDate = Long.MIN_VALUE;
		}

		employeeCacheModel.joiningProcessId = getJoiningProcessId();

		employeeCacheModel.processType = getProcessType();

		String processType = employeeCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			employeeCacheModel.processType = null;
		}

		employeeCacheModel.loginId = getLoginId();

		String loginId = employeeCacheModel.loginId;

		if ((loginId != null) && (loginId.length() == 0)) {
			employeeCacheModel.loginId = null;
		}

		employeeCacheModel.bioData = getBioData();

		String bioData = employeeCacheModel.bioData;

		if ((bioData != null) && (bioData.length() == 0)) {
			employeeCacheModel.bioData = null;
		}

		employeeCacheModel.message = getMessage();

		String message = employeeCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			employeeCacheModel.message = null;
		}

		employeeCacheModel.gpfNps = getGpfNps();

		String gpfNps = employeeCacheModel.gpfNps;

		if ((gpfNps != null) && (gpfNps.length() == 0)) {
			employeeCacheModel.gpfNps = null;
		}

		employeeCacheModel.gpfNpsNo = getGpfNpsNo();

		String gpfNpsNo = employeeCacheModel.gpfNpsNo;

		if ((gpfNpsNo != null) && (gpfNpsNo.length() == 0)) {
			employeeCacheModel.gpfNpsNo = null;
		}

		employeeCacheModel.rank = getRank();

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Employee)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Employee)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Employee>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _employeeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _state;
	private String _personalNo;
	private long _peopleId;
	private String _emailId;
	private long _designationId;
	private long _gradeId;
	private long _payLevelId;
	private long _postId;
	private long _tradeId;
	private long _cadreId;
	private long _organizationId;
	private long _subOrganizationId;
	private long _gradeModeId;
	private long _designationClassId;
	private long _designationGroupId;
	private String _postName;
	private int _employmentStatus;
	private Date _dateOfJoining;
	private Date _dateOfJoiningOrganization;
	private Date _currentDesignationDate;
	private Date _retirementDate;
	private long _joiningProcessId;
	private String _processType;
	private String _loginId;
	private String _bioData;
	private String _message;
	private String _gpfNps;
	private String _gpfNpsNo;
	private int _rank;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Employee, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Employee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("personalNo", _personalNo);
		_columnOriginalValues.put("peopleId", _peopleId);
		_columnOriginalValues.put("emailId", _emailId);
		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("gradeId", _gradeId);
		_columnOriginalValues.put("payLevelId", _payLevelId);
		_columnOriginalValues.put("postId", _postId);
		_columnOriginalValues.put("tradeId", _tradeId);
		_columnOriginalValues.put("cadreId", _cadreId);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("subOrganizationId", _subOrganizationId);
		_columnOriginalValues.put("gradeModeId", _gradeModeId);
		_columnOriginalValues.put("designationClassId", _designationClassId);
		_columnOriginalValues.put("designationGroupId", _designationGroupId);
		_columnOriginalValues.put("postName", _postName);
		_columnOriginalValues.put("employmentStatus", _employmentStatus);
		_columnOriginalValues.put("dateOfJoining", _dateOfJoining);
		_columnOriginalValues.put(
			"dateOfJoiningOrganization", _dateOfJoiningOrganization);
		_columnOriginalValues.put(
			"currentDesignationDate", _currentDesignationDate);
		_columnOriginalValues.put("retirementDate", _retirementDate);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("processType", _processType);
		_columnOriginalValues.put("loginId", _loginId);
		_columnOriginalValues.put("bioData", _bioData);
		_columnOriginalValues.put("message", _message);
		_columnOriginalValues.put("gpfNps", _gpfNps);
		_columnOriginalValues.put("gpfNpsNo", _gpfNpsNo);
		_columnOriginalValues.put("rank_", _rank);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");
		attributeNames.put("rank_", "rank");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("employeeId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("state_", 4096L);

		columnBitmasks.put("personalNo", 8192L);

		columnBitmasks.put("peopleId", 16384L);

		columnBitmasks.put("emailId", 32768L);

		columnBitmasks.put("designationId", 65536L);

		columnBitmasks.put("gradeId", 131072L);

		columnBitmasks.put("payLevelId", 262144L);

		columnBitmasks.put("postId", 524288L);

		columnBitmasks.put("tradeId", 1048576L);

		columnBitmasks.put("cadreId", 2097152L);

		columnBitmasks.put("organizationId", 4194304L);

		columnBitmasks.put("subOrganizationId", 8388608L);

		columnBitmasks.put("gradeModeId", 16777216L);

		columnBitmasks.put("designationClassId", 33554432L);

		columnBitmasks.put("designationGroupId", 67108864L);

		columnBitmasks.put("postName", 134217728L);

		columnBitmasks.put("employmentStatus", 268435456L);

		columnBitmasks.put("dateOfJoining", 536870912L);

		columnBitmasks.put("dateOfJoiningOrganization", 1073741824L);

		columnBitmasks.put("currentDesignationDate", 2147483648L);

		columnBitmasks.put("retirementDate", 4294967296L);

		columnBitmasks.put("joiningProcessId", 8589934592L);

		columnBitmasks.put("processType", 17179869184L);

		columnBitmasks.put("loginId", 34359738368L);

		columnBitmasks.put("bioData", 68719476736L);

		columnBitmasks.put("message", 137438953472L);

		columnBitmasks.put("gpfNps", 274877906944L);

		columnBitmasks.put("gpfNpsNo", 549755813888L);

		columnBitmasks.put("rank_", 1099511627776L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Employee _escapedModel;

}