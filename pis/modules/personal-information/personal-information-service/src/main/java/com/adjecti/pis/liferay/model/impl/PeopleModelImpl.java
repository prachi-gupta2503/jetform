/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.People;
import com.adjecti.pis.liferay.model.PeopleModel;
import com.adjecti.pis.liferay.model.PeopleSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the People service. Represents a row in the &quot;pis_People&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PeopleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PeopleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PeopleImpl
 * @generated
 */
@JSON(strict = true)
public class PeopleModelImpl
	extends BaseModelImpl<People> implements PeopleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a people model instance should use the <code>People</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_People";

	public static final Object[][] TABLE_COLUMNS = {
		{"peopleId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"appellationId", Types.BIGINT},
		{"firstName_Hi", Types.VARCHAR}, {"firstName_En", Types.VARCHAR},
		{"lastName_Hi", Types.VARCHAR}, {"lastName_En", Types.VARCHAR},
		{"middleName_Hi", Types.VARCHAR}, {"middleName_En", Types.VARCHAR},
		{"fatherName_Hi", Types.VARCHAR}, {"fatherName_En", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"genderId", Types.BIGINT},
		{"maritalStatusId", Types.BIGINT}, {"casteCategoryId", Types.BIGINT},
		{"identityProofId", Types.BIGINT}, {"bloodGroupId", Types.BIGINT},
		{"citizenshipId", Types.BIGINT}, {"phTypeId", Types.BIGINT},
		{"religionId", Types.BIGINT}, {"aadhaarNo", Types.VARCHAR},
		{"panNo", Types.VARCHAR}, {"color", Types.VARCHAR},
		{"height", Types.FLOAT}, {"identificationMark", Types.VARCHAR},
		{"exServiceMan", Types.BOOLEAN}, {"profileImageId", Types.BIGINT},
		{"joiningProcessId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("peopleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appellationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName_Hi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName_En", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName_Hi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName_En", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName_Hi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName_En", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName_Hi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName_En", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("genderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maritalStatusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("casteCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("identityProofId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bloodGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("citizenshipId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("religionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("aadhaarNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("panNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("height", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("identificationMark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exServiceMan", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("profileImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_People (peopleId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,appellationId LONG,firstName_Hi VARCHAR(75) null,firstName_En VARCHAR(75) null,lastName_Hi VARCHAR(75) null,lastName_En VARCHAR(75) null,middleName_Hi VARCHAR(75) null,middleName_En VARCHAR(75) null,fatherName_Hi VARCHAR(75) null,fatherName_En VARCHAR(75) null,dateOfBirth DATE null,genderId LONG,maritalStatusId LONG,casteCategoryId LONG,identityProofId LONG,bloodGroupId LONG,citizenshipId LONG,phTypeId LONG,religionId LONG,aadhaarNo VARCHAR(75) null,panNo VARCHAR(75) null,color VARCHAR(75) null,height DOUBLE,identificationMark VARCHAR(75) null,exServiceMan BOOLEAN,profileImageId LONG,joiningProcessId LONG)";

	public static final String TABLE_SQL_DROP = "drop table pis_People";

	public static final String ORDER_BY_JPQL = " ORDER BY people.peopleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_People.peopleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long APPELLATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long BLOODGROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CASTECATEGORYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CITIZENSHIPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DATEOFBIRTH_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GENDERID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long MARITALSTATUSID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PHTYPEID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long RELIGIONID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PEOPLEID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static People toModel(PeopleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		People model = new PeopleImpl();

		model.setPeopleId(soapModel.getPeopleId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAppellationId(soapModel.getAppellationId());
		model.setFirstName_Hi(soapModel.getFirstName_Hi());
		model.setFirstName_En(soapModel.getFirstName_En());
		model.setLastName_Hi(soapModel.getLastName_Hi());
		model.setLastName_En(soapModel.getLastName_En());
		model.setMiddleName_Hi(soapModel.getMiddleName_Hi());
		model.setMiddleName_En(soapModel.getMiddleName_En());
		model.setFatherName_Hi(soapModel.getFatherName_Hi());
		model.setFatherName_En(soapModel.getFatherName_En());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setGenderId(soapModel.getGenderId());
		model.setMaritalStatusId(soapModel.getMaritalStatusId());
		model.setCasteCategoryId(soapModel.getCasteCategoryId());
		model.setIdentityProofId(soapModel.getIdentityProofId());
		model.setBloodGroupId(soapModel.getBloodGroupId());
		model.setCitizenshipId(soapModel.getCitizenshipId());
		model.setPhTypeId(soapModel.getPhTypeId());
		model.setReligionId(soapModel.getReligionId());
		model.setAadhaarNo(soapModel.getAadhaarNo());
		model.setPanNo(soapModel.getPanNo());
		model.setColor(soapModel.getColor());
		model.setHeight(soapModel.getHeight());
		model.setIdentificationMark(soapModel.getIdentificationMark());
		model.setExServiceMan(soapModel.isExServiceMan());
		model.setProfileImageId(soapModel.getProfileImageId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<People> toModels(PeopleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<People> models = new ArrayList<People>(soapModels.length);

		for (PeopleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PeopleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _peopleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPeopleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _peopleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return People.class;
	}

	@Override
	public String getModelClassName() {
		return People.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<People, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<People, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<People, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((People)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<People, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<People, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(People)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<People, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<People, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, People>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			People.class.getClassLoader(), People.class, ModelWrapper.class);

		try {
			Constructor<People> constructor =
				(Constructor<People>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<People, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<People, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<People, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<People, Object>>();
		Map<String, BiConsumer<People, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<People, ?>>();

		attributeGetterFunctions.put("peopleId", People::getPeopleId);
		attributeSetterBiConsumers.put(
			"peopleId", (BiConsumer<People, Long>)People::setPeopleId);
		attributeGetterFunctions.put("groupId", People::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<People, Long>)People::setGroupId);
		attributeGetterFunctions.put("companyId", People::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<People, Long>)People::setCompanyId);
		attributeGetterFunctions.put("userId", People::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<People, Long>)People::setUserId);
		attributeGetterFunctions.put("userName", People::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<People, String>)People::setUserName);
		attributeGetterFunctions.put("createDate", People::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<People, Date>)People::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", People::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<People, Date>)People::setModifiedDate);
		attributeGetterFunctions.put("appellationId", People::getAppellationId);
		attributeSetterBiConsumers.put(
			"appellationId",
			(BiConsumer<People, Long>)People::setAppellationId);
		attributeGetterFunctions.put("firstName_Hi", People::getFirstName_Hi);
		attributeSetterBiConsumers.put(
			"firstName_Hi",
			(BiConsumer<People, String>)People::setFirstName_Hi);
		attributeGetterFunctions.put("firstName_En", People::getFirstName_En);
		attributeSetterBiConsumers.put(
			"firstName_En",
			(BiConsumer<People, String>)People::setFirstName_En);
		attributeGetterFunctions.put("lastName_Hi", People::getLastName_Hi);
		attributeSetterBiConsumers.put(
			"lastName_Hi", (BiConsumer<People, String>)People::setLastName_Hi);
		attributeGetterFunctions.put("lastName_En", People::getLastName_En);
		attributeSetterBiConsumers.put(
			"lastName_En", (BiConsumer<People, String>)People::setLastName_En);
		attributeGetterFunctions.put("middleName_Hi", People::getMiddleName_Hi);
		attributeSetterBiConsumers.put(
			"middleName_Hi",
			(BiConsumer<People, String>)People::setMiddleName_Hi);
		attributeGetterFunctions.put("middleName_En", People::getMiddleName_En);
		attributeSetterBiConsumers.put(
			"middleName_En",
			(BiConsumer<People, String>)People::setMiddleName_En);
		attributeGetterFunctions.put("fatherName_Hi", People::getFatherName_Hi);
		attributeSetterBiConsumers.put(
			"fatherName_Hi",
			(BiConsumer<People, String>)People::setFatherName_Hi);
		attributeGetterFunctions.put("fatherName_En", People::getFatherName_En);
		attributeSetterBiConsumers.put(
			"fatherName_En",
			(BiConsumer<People, String>)People::setFatherName_En);
		attributeGetterFunctions.put("dateOfBirth", People::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth", (BiConsumer<People, Date>)People::setDateOfBirth);
		attributeGetterFunctions.put("genderId", People::getGenderId);
		attributeSetterBiConsumers.put(
			"genderId", (BiConsumer<People, Long>)People::setGenderId);
		attributeGetterFunctions.put(
			"maritalStatusId", People::getMaritalStatusId);
		attributeSetterBiConsumers.put(
			"maritalStatusId",
			(BiConsumer<People, Long>)People::setMaritalStatusId);
		attributeGetterFunctions.put(
			"casteCategoryId", People::getCasteCategoryId);
		attributeSetterBiConsumers.put(
			"casteCategoryId",
			(BiConsumer<People, Long>)People::setCasteCategoryId);
		attributeGetterFunctions.put(
			"identityProofId", People::getIdentityProofId);
		attributeSetterBiConsumers.put(
			"identityProofId",
			(BiConsumer<People, Long>)People::setIdentityProofId);
		attributeGetterFunctions.put("bloodGroupId", People::getBloodGroupId);
		attributeSetterBiConsumers.put(
			"bloodGroupId", (BiConsumer<People, Long>)People::setBloodGroupId);
		attributeGetterFunctions.put("citizenshipId", People::getCitizenshipId);
		attributeSetterBiConsumers.put(
			"citizenshipId",
			(BiConsumer<People, Long>)People::setCitizenshipId);
		attributeGetterFunctions.put("phTypeId", People::getPhTypeId);
		attributeSetterBiConsumers.put(
			"phTypeId", (BiConsumer<People, Long>)People::setPhTypeId);
		attributeGetterFunctions.put("religionId", People::getReligionId);
		attributeSetterBiConsumers.put(
			"religionId", (BiConsumer<People, Long>)People::setReligionId);
		attributeGetterFunctions.put("aadhaarNo", People::getAadhaarNo);
		attributeSetterBiConsumers.put(
			"aadhaarNo", (BiConsumer<People, String>)People::setAadhaarNo);
		attributeGetterFunctions.put("panNo", People::getPanNo);
		attributeSetterBiConsumers.put(
			"panNo", (BiConsumer<People, String>)People::setPanNo);
		attributeGetterFunctions.put("color", People::getColor);
		attributeSetterBiConsumers.put(
			"color", (BiConsumer<People, String>)People::setColor);
		attributeGetterFunctions.put("height", People::getHeight);
		attributeSetterBiConsumers.put(
			"height", (BiConsumer<People, Float>)People::setHeight);
		attributeGetterFunctions.put(
			"identificationMark", People::getIdentificationMark);
		attributeSetterBiConsumers.put(
			"identificationMark",
			(BiConsumer<People, String>)People::setIdentificationMark);
		attributeGetterFunctions.put("exServiceMan", People::getExServiceMan);
		attributeSetterBiConsumers.put(
			"exServiceMan",
			(BiConsumer<People, Boolean>)People::setExServiceMan);
		attributeGetterFunctions.put(
			"profileImageId", People::getProfileImageId);
		attributeSetterBiConsumers.put(
			"profileImageId",
			(BiConsumer<People, Long>)People::setProfileImageId);
		attributeGetterFunctions.put(
			"joiningProcessId", People::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<People, Long>)People::setJoiningProcessId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getPeopleId() {
		return _peopleId;
	}

	@Override
	public void setPeopleId(long peopleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_peopleId = peopleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAppellationId() {
		return _appellationId;
	}

	@Override
	public void setAppellationId(long appellationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appellationId = appellationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAppellationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("appellationId"));
	}

	@JSON
	@Override
	public String getFirstName_Hi() {
		if (_firstName_Hi == null) {
			return "";
		}
		else {
			return _firstName_Hi;
		}
	}

	@Override
	public void setFirstName_Hi(String firstName_Hi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName_Hi = firstName_Hi;
	}

	@JSON
	@Override
	public String getFirstName_En() {
		if (_firstName_En == null) {
			return "";
		}
		else {
			return _firstName_En;
		}
	}

	@Override
	public void setFirstName_En(String firstName_En) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName_En = firstName_En;
	}

	@JSON
	@Override
	public String getLastName_Hi() {
		if (_lastName_Hi == null) {
			return "";
		}
		else {
			return _lastName_Hi;
		}
	}

	@Override
	public void setLastName_Hi(String lastName_Hi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName_Hi = lastName_Hi;
	}

	@JSON
	@Override
	public String getLastName_En() {
		if (_lastName_En == null) {
			return "";
		}
		else {
			return _lastName_En;
		}
	}

	@Override
	public void setLastName_En(String lastName_En) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName_En = lastName_En;
	}

	@JSON
	@Override
	public String getMiddleName_Hi() {
		if (_middleName_Hi == null) {
			return "";
		}
		else {
			return _middleName_Hi;
		}
	}

	@Override
	public void setMiddleName_Hi(String middleName_Hi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_middleName_Hi = middleName_Hi;
	}

	@JSON
	@Override
	public String getMiddleName_En() {
		if (_middleName_En == null) {
			return "";
		}
		else {
			return _middleName_En;
		}
	}

	@Override
	public void setMiddleName_En(String middleName_En) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_middleName_En = middleName_En;
	}

	@JSON
	@Override
	public String getFatherName_Hi() {
		if (_fatherName_Hi == null) {
			return "";
		}
		else {
			return _fatherName_Hi;
		}
	}

	@Override
	public void setFatherName_Hi(String fatherName_Hi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName_Hi = fatherName_Hi;
	}

	@JSON
	@Override
	public String getFatherName_En() {
		if (_fatherName_En == null) {
			return "";
		}
		else {
			return _fatherName_En;
		}
	}

	@Override
	public void setFatherName_En(String fatherName_En) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName_En = fatherName_En;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalDateOfBirth() {
		return getColumnOriginalValue("dateOfBirth");
	}

	@JSON
	@Override
	public long getGenderId() {
		return _genderId;
	}

	@Override
	public void setGenderId(long genderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_genderId = genderId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGenderId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("genderId"));
	}

	@JSON
	@Override
	public long getMaritalStatusId() {
		return _maritalStatusId;
	}

	@Override
	public void setMaritalStatusId(long maritalStatusId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatusId = maritalStatusId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMaritalStatusId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("maritalStatusId"));
	}

	@JSON
	@Override
	public long getCasteCategoryId() {
		return _casteCategoryId;
	}

	@Override
	public void setCasteCategoryId(long casteCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_casteCategoryId = casteCategoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCasteCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("casteCategoryId"));
	}

	@JSON
	@Override
	public long getIdentityProofId() {
		return _identityProofId;
	}

	@Override
	public void setIdentityProofId(long identityProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identityProofId = identityProofId;
	}

	@JSON
	@Override
	public long getBloodGroupId() {
		return _bloodGroupId;
	}

	@Override
	public void setBloodGroupId(long bloodGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bloodGroupId = bloodGroupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBloodGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("bloodGroupId"));
	}

	@JSON
	@Override
	public long getCitizenshipId() {
		return _citizenshipId;
	}

	@Override
	public void setCitizenshipId(long citizenshipId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_citizenshipId = citizenshipId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCitizenshipId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("citizenshipId"));
	}

	@JSON
	@Override
	public long getPhTypeId() {
		return _phTypeId;
	}

	@Override
	public void setPhTypeId(long phTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phTypeId = phTypeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPhTypeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("phTypeId"));
	}

	@JSON
	@Override
	public long getReligionId() {
		return _religionId;
	}

	@Override
	public void setReligionId(long religionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_religionId = religionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalReligionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("religionId"));
	}

	@JSON
	@Override
	public String getAadhaarNo() {
		if (_aadhaarNo == null) {
			return "";
		}
		else {
			return _aadhaarNo;
		}
	}

	@Override
	public void setAadhaarNo(String aadhaarNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aadhaarNo = aadhaarNo;
	}

	@JSON
	@Override
	public String getPanNo() {
		if (_panNo == null) {
			return "";
		}
		else {
			return _panNo;
		}
	}

	@Override
	public void setPanNo(String panNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_panNo = panNo;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return "";
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_color = color;
	}

	@JSON
	@Override
	public float getHeight() {
		return _height;
	}

	@Override
	public void setHeight(float height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public String getIdentificationMark() {
		if (_identificationMark == null) {
			return "";
		}
		else {
			return _identificationMark;
		}
	}

	@Override
	public void setIdentificationMark(String identificationMark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identificationMark = identificationMark;
	}

	@JSON
	@Override
	public boolean getExServiceMan() {
		return _exServiceMan;
	}

	@JSON
	@Override
	public boolean isExServiceMan() {
		return _exServiceMan;
	}

	@Override
	public void setExServiceMan(boolean exServiceMan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exServiceMan = exServiceMan;
	}

	@JSON
	@Override
	public long getProfileImageId() {
		return _profileImageId;
	}

	@Override
	public void setProfileImageId(long profileImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profileImageId = profileImageId;
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), People.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public People toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, People>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PeopleImpl peopleImpl = new PeopleImpl();

		peopleImpl.setPeopleId(getPeopleId());
		peopleImpl.setGroupId(getGroupId());
		peopleImpl.setCompanyId(getCompanyId());
		peopleImpl.setUserId(getUserId());
		peopleImpl.setUserName(getUserName());
		peopleImpl.setCreateDate(getCreateDate());
		peopleImpl.setModifiedDate(getModifiedDate());
		peopleImpl.setAppellationId(getAppellationId());
		peopleImpl.setFirstName_Hi(getFirstName_Hi());
		peopleImpl.setFirstName_En(getFirstName_En());
		peopleImpl.setLastName_Hi(getLastName_Hi());
		peopleImpl.setLastName_En(getLastName_En());
		peopleImpl.setMiddleName_Hi(getMiddleName_Hi());
		peopleImpl.setMiddleName_En(getMiddleName_En());
		peopleImpl.setFatherName_Hi(getFatherName_Hi());
		peopleImpl.setFatherName_En(getFatherName_En());
		peopleImpl.setDateOfBirth(getDateOfBirth());
		peopleImpl.setGenderId(getGenderId());
		peopleImpl.setMaritalStatusId(getMaritalStatusId());
		peopleImpl.setCasteCategoryId(getCasteCategoryId());
		peopleImpl.setIdentityProofId(getIdentityProofId());
		peopleImpl.setBloodGroupId(getBloodGroupId());
		peopleImpl.setCitizenshipId(getCitizenshipId());
		peopleImpl.setPhTypeId(getPhTypeId());
		peopleImpl.setReligionId(getReligionId());
		peopleImpl.setAadhaarNo(getAadhaarNo());
		peopleImpl.setPanNo(getPanNo());
		peopleImpl.setColor(getColor());
		peopleImpl.setHeight(getHeight());
		peopleImpl.setIdentificationMark(getIdentificationMark());
		peopleImpl.setExServiceMan(isExServiceMan());
		peopleImpl.setProfileImageId(getProfileImageId());
		peopleImpl.setJoiningProcessId(getJoiningProcessId());

		peopleImpl.resetOriginalValues();

		return peopleImpl;
	}

	@Override
	public int compareTo(People people) {
		long primaryKey = people.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof People)) {
			return false;
		}

		People people = (People)object;

		long primaryKey = people.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<People> toCacheModel() {
		PeopleCacheModel peopleCacheModel = new PeopleCacheModel();

		peopleCacheModel.peopleId = getPeopleId();

		peopleCacheModel.groupId = getGroupId();

		peopleCacheModel.companyId = getCompanyId();

		peopleCacheModel.userId = getUserId();

		peopleCacheModel.userName = getUserName();

		String userName = peopleCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			peopleCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			peopleCacheModel.createDate = createDate.getTime();
		}
		else {
			peopleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			peopleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			peopleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		peopleCacheModel.appellationId = getAppellationId();

		peopleCacheModel.firstName_Hi = getFirstName_Hi();

		String firstName_Hi = peopleCacheModel.firstName_Hi;

		if ((firstName_Hi != null) && (firstName_Hi.length() == 0)) {
			peopleCacheModel.firstName_Hi = null;
		}

		peopleCacheModel.firstName_En = getFirstName_En();

		String firstName_En = peopleCacheModel.firstName_En;

		if ((firstName_En != null) && (firstName_En.length() == 0)) {
			peopleCacheModel.firstName_En = null;
		}

		peopleCacheModel.lastName_Hi = getLastName_Hi();

		String lastName_Hi = peopleCacheModel.lastName_Hi;

		if ((lastName_Hi != null) && (lastName_Hi.length() == 0)) {
			peopleCacheModel.lastName_Hi = null;
		}

		peopleCacheModel.lastName_En = getLastName_En();

		String lastName_En = peopleCacheModel.lastName_En;

		if ((lastName_En != null) && (lastName_En.length() == 0)) {
			peopleCacheModel.lastName_En = null;
		}

		peopleCacheModel.middleName_Hi = getMiddleName_Hi();

		String middleName_Hi = peopleCacheModel.middleName_Hi;

		if ((middleName_Hi != null) && (middleName_Hi.length() == 0)) {
			peopleCacheModel.middleName_Hi = null;
		}

		peopleCacheModel.middleName_En = getMiddleName_En();

		String middleName_En = peopleCacheModel.middleName_En;

		if ((middleName_En != null) && (middleName_En.length() == 0)) {
			peopleCacheModel.middleName_En = null;
		}

		peopleCacheModel.fatherName_Hi = getFatherName_Hi();

		String fatherName_Hi = peopleCacheModel.fatherName_Hi;

		if ((fatherName_Hi != null) && (fatherName_Hi.length() == 0)) {
			peopleCacheModel.fatherName_Hi = null;
		}

		peopleCacheModel.fatherName_En = getFatherName_En();

		String fatherName_En = peopleCacheModel.fatherName_En;

		if ((fatherName_En != null) && (fatherName_En.length() == 0)) {
			peopleCacheModel.fatherName_En = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			peopleCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			peopleCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		peopleCacheModel.genderId = getGenderId();

		peopleCacheModel.maritalStatusId = getMaritalStatusId();

		peopleCacheModel.casteCategoryId = getCasteCategoryId();

		peopleCacheModel.identityProofId = getIdentityProofId();

		peopleCacheModel.bloodGroupId = getBloodGroupId();

		peopleCacheModel.citizenshipId = getCitizenshipId();

		peopleCacheModel.phTypeId = getPhTypeId();

		peopleCacheModel.religionId = getReligionId();

		peopleCacheModel.aadhaarNo = getAadhaarNo();

		String aadhaarNo = peopleCacheModel.aadhaarNo;

		if ((aadhaarNo != null) && (aadhaarNo.length() == 0)) {
			peopleCacheModel.aadhaarNo = null;
		}

		peopleCacheModel.panNo = getPanNo();

		String panNo = peopleCacheModel.panNo;

		if ((panNo != null) && (panNo.length() == 0)) {
			peopleCacheModel.panNo = null;
		}

		peopleCacheModel.color = getColor();

		String color = peopleCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			peopleCacheModel.color = null;
		}

		peopleCacheModel.height = getHeight();

		peopleCacheModel.identificationMark = getIdentificationMark();

		String identificationMark = peopleCacheModel.identificationMark;

		if ((identificationMark != null) &&
			(identificationMark.length() == 0)) {

			peopleCacheModel.identificationMark = null;
		}

		peopleCacheModel.exServiceMan = isExServiceMan();

		peopleCacheModel.profileImageId = getProfileImageId();

		peopleCacheModel.joiningProcessId = getJoiningProcessId();

		return peopleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<People, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<People, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<People, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((People)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<People, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<People, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<People, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((People)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, People>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _peopleId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _appellationId;
	private String _firstName_Hi;
	private String _firstName_En;
	private String _lastName_Hi;
	private String _lastName_En;
	private String _middleName_Hi;
	private String _middleName_En;
	private String _fatherName_Hi;
	private String _fatherName_En;
	private Date _dateOfBirth;
	private long _genderId;
	private long _maritalStatusId;
	private long _casteCategoryId;
	private long _identityProofId;
	private long _bloodGroupId;
	private long _citizenshipId;
	private long _phTypeId;
	private long _religionId;
	private String _aadhaarNo;
	private String _panNo;
	private String _color;
	private float _height;
	private String _identificationMark;
	private boolean _exServiceMan;
	private long _profileImageId;
	private long _joiningProcessId;

	public <T> T getColumnValue(String columnName) {
		Function<People, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((People)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("peopleId", _peopleId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("appellationId", _appellationId);
		_columnOriginalValues.put("firstName_Hi", _firstName_Hi);
		_columnOriginalValues.put("firstName_En", _firstName_En);
		_columnOriginalValues.put("lastName_Hi", _lastName_Hi);
		_columnOriginalValues.put("lastName_En", _lastName_En);
		_columnOriginalValues.put("middleName_Hi", _middleName_Hi);
		_columnOriginalValues.put("middleName_En", _middleName_En);
		_columnOriginalValues.put("fatherName_Hi", _fatherName_Hi);
		_columnOriginalValues.put("fatherName_En", _fatherName_En);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("genderId", _genderId);
		_columnOriginalValues.put("maritalStatusId", _maritalStatusId);
		_columnOriginalValues.put("casteCategoryId", _casteCategoryId);
		_columnOriginalValues.put("identityProofId", _identityProofId);
		_columnOriginalValues.put("bloodGroupId", _bloodGroupId);
		_columnOriginalValues.put("citizenshipId", _citizenshipId);
		_columnOriginalValues.put("phTypeId", _phTypeId);
		_columnOriginalValues.put("religionId", _religionId);
		_columnOriginalValues.put("aadhaarNo", _aadhaarNo);
		_columnOriginalValues.put("panNo", _panNo);
		_columnOriginalValues.put("color", _color);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("identificationMark", _identificationMark);
		_columnOriginalValues.put("exServiceMan", _exServiceMan);
		_columnOriginalValues.put("profileImageId", _profileImageId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("peopleId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("appellationId", 128L);

		columnBitmasks.put("firstName_Hi", 256L);

		columnBitmasks.put("firstName_En", 512L);

		columnBitmasks.put("lastName_Hi", 1024L);

		columnBitmasks.put("lastName_En", 2048L);

		columnBitmasks.put("middleName_Hi", 4096L);

		columnBitmasks.put("middleName_En", 8192L);

		columnBitmasks.put("fatherName_Hi", 16384L);

		columnBitmasks.put("fatherName_En", 32768L);

		columnBitmasks.put("dateOfBirth", 65536L);

		columnBitmasks.put("genderId", 131072L);

		columnBitmasks.put("maritalStatusId", 262144L);

		columnBitmasks.put("casteCategoryId", 524288L);

		columnBitmasks.put("identityProofId", 1048576L);

		columnBitmasks.put("bloodGroupId", 2097152L);

		columnBitmasks.put("citizenshipId", 4194304L);

		columnBitmasks.put("phTypeId", 8388608L);

		columnBitmasks.put("religionId", 16777216L);

		columnBitmasks.put("aadhaarNo", 33554432L);

		columnBitmasks.put("panNo", 67108864L);

		columnBitmasks.put("color", 134217728L);

		columnBitmasks.put("height", 268435456L);

		columnBitmasks.put("identificationMark", 536870912L);

		columnBitmasks.put("exServiceMan", 1073741824L);

		columnBitmasks.put("profileImageId", 2147483648L);

		columnBitmasks.put("joiningProcessId", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private People _escapedModel;

}