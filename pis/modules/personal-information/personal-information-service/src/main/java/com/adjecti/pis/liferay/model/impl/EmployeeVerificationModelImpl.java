/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeVerification;
import com.adjecti.pis.liferay.model.EmployeeVerificationModel;
import com.adjecti.pis.liferay.model.EmployeeVerificationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeVerification service. Represents a row in the &quot;pis_EmployeeVerification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeVerificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeVerificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeVerificationImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeVerificationModelImpl
	extends BaseModelImpl<EmployeeVerification>
	implements EmployeeVerificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee verification model instance should use the <code>EmployeeVerification</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeVerification";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeVerificationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"authority", Types.VARCHAR}, {"documentNo", Types.VARCHAR},
		{"remarks", Types.VARCHAR}, {"verificationDate", Types.TIMESTAMP},
		{"verificationTypeId", Types.BIGINT}, {"documentId", Types.BIGINT},
		{"employeeId", Types.BIGINT}, {"organizationId", Types.BIGINT},
		{"joiningProcessId", Types.BIGINT}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeVerificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("authority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verificationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verificationTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeVerification (employeeVerificationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,authority VARCHAR(75) null,documentNo VARCHAR(75) null,remarks VARCHAR(75) null,verificationDate DATE null,verificationTypeId LONG,documentId LONG,employeeId LONG,organizationId LONG,joiningProcessId LONG,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeVerification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeVerification.employeeVerificationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeVerification.employeeVerificationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEVERIFICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeVerification toModel(
		EmployeeVerificationSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		EmployeeVerification model = new EmployeeVerificationImpl();

		model.setEmployeeVerificationId(soapModel.getEmployeeVerificationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setAuthority(soapModel.getAuthority());
		model.setDocumentNo(soapModel.getDocumentNo());
		model.setRemarks(soapModel.getRemarks());
		model.setVerificationDate(soapModel.getVerificationDate());
		model.setVerificationTypeId(soapModel.getVerificationTypeId());
		model.setDocumentId(soapModel.getDocumentId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeVerification> toModels(
		EmployeeVerificationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeVerification> models = new ArrayList<EmployeeVerification>(
			soapModels.length);

		for (EmployeeVerificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeVerificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeVerificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeVerificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeVerificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeVerification.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeVerification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeVerification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeVerification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeVerification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeVerification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeVerification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeVerification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeVerification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeVerification>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeVerification.class.getClassLoader(),
			EmployeeVerification.class, ModelWrapper.class);

		try {
			Constructor<EmployeeVerification> constructor =
				(Constructor<EmployeeVerification>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeVerification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeVerification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeVerification, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeeVerification, Object>>();
		Map<String, BiConsumer<EmployeeVerification, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EmployeeVerification, ?>>();

		attributeGetterFunctions.put(
			"employeeVerificationId",
			EmployeeVerification::getEmployeeVerificationId);
		attributeSetterBiConsumers.put(
			"employeeVerificationId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setEmployeeVerificationId);
		attributeGetterFunctions.put(
			"groupId", EmployeeVerification::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeVerification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeVerification::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setUserId);
		attributeGetterFunctions.put(
			"userName", EmployeeVerification::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeVerification, String>)
				EmployeeVerification::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeVerification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeVerification, Date>)
				EmployeeVerification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeVerification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeVerification, Date>)
				EmployeeVerification::setModifiedDate);
		attributeGetterFunctions.put("active", EmployeeVerification::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<EmployeeVerification, Boolean>)
				EmployeeVerification::setActive);
		attributeGetterFunctions.put(
			"authority", EmployeeVerification::getAuthority);
		attributeSetterBiConsumers.put(
			"authority",
			(BiConsumer<EmployeeVerification, String>)
				EmployeeVerification::setAuthority);
		attributeGetterFunctions.put(
			"documentNo", EmployeeVerification::getDocumentNo);
		attributeSetterBiConsumers.put(
			"documentNo",
			(BiConsumer<EmployeeVerification, String>)
				EmployeeVerification::setDocumentNo);
		attributeGetterFunctions.put(
			"remarks", EmployeeVerification::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<EmployeeVerification, String>)
				EmployeeVerification::setRemarks);
		attributeGetterFunctions.put(
			"verificationDate", EmployeeVerification::getVerificationDate);
		attributeSetterBiConsumers.put(
			"verificationDate",
			(BiConsumer<EmployeeVerification, Date>)
				EmployeeVerification::setVerificationDate);
		attributeGetterFunctions.put(
			"verificationTypeId", EmployeeVerification::getVerificationTypeId);
		attributeSetterBiConsumers.put(
			"verificationTypeId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setVerificationTypeId);
		attributeGetterFunctions.put(
			"documentId", EmployeeVerification::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setDocumentId);
		attributeGetterFunctions.put(
			"employeeId", EmployeeVerification::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setEmployeeId);
		attributeGetterFunctions.put(
			"organizationId", EmployeeVerification::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setOrganizationId);
		attributeGetterFunctions.put(
			"joiningProcessId", EmployeeVerification::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<EmployeeVerification, Long>)
				EmployeeVerification::setJoiningProcessId);
		attributeGetterFunctions.put("status", EmployeeVerification::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeVerification, Integer>)
				EmployeeVerification::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeVerificationId() {
		return _employeeVerificationId;
	}

	@Override
	public void setEmployeeVerificationId(long employeeVerificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeVerificationId = employeeVerificationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public String getAuthority() {
		if (_authority == null) {
			return "";
		}
		else {
			return _authority;
		}
	}

	@Override
	public void setAuthority(String authority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authority = authority;
	}

	@JSON
	@Override
	public String getDocumentNo() {
		if (_documentNo == null) {
			return "";
		}
		else {
			return _documentNo;
		}
	}

	@Override
	public void setDocumentNo(String documentNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentNo = documentNo;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public Date getVerificationDate() {
		return _verificationDate;
	}

	@Override
	public void setVerificationDate(Date verificationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verificationDate = verificationDate;
	}

	@JSON
	@Override
	public long getVerificationTypeId() {
		return _verificationTypeId;
	}

	@Override
	public void setVerificationTypeId(long verificationTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verificationTypeId = verificationTypeId;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentId = documentId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeVerification.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeVerification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeVerification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeVerificationImpl employeeVerificationImpl =
			new EmployeeVerificationImpl();

		employeeVerificationImpl.setEmployeeVerificationId(
			getEmployeeVerificationId());
		employeeVerificationImpl.setGroupId(getGroupId());
		employeeVerificationImpl.setCompanyId(getCompanyId());
		employeeVerificationImpl.setUserId(getUserId());
		employeeVerificationImpl.setUserName(getUserName());
		employeeVerificationImpl.setCreateDate(getCreateDate());
		employeeVerificationImpl.setModifiedDate(getModifiedDate());
		employeeVerificationImpl.setActive(isActive());
		employeeVerificationImpl.setAuthority(getAuthority());
		employeeVerificationImpl.setDocumentNo(getDocumentNo());
		employeeVerificationImpl.setRemarks(getRemarks());
		employeeVerificationImpl.setVerificationDate(getVerificationDate());
		employeeVerificationImpl.setVerificationTypeId(getVerificationTypeId());
		employeeVerificationImpl.setDocumentId(getDocumentId());
		employeeVerificationImpl.setEmployeeId(getEmployeeId());
		employeeVerificationImpl.setOrganizationId(getOrganizationId());
		employeeVerificationImpl.setJoiningProcessId(getJoiningProcessId());
		employeeVerificationImpl.setStatus(getStatus());

		employeeVerificationImpl.resetOriginalValues();

		return employeeVerificationImpl;
	}

	@Override
	public int compareTo(EmployeeVerification employeeVerification) {
		long primaryKey = employeeVerification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeVerification)) {
			return false;
		}

		EmployeeVerification employeeVerification =
			(EmployeeVerification)object;

		long primaryKey = employeeVerification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeVerification> toCacheModel() {
		EmployeeVerificationCacheModel employeeVerificationCacheModel =
			new EmployeeVerificationCacheModel();

		employeeVerificationCacheModel.employeeVerificationId =
			getEmployeeVerificationId();

		employeeVerificationCacheModel.groupId = getGroupId();

		employeeVerificationCacheModel.companyId = getCompanyId();

		employeeVerificationCacheModel.userId = getUserId();

		employeeVerificationCacheModel.userName = getUserName();

		String userName = employeeVerificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeVerificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeVerificationCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeVerificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeVerificationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			employeeVerificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeVerificationCacheModel.active = isActive();

		employeeVerificationCacheModel.authority = getAuthority();

		String authority = employeeVerificationCacheModel.authority;

		if ((authority != null) && (authority.length() == 0)) {
			employeeVerificationCacheModel.authority = null;
		}

		employeeVerificationCacheModel.documentNo = getDocumentNo();

		String documentNo = employeeVerificationCacheModel.documentNo;

		if ((documentNo != null) && (documentNo.length() == 0)) {
			employeeVerificationCacheModel.documentNo = null;
		}

		employeeVerificationCacheModel.remarks = getRemarks();

		String remarks = employeeVerificationCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			employeeVerificationCacheModel.remarks = null;
		}

		Date verificationDate = getVerificationDate();

		if (verificationDate != null) {
			employeeVerificationCacheModel.verificationDate =
				verificationDate.getTime();
		}
		else {
			employeeVerificationCacheModel.verificationDate = Long.MIN_VALUE;
		}

		employeeVerificationCacheModel.verificationTypeId =
			getVerificationTypeId();

		employeeVerificationCacheModel.documentId = getDocumentId();

		employeeVerificationCacheModel.employeeId = getEmployeeId();

		employeeVerificationCacheModel.organizationId = getOrganizationId();

		employeeVerificationCacheModel.joiningProcessId = getJoiningProcessId();

		employeeVerificationCacheModel.status = getStatus();

		return employeeVerificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeVerification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((EmployeeVerification)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeVerification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((EmployeeVerification)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeVerification>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeVerificationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private String _authority;
	private String _documentNo;
	private String _remarks;
	private Date _verificationDate;
	private long _verificationTypeId;
	private long _documentId;
	private long _employeeId;
	private long _organizationId;
	private long _joiningProcessId;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeVerification, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeVerification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"employeeVerificationId", _employeeVerificationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("authority", _authority);
		_columnOriginalValues.put("documentNo", _documentNo);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("verificationDate", _verificationDate);
		_columnOriginalValues.put("verificationTypeId", _verificationTypeId);
		_columnOriginalValues.put("documentId", _documentId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeVerificationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("authority", 256L);

		columnBitmasks.put("documentNo", 512L);

		columnBitmasks.put("remarks", 1024L);

		columnBitmasks.put("verificationDate", 2048L);

		columnBitmasks.put("verificationTypeId", 4096L);

		columnBitmasks.put("documentId", 8192L);

		columnBitmasks.put("employeeId", 16384L);

		columnBitmasks.put("organizationId", 32768L);

		columnBitmasks.put("joiningProcessId", 65536L);

		columnBitmasks.put("status", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeVerification _escapedModel;

}