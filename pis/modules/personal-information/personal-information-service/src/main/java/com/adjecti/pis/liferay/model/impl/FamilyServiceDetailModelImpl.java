/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.FamilyServiceDetail;
import com.adjecti.pis.liferay.model.FamilyServiceDetailModel;
import com.adjecti.pis.liferay.model.FamilyServiceDetailSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FamilyServiceDetail service. Represents a row in the &quot;pis_FamilyServiceDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FamilyServiceDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FamilyServiceDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FamilyServiceDetailImpl
 * @generated
 */
@JSON(strict = true)
public class FamilyServiceDetailModelImpl
	extends BaseModelImpl<FamilyServiceDetail>
	implements FamilyServiceDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a family service detail model instance should use the <code>FamilyServiceDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_FamilyServiceDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"familyServiceDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"boardUniversity", Types.VARCHAR},
		{"fromYear", Types.INTEGER}, {"toYear", Types.INTEGER},
		{"description", Types.VARCHAR}, {"endDate", Types.TIMESTAMP},
		{"organization", Types.VARCHAR}, {"startDate", Types.TIMESTAMP},
		{"familyMemberId", Types.BIGINT}, {"levelId", Types.BIGINT},
		{"serviceTypeId", Types.BIGINT}, {"cityOfStudy", Types.VARCHAR},
		{"institutionName", Types.VARCHAR}, {"stateId", Types.BIGINT},
		{"cityOfWork", Types.VARCHAR}, {"designation", Types.VARCHAR},
		{"govtServant", Types.BOOLEAN}, {"cityOfHospital", Types.VARCHAR},
		{"deseaseDetails", Types.VARCHAR}, {"hospitalName", Types.VARCHAR},
		{"underTreatment", Types.BOOLEAN}, {"diseaseTypeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("familyServiceDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("boardUniversity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("toYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("organization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("familyMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("levelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cityOfStudy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("institutionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cityOfWork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govtServant", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("cityOfHospital", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deseaseDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hospitalName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("underTreatment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("diseaseTypeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_FamilyServiceDetail (familyServiceDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,boardUniversity VARCHAR(75) null,fromYear INTEGER,toYear INTEGER,description VARCHAR(75) null,endDate DATE null,organization VARCHAR(75) null,startDate DATE null,familyMemberId LONG,levelId LONG,serviceTypeId LONG,cityOfStudy VARCHAR(75) null,institutionName VARCHAR(75) null,stateId LONG,cityOfWork VARCHAR(75) null,designation VARCHAR(75) null,govtServant BOOLEAN,cityOfHospital VARCHAR(75) null,deseaseDetails VARCHAR(75) null,hospitalName VARCHAR(75) null,underTreatment BOOLEAN,diseaseTypeId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_FamilyServiceDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY familyServiceDetail.familyServiceDetailId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_FamilyServiceDetail.familyServiceDetailId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FAMILYSERVICEDETAILID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static FamilyServiceDetail toModel(
		FamilyServiceDetailSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		FamilyServiceDetail model = new FamilyServiceDetailImpl();

		model.setFamilyServiceDetailId(soapModel.getFamilyServiceDetailId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBoardUniversity(soapModel.getBoardUniversity());
		model.setFromYear(soapModel.getFromYear());
		model.setToYear(soapModel.getToYear());
		model.setDescription(soapModel.getDescription());
		model.setEndDate(soapModel.getEndDate());
		model.setOrganization(soapModel.getOrganization());
		model.setStartDate(soapModel.getStartDate());
		model.setFamilyMemberId(soapModel.getFamilyMemberId());
		model.setLevelId(soapModel.getLevelId());
		model.setServiceTypeId(soapModel.getServiceTypeId());
		model.setCityOfStudy(soapModel.getCityOfStudy());
		model.setInstitutionName(soapModel.getInstitutionName());
		model.setStateId(soapModel.getStateId());
		model.setCityOfWork(soapModel.getCityOfWork());
		model.setDesignation(soapModel.getDesignation());
		model.setGovtServant(soapModel.isGovtServant());
		model.setCityOfHospital(soapModel.getCityOfHospital());
		model.setDeseaseDetails(soapModel.getDeseaseDetails());
		model.setHospitalName(soapModel.getHospitalName());
		model.setUnderTreatment(soapModel.isUnderTreatment());
		model.setDiseaseTypeId(soapModel.getDiseaseTypeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<FamilyServiceDetail> toModels(
		FamilyServiceDetailSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<FamilyServiceDetail> models = new ArrayList<FamilyServiceDetail>(
			soapModels.length);

		for (FamilyServiceDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FamilyServiceDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _familyServiceDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFamilyServiceDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _familyServiceDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FamilyServiceDetail.class;
	}

	@Override
	public String getModelClassName() {
		return FamilyServiceDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FamilyServiceDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FamilyServiceDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyServiceDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FamilyServiceDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FamilyServiceDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FamilyServiceDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FamilyServiceDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FamilyServiceDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FamilyServiceDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FamilyServiceDetail>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FamilyServiceDetail.class.getClassLoader(),
			FamilyServiceDetail.class, ModelWrapper.class);

		try {
			Constructor<FamilyServiceDetail> constructor =
				(Constructor<FamilyServiceDetail>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FamilyServiceDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FamilyServiceDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FamilyServiceDetail, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FamilyServiceDetail, Object>>();
		Map<String, BiConsumer<FamilyServiceDetail, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FamilyServiceDetail, ?>>();

		attributeGetterFunctions.put(
			"familyServiceDetailId",
			FamilyServiceDetail::getFamilyServiceDetailId);
		attributeSetterBiConsumers.put(
			"familyServiceDetailId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setFamilyServiceDetailId);
		attributeGetterFunctions.put(
			"groupId", FamilyServiceDetail::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FamilyServiceDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setCompanyId);
		attributeGetterFunctions.put("userId", FamilyServiceDetail::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setUserId);
		attributeGetterFunctions.put(
			"userName", FamilyServiceDetail::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setUserName);
		attributeGetterFunctions.put(
			"createDate", FamilyServiceDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FamilyServiceDetail, Date>)
				FamilyServiceDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FamilyServiceDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FamilyServiceDetail, Date>)
				FamilyServiceDetail::setModifiedDate);
		attributeGetterFunctions.put(
			"boardUniversity", FamilyServiceDetail::getBoardUniversity);
		attributeSetterBiConsumers.put(
			"boardUniversity",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setBoardUniversity);
		attributeGetterFunctions.put(
			"fromYear", FamilyServiceDetail::getFromYear);
		attributeSetterBiConsumers.put(
			"fromYear",
			(BiConsumer<FamilyServiceDetail, Integer>)
				FamilyServiceDetail::setFromYear);
		attributeGetterFunctions.put("toYear", FamilyServiceDetail::getToYear);
		attributeSetterBiConsumers.put(
			"toYear",
			(BiConsumer<FamilyServiceDetail, Integer>)
				FamilyServiceDetail::setToYear);
		attributeGetterFunctions.put(
			"description", FamilyServiceDetail::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setDescription);
		attributeGetterFunctions.put(
			"endDate", FamilyServiceDetail::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<FamilyServiceDetail, Date>)
				FamilyServiceDetail::setEndDate);
		attributeGetterFunctions.put(
			"organization", FamilyServiceDetail::getOrganization);
		attributeSetterBiConsumers.put(
			"organization",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setOrganization);
		attributeGetterFunctions.put(
			"startDate", FamilyServiceDetail::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<FamilyServiceDetail, Date>)
				FamilyServiceDetail::setStartDate);
		attributeGetterFunctions.put(
			"familyMemberId", FamilyServiceDetail::getFamilyMemberId);
		attributeSetterBiConsumers.put(
			"familyMemberId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setFamilyMemberId);
		attributeGetterFunctions.put(
			"levelId", FamilyServiceDetail::getLevelId);
		attributeSetterBiConsumers.put(
			"levelId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setLevelId);
		attributeGetterFunctions.put(
			"serviceTypeId", FamilyServiceDetail::getServiceTypeId);
		attributeSetterBiConsumers.put(
			"serviceTypeId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setServiceTypeId);
		attributeGetterFunctions.put(
			"cityOfStudy", FamilyServiceDetail::getCityOfStudy);
		attributeSetterBiConsumers.put(
			"cityOfStudy",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setCityOfStudy);
		attributeGetterFunctions.put(
			"institutionName", FamilyServiceDetail::getInstitutionName);
		attributeSetterBiConsumers.put(
			"institutionName",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setInstitutionName);
		attributeGetterFunctions.put(
			"stateId", FamilyServiceDetail::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setStateId);
		attributeGetterFunctions.put(
			"cityOfWork", FamilyServiceDetail::getCityOfWork);
		attributeSetterBiConsumers.put(
			"cityOfWork",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setCityOfWork);
		attributeGetterFunctions.put(
			"designation", FamilyServiceDetail::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setDesignation);
		attributeGetterFunctions.put(
			"govtServant", FamilyServiceDetail::getGovtServant);
		attributeSetterBiConsumers.put(
			"govtServant",
			(BiConsumer<FamilyServiceDetail, Boolean>)
				FamilyServiceDetail::setGovtServant);
		attributeGetterFunctions.put(
			"cityOfHospital", FamilyServiceDetail::getCityOfHospital);
		attributeSetterBiConsumers.put(
			"cityOfHospital",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setCityOfHospital);
		attributeGetterFunctions.put(
			"deseaseDetails", FamilyServiceDetail::getDeseaseDetails);
		attributeSetterBiConsumers.put(
			"deseaseDetails",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setDeseaseDetails);
		attributeGetterFunctions.put(
			"hospitalName", FamilyServiceDetail::getHospitalName);
		attributeSetterBiConsumers.put(
			"hospitalName",
			(BiConsumer<FamilyServiceDetail, String>)
				FamilyServiceDetail::setHospitalName);
		attributeGetterFunctions.put(
			"underTreatment", FamilyServiceDetail::getUnderTreatment);
		attributeSetterBiConsumers.put(
			"underTreatment",
			(BiConsumer<FamilyServiceDetail, Boolean>)
				FamilyServiceDetail::setUnderTreatment);
		attributeGetterFunctions.put(
			"diseaseTypeId", FamilyServiceDetail::getDiseaseTypeId);
		attributeSetterBiConsumers.put(
			"diseaseTypeId",
			(BiConsumer<FamilyServiceDetail, Long>)
				FamilyServiceDetail::setDiseaseTypeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFamilyServiceDetailId() {
		return _familyServiceDetailId;
	}

	@Override
	public void setFamilyServiceDetailId(long familyServiceDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyServiceDetailId = familyServiceDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBoardUniversity() {
		if (_boardUniversity == null) {
			return "";
		}
		else {
			return _boardUniversity;
		}
	}

	@Override
	public void setBoardUniversity(String boardUniversity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_boardUniversity = boardUniversity;
	}

	@JSON
	@Override
	public int getFromYear() {
		return _fromYear;
	}

	@Override
	public void setFromYear(int fromYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromYear = fromYear;
	}

	@JSON
	@Override
	public int getToYear() {
		return _toYear;
	}

	@Override
	public void setToYear(int toYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toYear = toYear;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getOrganization() {
		if (_organization == null) {
			return "";
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organization = organization;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public long getFamilyMemberId() {
		return _familyMemberId;
	}

	@Override
	public void setFamilyMemberId(long familyMemberId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyMemberId = familyMemberId;
	}

	@JSON
	@Override
	public long getLevelId() {
		return _levelId;
	}

	@Override
	public void setLevelId(long levelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_levelId = levelId;
	}

	@JSON
	@Override
	public long getServiceTypeId() {
		return _serviceTypeId;
	}

	@Override
	public void setServiceTypeId(long serviceTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceTypeId = serviceTypeId;
	}

	@JSON
	@Override
	public String getCityOfStudy() {
		if (_cityOfStudy == null) {
			return "";
		}
		else {
			return _cityOfStudy;
		}
	}

	@Override
	public void setCityOfStudy(String cityOfStudy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityOfStudy = cityOfStudy;
	}

	@JSON
	@Override
	public String getInstitutionName() {
		if (_institutionName == null) {
			return "";
		}
		else {
			return _institutionName;
		}
	}

	@Override
	public void setInstitutionName(String institutionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_institutionName = institutionName;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	@JSON
	@Override
	public String getCityOfWork() {
		if (_cityOfWork == null) {
			return "";
		}
		else {
			return _cityOfWork;
		}
	}

	@Override
	public void setCityOfWork(String cityOfWork) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityOfWork = cityOfWork;
	}

	@JSON
	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@JSON
	@Override
	public boolean getGovtServant() {
		return _govtServant;
	}

	@JSON
	@Override
	public boolean isGovtServant() {
		return _govtServant;
	}

	@Override
	public void setGovtServant(boolean govtServant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_govtServant = govtServant;
	}

	@JSON
	@Override
	public String getCityOfHospital() {
		if (_cityOfHospital == null) {
			return "";
		}
		else {
			return _cityOfHospital;
		}
	}

	@Override
	public void setCityOfHospital(String cityOfHospital) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityOfHospital = cityOfHospital;
	}

	@JSON
	@Override
	public String getDeseaseDetails() {
		if (_deseaseDetails == null) {
			return "";
		}
		else {
			return _deseaseDetails;
		}
	}

	@Override
	public void setDeseaseDetails(String deseaseDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deseaseDetails = deseaseDetails;
	}

	@JSON
	@Override
	public String getHospitalName() {
		if (_hospitalName == null) {
			return "";
		}
		else {
			return _hospitalName;
		}
	}

	@Override
	public void setHospitalName(String hospitalName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hospitalName = hospitalName;
	}

	@JSON
	@Override
	public boolean getUnderTreatment() {
		return _underTreatment;
	}

	@JSON
	@Override
	public boolean isUnderTreatment() {
		return _underTreatment;
	}

	@Override
	public void setUnderTreatment(boolean underTreatment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_underTreatment = underTreatment;
	}

	@JSON
	@Override
	public long getDiseaseTypeId() {
		return _diseaseTypeId;
	}

	@Override
	public void setDiseaseTypeId(long diseaseTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diseaseTypeId = diseaseTypeId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FamilyServiceDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FamilyServiceDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FamilyServiceDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FamilyServiceDetailImpl familyServiceDetailImpl =
			new FamilyServiceDetailImpl();

		familyServiceDetailImpl.setFamilyServiceDetailId(
			getFamilyServiceDetailId());
		familyServiceDetailImpl.setGroupId(getGroupId());
		familyServiceDetailImpl.setCompanyId(getCompanyId());
		familyServiceDetailImpl.setUserId(getUserId());
		familyServiceDetailImpl.setUserName(getUserName());
		familyServiceDetailImpl.setCreateDate(getCreateDate());
		familyServiceDetailImpl.setModifiedDate(getModifiedDate());
		familyServiceDetailImpl.setBoardUniversity(getBoardUniversity());
		familyServiceDetailImpl.setFromYear(getFromYear());
		familyServiceDetailImpl.setToYear(getToYear());
		familyServiceDetailImpl.setDescription(getDescription());
		familyServiceDetailImpl.setEndDate(getEndDate());
		familyServiceDetailImpl.setOrganization(getOrganization());
		familyServiceDetailImpl.setStartDate(getStartDate());
		familyServiceDetailImpl.setFamilyMemberId(getFamilyMemberId());
		familyServiceDetailImpl.setLevelId(getLevelId());
		familyServiceDetailImpl.setServiceTypeId(getServiceTypeId());
		familyServiceDetailImpl.setCityOfStudy(getCityOfStudy());
		familyServiceDetailImpl.setInstitutionName(getInstitutionName());
		familyServiceDetailImpl.setStateId(getStateId());
		familyServiceDetailImpl.setCityOfWork(getCityOfWork());
		familyServiceDetailImpl.setDesignation(getDesignation());
		familyServiceDetailImpl.setGovtServant(isGovtServant());
		familyServiceDetailImpl.setCityOfHospital(getCityOfHospital());
		familyServiceDetailImpl.setDeseaseDetails(getDeseaseDetails());
		familyServiceDetailImpl.setHospitalName(getHospitalName());
		familyServiceDetailImpl.setUnderTreatment(isUnderTreatment());
		familyServiceDetailImpl.setDiseaseTypeId(getDiseaseTypeId());

		familyServiceDetailImpl.resetOriginalValues();

		return familyServiceDetailImpl;
	}

	@Override
	public int compareTo(FamilyServiceDetail familyServiceDetail) {
		long primaryKey = familyServiceDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FamilyServiceDetail)) {
			return false;
		}

		FamilyServiceDetail familyServiceDetail = (FamilyServiceDetail)object;

		long primaryKey = familyServiceDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FamilyServiceDetail> toCacheModel() {
		FamilyServiceDetailCacheModel familyServiceDetailCacheModel =
			new FamilyServiceDetailCacheModel();

		familyServiceDetailCacheModel.familyServiceDetailId =
			getFamilyServiceDetailId();

		familyServiceDetailCacheModel.groupId = getGroupId();

		familyServiceDetailCacheModel.companyId = getCompanyId();

		familyServiceDetailCacheModel.userId = getUserId();

		familyServiceDetailCacheModel.userName = getUserName();

		String userName = familyServiceDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			familyServiceDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			familyServiceDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			familyServiceDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			familyServiceDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			familyServiceDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		familyServiceDetailCacheModel.boardUniversity = getBoardUniversity();

		String boardUniversity = familyServiceDetailCacheModel.boardUniversity;

		if ((boardUniversity != null) && (boardUniversity.length() == 0)) {
			familyServiceDetailCacheModel.boardUniversity = null;
		}

		familyServiceDetailCacheModel.fromYear = getFromYear();

		familyServiceDetailCacheModel.toYear = getToYear();

		familyServiceDetailCacheModel.description = getDescription();

		String description = familyServiceDetailCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			familyServiceDetailCacheModel.description = null;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			familyServiceDetailCacheModel.endDate = endDate.getTime();
		}
		else {
			familyServiceDetailCacheModel.endDate = Long.MIN_VALUE;
		}

		familyServiceDetailCacheModel.organization = getOrganization();

		String organization = familyServiceDetailCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			familyServiceDetailCacheModel.organization = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			familyServiceDetailCacheModel.startDate = startDate.getTime();
		}
		else {
			familyServiceDetailCacheModel.startDate = Long.MIN_VALUE;
		}

		familyServiceDetailCacheModel.familyMemberId = getFamilyMemberId();

		familyServiceDetailCacheModel.levelId = getLevelId();

		familyServiceDetailCacheModel.serviceTypeId = getServiceTypeId();

		familyServiceDetailCacheModel.cityOfStudy = getCityOfStudy();

		String cityOfStudy = familyServiceDetailCacheModel.cityOfStudy;

		if ((cityOfStudy != null) && (cityOfStudy.length() == 0)) {
			familyServiceDetailCacheModel.cityOfStudy = null;
		}

		familyServiceDetailCacheModel.institutionName = getInstitutionName();

		String institutionName = familyServiceDetailCacheModel.institutionName;

		if ((institutionName != null) && (institutionName.length() == 0)) {
			familyServiceDetailCacheModel.institutionName = null;
		}

		familyServiceDetailCacheModel.stateId = getStateId();

		familyServiceDetailCacheModel.cityOfWork = getCityOfWork();

		String cityOfWork = familyServiceDetailCacheModel.cityOfWork;

		if ((cityOfWork != null) && (cityOfWork.length() == 0)) {
			familyServiceDetailCacheModel.cityOfWork = null;
		}

		familyServiceDetailCacheModel.designation = getDesignation();

		String designation = familyServiceDetailCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			familyServiceDetailCacheModel.designation = null;
		}

		familyServiceDetailCacheModel.govtServant = isGovtServant();

		familyServiceDetailCacheModel.cityOfHospital = getCityOfHospital();

		String cityOfHospital = familyServiceDetailCacheModel.cityOfHospital;

		if ((cityOfHospital != null) && (cityOfHospital.length() == 0)) {
			familyServiceDetailCacheModel.cityOfHospital = null;
		}

		familyServiceDetailCacheModel.deseaseDetails = getDeseaseDetails();

		String deseaseDetails = familyServiceDetailCacheModel.deseaseDetails;

		if ((deseaseDetails != null) && (deseaseDetails.length() == 0)) {
			familyServiceDetailCacheModel.deseaseDetails = null;
		}

		familyServiceDetailCacheModel.hospitalName = getHospitalName();

		String hospitalName = familyServiceDetailCacheModel.hospitalName;

		if ((hospitalName != null) && (hospitalName.length() == 0)) {
			familyServiceDetailCacheModel.hospitalName = null;
		}

		familyServiceDetailCacheModel.underTreatment = isUnderTreatment();

		familyServiceDetailCacheModel.diseaseTypeId = getDiseaseTypeId();

		return familyServiceDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FamilyServiceDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FamilyServiceDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyServiceDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((FamilyServiceDetail)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FamilyServiceDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FamilyServiceDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FamilyServiceDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FamilyServiceDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FamilyServiceDetail>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _familyServiceDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _boardUniversity;
	private int _fromYear;
	private int _toYear;
	private String _description;
	private Date _endDate;
	private String _organization;
	private Date _startDate;
	private long _familyMemberId;
	private long _levelId;
	private long _serviceTypeId;
	private String _cityOfStudy;
	private String _institutionName;
	private long _stateId;
	private String _cityOfWork;
	private String _designation;
	private boolean _govtServant;
	private String _cityOfHospital;
	private String _deseaseDetails;
	private String _hospitalName;
	private boolean _underTreatment;
	private long _diseaseTypeId;

	public <T> T getColumnValue(String columnName) {
		Function<FamilyServiceDetail, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FamilyServiceDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"familyServiceDetailId", _familyServiceDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("boardUniversity", _boardUniversity);
		_columnOriginalValues.put("fromYear", _fromYear);
		_columnOriginalValues.put("toYear", _toYear);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("organization", _organization);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("familyMemberId", _familyMemberId);
		_columnOriginalValues.put("levelId", _levelId);
		_columnOriginalValues.put("serviceTypeId", _serviceTypeId);
		_columnOriginalValues.put("cityOfStudy", _cityOfStudy);
		_columnOriginalValues.put("institutionName", _institutionName);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("cityOfWork", _cityOfWork);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("govtServant", _govtServant);
		_columnOriginalValues.put("cityOfHospital", _cityOfHospital);
		_columnOriginalValues.put("deseaseDetails", _deseaseDetails);
		_columnOriginalValues.put("hospitalName", _hospitalName);
		_columnOriginalValues.put("underTreatment", _underTreatment);
		_columnOriginalValues.put("diseaseTypeId", _diseaseTypeId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("familyServiceDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("boardUniversity", 128L);

		columnBitmasks.put("fromYear", 256L);

		columnBitmasks.put("toYear", 512L);

		columnBitmasks.put("description", 1024L);

		columnBitmasks.put("endDate", 2048L);

		columnBitmasks.put("organization", 4096L);

		columnBitmasks.put("startDate", 8192L);

		columnBitmasks.put("familyMemberId", 16384L);

		columnBitmasks.put("levelId", 32768L);

		columnBitmasks.put("serviceTypeId", 65536L);

		columnBitmasks.put("cityOfStudy", 131072L);

		columnBitmasks.put("institutionName", 262144L);

		columnBitmasks.put("stateId", 524288L);

		columnBitmasks.put("cityOfWork", 1048576L);

		columnBitmasks.put("designation", 2097152L);

		columnBitmasks.put("govtServant", 4194304L);

		columnBitmasks.put("cityOfHospital", 8388608L);

		columnBitmasks.put("deseaseDetails", 16777216L);

		columnBitmasks.put("hospitalName", 33554432L);

		columnBitmasks.put("underTreatment", 67108864L);

		columnBitmasks.put("diseaseTypeId", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FamilyServiceDetail _escapedModel;

}