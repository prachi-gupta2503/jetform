/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeFamily;
import com.adjecti.pis.liferay.model.EmployeeFamilyModel;
import com.adjecti.pis.liferay.model.EmployeeFamilySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeFamily service. Represents a row in the &quot;pis_EmployeeFamily&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeFamilyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeFamilyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeFamilyImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeFamilyModelImpl
	extends BaseModelImpl<EmployeeFamily> implements EmployeeFamilyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee family model instance should use the <code>EmployeeFamily</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeFamily";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeFamilyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"alive", Types.BOOLEAN},
		{"dateOfBirth", Types.TIMESTAMP}, {"dateOfDemise", Types.TIMESTAMP},
		{"dependant", Types.BOOLEAN}, {"name", Types.VARCHAR},
		{"employeeId", Types.BIGINT}, {"genderId", Types.BIGINT},
		{"occupationId", Types.BIGINT}, {"relationId", Types.BIGINT},
		{"cgegisPercentage", Types.FLOAT}, {"dcrcPercentage", Types.FLOAT},
		{"healthProblem", Types.VARCHAR}, {"nominee", Types.BOOLEAN},
		{"pfPercentage", Types.FLOAT}, {"documentProofId", Types.BIGINT},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeFamilyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("alive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfDemise", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dependant", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("genderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("occupationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("relationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cgegisPercentage", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("dcrcPercentage", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("healthProblem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nominee", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pfPercentage", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("documentProofId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeFamily (employeeFamilyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,alive BOOLEAN,dateOfBirth DATE null,dateOfDemise DATE null,dependant BOOLEAN,name VARCHAR(75) null,employeeId LONG,genderId LONG,occupationId LONG,relationId LONG,cgegisPercentage DOUBLE,dcrcPercentage DOUBLE,healthProblem VARCHAR(75) null,nominee BOOLEAN,pfPercentage DOUBLE,documentProofId LONG,status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table pis_EmployeeFamily";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeFamily.employeeFamilyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeFamily.employeeFamilyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long OCCUPATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long RELATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEFAMILYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeFamily toModel(EmployeeFamilySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeFamily model = new EmployeeFamilyImpl();

		model.setEmployeeFamilyId(soapModel.getEmployeeFamilyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAlive(soapModel.isAlive());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setDateOfDemise(soapModel.getDateOfDemise());
		model.setDependant(soapModel.isDependant());
		model.setName(soapModel.getName());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setGenderId(soapModel.getGenderId());
		model.setOccupationId(soapModel.getOccupationId());
		model.setRelationId(soapModel.getRelationId());
		model.setCgegisPercentage(soapModel.getCgegisPercentage());
		model.setDcrcPercentage(soapModel.getDcrcPercentage());
		model.setHealthProblem(soapModel.getHealthProblem());
		model.setNominee(soapModel.isNominee());
		model.setPfPercentage(soapModel.getPfPercentage());
		model.setDocumentProofId(soapModel.getDocumentProofId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeFamily> toModels(
		EmployeeFamilySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeFamily> models = new ArrayList<EmployeeFamily>(
			soapModels.length);

		for (EmployeeFamilySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeFamilyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeFamilyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeFamilyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeFamilyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeFamily.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeFamily.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeFamily, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeFamily, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeFamily, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeFamily)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeFamily, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeFamily, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeFamily)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeFamily, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeFamily, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeFamily>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeFamily.class.getClassLoader(), EmployeeFamily.class,
			ModelWrapper.class);

		try {
			Constructor<EmployeeFamily> constructor =
				(Constructor<EmployeeFamily>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeFamily, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeFamily, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeFamily, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EmployeeFamily, Object>>();
		Map<String, BiConsumer<EmployeeFamily, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EmployeeFamily, ?>>();

		attributeGetterFunctions.put(
			"employeeFamilyId", EmployeeFamily::getEmployeeFamilyId);
		attributeSetterBiConsumers.put(
			"employeeFamilyId",
			(BiConsumer<EmployeeFamily, Long>)
				EmployeeFamily::setEmployeeFamilyId);
		attributeGetterFunctions.put("groupId", EmployeeFamily::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setGroupId);
		attributeGetterFunctions.put("companyId", EmployeeFamily::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeFamily::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setUserId);
		attributeGetterFunctions.put("userName", EmployeeFamily::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeFamily, String>)EmployeeFamily::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeFamily::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeFamily, Date>)EmployeeFamily::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeFamily::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeFamily, Date>)EmployeeFamily::setModifiedDate);
		attributeGetterFunctions.put("alive", EmployeeFamily::getAlive);
		attributeSetterBiConsumers.put(
			"alive",
			(BiConsumer<EmployeeFamily, Boolean>)EmployeeFamily::setAlive);
		attributeGetterFunctions.put(
			"dateOfBirth", EmployeeFamily::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<EmployeeFamily, Date>)EmployeeFamily::setDateOfBirth);
		attributeGetterFunctions.put(
			"dateOfDemise", EmployeeFamily::getDateOfDemise);
		attributeSetterBiConsumers.put(
			"dateOfDemise",
			(BiConsumer<EmployeeFamily, Date>)EmployeeFamily::setDateOfDemise);
		attributeGetterFunctions.put("dependant", EmployeeFamily::getDependant);
		attributeSetterBiConsumers.put(
			"dependant",
			(BiConsumer<EmployeeFamily, Boolean>)EmployeeFamily::setDependant);
		attributeGetterFunctions.put("name", EmployeeFamily::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<EmployeeFamily, String>)EmployeeFamily::setName);
		attributeGetterFunctions.put(
			"employeeId", EmployeeFamily::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setEmployeeId);
		attributeGetterFunctions.put("genderId", EmployeeFamily::getGenderId);
		attributeSetterBiConsumers.put(
			"genderId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setGenderId);
		attributeGetterFunctions.put(
			"occupationId", EmployeeFamily::getOccupationId);
		attributeSetterBiConsumers.put(
			"occupationId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setOccupationId);
		attributeGetterFunctions.put(
			"relationId", EmployeeFamily::getRelationId);
		attributeSetterBiConsumers.put(
			"relationId",
			(BiConsumer<EmployeeFamily, Long>)EmployeeFamily::setRelationId);
		attributeGetterFunctions.put(
			"cgegisPercentage", EmployeeFamily::getCgegisPercentage);
		attributeSetterBiConsumers.put(
			"cgegisPercentage",
			(BiConsumer<EmployeeFamily, Float>)
				EmployeeFamily::setCgegisPercentage);
		attributeGetterFunctions.put(
			"dcrcPercentage", EmployeeFamily::getDcrcPercentage);
		attributeSetterBiConsumers.put(
			"dcrcPercentage",
			(BiConsumer<EmployeeFamily, Float>)
				EmployeeFamily::setDcrcPercentage);
		attributeGetterFunctions.put(
			"healthProblem", EmployeeFamily::getHealthProblem);
		attributeSetterBiConsumers.put(
			"healthProblem",
			(BiConsumer<EmployeeFamily, String>)
				EmployeeFamily::setHealthProblem);
		attributeGetterFunctions.put("nominee", EmployeeFamily::getNominee);
		attributeSetterBiConsumers.put(
			"nominee",
			(BiConsumer<EmployeeFamily, Boolean>)EmployeeFamily::setNominee);
		attributeGetterFunctions.put(
			"pfPercentage", EmployeeFamily::getPfPercentage);
		attributeSetterBiConsumers.put(
			"pfPercentage",
			(BiConsumer<EmployeeFamily, Float>)EmployeeFamily::setPfPercentage);
		attributeGetterFunctions.put(
			"documentProofId", EmployeeFamily::getDocumentProofId);
		attributeSetterBiConsumers.put(
			"documentProofId",
			(BiConsumer<EmployeeFamily, Long>)
				EmployeeFamily::setDocumentProofId);
		attributeGetterFunctions.put("status", EmployeeFamily::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeFamily, Integer>)EmployeeFamily::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeFamilyId() {
		return _employeeFamilyId;
	}

	@Override
	public void setEmployeeFamilyId(long employeeFamilyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeFamilyId = employeeFamilyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getAlive() {
		return _alive;
	}

	@JSON
	@Override
	public boolean isAlive() {
		return _alive;
	}

	@Override
	public void setAlive(boolean alive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alive = alive;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public Date getDateOfDemise() {
		return _dateOfDemise;
	}

	@Override
	public void setDateOfDemise(Date dateOfDemise) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfDemise = dateOfDemise;
	}

	@JSON
	@Override
	public boolean getDependant() {
		return _dependant;
	}

	@JSON
	@Override
	public boolean isDependant() {
		return _dependant;
	}

	@Override
	public void setDependant(boolean dependant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dependant = dependant;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getGenderId() {
		return _genderId;
	}

	@Override
	public void setGenderId(long genderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_genderId = genderId;
	}

	@JSON
	@Override
	public long getOccupationId() {
		return _occupationId;
	}

	@Override
	public void setOccupationId(long occupationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupationId = occupationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOccupationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("occupationId"));
	}

	@JSON
	@Override
	public long getRelationId() {
		return _relationId;
	}

	@Override
	public void setRelationId(long relationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_relationId = relationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRelationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("relationId"));
	}

	@JSON
	@Override
	public float getCgegisPercentage() {
		return _cgegisPercentage;
	}

	@Override
	public void setCgegisPercentage(float cgegisPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cgegisPercentage = cgegisPercentage;
	}

	@JSON
	@Override
	public float getDcrcPercentage() {
		return _dcrcPercentage;
	}

	@Override
	public void setDcrcPercentage(float dcrcPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dcrcPercentage = dcrcPercentage;
	}

	@JSON
	@Override
	public String getHealthProblem() {
		if (_healthProblem == null) {
			return "";
		}
		else {
			return _healthProblem;
		}
	}

	@Override
	public void setHealthProblem(String healthProblem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthProblem = healthProblem;
	}

	@JSON
	@Override
	public boolean getNominee() {
		return _nominee;
	}

	@JSON
	@Override
	public boolean isNominee() {
		return _nominee;
	}

	@Override
	public void setNominee(boolean nominee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nominee = nominee;
	}

	@JSON
	@Override
	public float getPfPercentage() {
		return _pfPercentage;
	}

	@Override
	public void setPfPercentage(float pfPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pfPercentage = pfPercentage;
	}

	@JSON
	@Override
	public long getDocumentProofId() {
		return _documentProofId;
	}

	@Override
	public void setDocumentProofId(long documentProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentProofId = documentProofId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeFamily.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeFamily toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeFamily>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeFamilyImpl employeeFamilyImpl = new EmployeeFamilyImpl();

		employeeFamilyImpl.setEmployeeFamilyId(getEmployeeFamilyId());
		employeeFamilyImpl.setGroupId(getGroupId());
		employeeFamilyImpl.setCompanyId(getCompanyId());
		employeeFamilyImpl.setUserId(getUserId());
		employeeFamilyImpl.setUserName(getUserName());
		employeeFamilyImpl.setCreateDate(getCreateDate());
		employeeFamilyImpl.setModifiedDate(getModifiedDate());
		employeeFamilyImpl.setAlive(isAlive());
		employeeFamilyImpl.setDateOfBirth(getDateOfBirth());
		employeeFamilyImpl.setDateOfDemise(getDateOfDemise());
		employeeFamilyImpl.setDependant(isDependant());
		employeeFamilyImpl.setName(getName());
		employeeFamilyImpl.setEmployeeId(getEmployeeId());
		employeeFamilyImpl.setGenderId(getGenderId());
		employeeFamilyImpl.setOccupationId(getOccupationId());
		employeeFamilyImpl.setRelationId(getRelationId());
		employeeFamilyImpl.setCgegisPercentage(getCgegisPercentage());
		employeeFamilyImpl.setDcrcPercentage(getDcrcPercentage());
		employeeFamilyImpl.setHealthProblem(getHealthProblem());
		employeeFamilyImpl.setNominee(isNominee());
		employeeFamilyImpl.setPfPercentage(getPfPercentage());
		employeeFamilyImpl.setDocumentProofId(getDocumentProofId());
		employeeFamilyImpl.setStatus(getStatus());

		employeeFamilyImpl.resetOriginalValues();

		return employeeFamilyImpl;
	}

	@Override
	public int compareTo(EmployeeFamily employeeFamily) {
		long primaryKey = employeeFamily.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeFamily)) {
			return false;
		}

		EmployeeFamily employeeFamily = (EmployeeFamily)object;

		long primaryKey = employeeFamily.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeFamily> toCacheModel() {
		EmployeeFamilyCacheModel employeeFamilyCacheModel =
			new EmployeeFamilyCacheModel();

		employeeFamilyCacheModel.employeeFamilyId = getEmployeeFamilyId();

		employeeFamilyCacheModel.groupId = getGroupId();

		employeeFamilyCacheModel.companyId = getCompanyId();

		employeeFamilyCacheModel.userId = getUserId();

		employeeFamilyCacheModel.userName = getUserName();

		String userName = employeeFamilyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeFamilyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeFamilyCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeFamilyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeFamilyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeFamilyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeFamilyCacheModel.alive = isAlive();

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			employeeFamilyCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			employeeFamilyCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		Date dateOfDemise = getDateOfDemise();

		if (dateOfDemise != null) {
			employeeFamilyCacheModel.dateOfDemise = dateOfDemise.getTime();
		}
		else {
			employeeFamilyCacheModel.dateOfDemise = Long.MIN_VALUE;
		}

		employeeFamilyCacheModel.dependant = isDependant();

		employeeFamilyCacheModel.name = getName();

		String name = employeeFamilyCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			employeeFamilyCacheModel.name = null;
		}

		employeeFamilyCacheModel.employeeId = getEmployeeId();

		employeeFamilyCacheModel.genderId = getGenderId();

		employeeFamilyCacheModel.occupationId = getOccupationId();

		employeeFamilyCacheModel.relationId = getRelationId();

		employeeFamilyCacheModel.cgegisPercentage = getCgegisPercentage();

		employeeFamilyCacheModel.dcrcPercentage = getDcrcPercentage();

		employeeFamilyCacheModel.healthProblem = getHealthProblem();

		String healthProblem = employeeFamilyCacheModel.healthProblem;

		if ((healthProblem != null) && (healthProblem.length() == 0)) {
			employeeFamilyCacheModel.healthProblem = null;
		}

		employeeFamilyCacheModel.nominee = isNominee();

		employeeFamilyCacheModel.pfPercentage = getPfPercentage();

		employeeFamilyCacheModel.documentProofId = getDocumentProofId();

		employeeFamilyCacheModel.status = getStatus();

		return employeeFamilyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeFamily, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeFamily, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeFamily, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EmployeeFamily)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeFamily, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeFamily, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeFamily, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmployeeFamily)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeFamily>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeFamilyId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _alive;
	private Date _dateOfBirth;
	private Date _dateOfDemise;
	private boolean _dependant;
	private String _name;
	private long _employeeId;
	private long _genderId;
	private long _occupationId;
	private long _relationId;
	private float _cgegisPercentage;
	private float _dcrcPercentage;
	private String _healthProblem;
	private boolean _nominee;
	private float _pfPercentage;
	private long _documentProofId;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		Function<EmployeeFamily, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeFamily)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeFamilyId", _employeeFamilyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("alive", _alive);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("dateOfDemise", _dateOfDemise);
		_columnOriginalValues.put("dependant", _dependant);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("genderId", _genderId);
		_columnOriginalValues.put("occupationId", _occupationId);
		_columnOriginalValues.put("relationId", _relationId);
		_columnOriginalValues.put("cgegisPercentage", _cgegisPercentage);
		_columnOriginalValues.put("dcrcPercentage", _dcrcPercentage);
		_columnOriginalValues.put("healthProblem", _healthProblem);
		_columnOriginalValues.put("nominee", _nominee);
		_columnOriginalValues.put("pfPercentage", _pfPercentage);
		_columnOriginalValues.put("documentProofId", _documentProofId);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeFamilyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("alive", 128L);

		columnBitmasks.put("dateOfBirth", 256L);

		columnBitmasks.put("dateOfDemise", 512L);

		columnBitmasks.put("dependant", 1024L);

		columnBitmasks.put("name", 2048L);

		columnBitmasks.put("employeeId", 4096L);

		columnBitmasks.put("genderId", 8192L);

		columnBitmasks.put("occupationId", 16384L);

		columnBitmasks.put("relationId", 32768L);

		columnBitmasks.put("cgegisPercentage", 65536L);

		columnBitmasks.put("dcrcPercentage", 131072L);

		columnBitmasks.put("healthProblem", 262144L);

		columnBitmasks.put("nominee", 524288L);

		columnBitmasks.put("pfPercentage", 1048576L);

		columnBitmasks.put("documentProofId", 2097152L);

		columnBitmasks.put("status", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeFamily _escapedModel;

}