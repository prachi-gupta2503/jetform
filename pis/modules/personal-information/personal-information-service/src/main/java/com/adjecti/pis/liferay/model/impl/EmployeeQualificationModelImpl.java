/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeQualification;
import com.adjecti.pis.liferay.model.EmployeeQualificationModel;
import com.adjecti.pis.liferay.model.EmployeeQualificationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeQualification service. Represents a row in the &quot;pis_EmployeeQualification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeQualificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeQualificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeQualificationImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeQualificationModelImpl
	extends BaseModelImpl<EmployeeQualification>
	implements EmployeeQualificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee qualification model instance should use the <code>EmployeeQualification</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeQualification";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeQualificationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"foreignDegree", Types.BOOLEAN},
		{"foreignInstitution", Types.VARCHAR}, {"fromYear", Types.INTEGER},
		{"marksSecured", Types.FLOAT}, {"toYear", Types.INTEGER},
		{"documentProofId", Types.BIGINT}, {"employeeId", Types.BIGINT},
		{"gradeId", Types.BIGINT}, {"levelId", Types.BIGINT},
		{"qualificationId", Types.BIGINT}, {"specializationId", Types.BIGINT},
		{"marksPercentage", Types.BIGINT}, {"passedDate", Types.TIMESTAMP},
		{"certificateId", Types.BIGINT}, {"qualificationDate", Types.TIMESTAMP},
		{"institution", Types.VARCHAR}, {"joiningProcessId", Types.BIGINT},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeQualificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foreignDegree", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("foreignInstitution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("marksSecured", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("toYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("documentProofId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("levelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("qualificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("specializationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("marksPercentage", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("qualificationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("institution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeQualification (employeeQualificationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,foreignDegree BOOLEAN,foreignInstitution VARCHAR(75) null,fromYear INTEGER,marksSecured DOUBLE,toYear INTEGER,documentProofId LONG,employeeId LONG,gradeId LONG,levelId LONG,qualificationId LONG,specializationId LONG,marksPercentage LONG,passedDate DATE null,certificateId LONG,qualificationDate DATE null,institution VARCHAR(75) null,joiningProcessId LONG,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeQualification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeQualification.employeeQualificationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeQualification.employeeQualificationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long LEVELID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUALIFICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SPECIALIZATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEQUALIFICATIONID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeQualification toModel(
		EmployeeQualificationSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		EmployeeQualification model = new EmployeeQualificationImpl();

		model.setEmployeeQualificationId(
			soapModel.getEmployeeQualificationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setForeignDegree(soapModel.isForeignDegree());
		model.setForeignInstitution(soapModel.getForeignInstitution());
		model.setFromYear(soapModel.getFromYear());
		model.setMarksSecured(soapModel.getMarksSecured());
		model.setToYear(soapModel.getToYear());
		model.setDocumentProofId(soapModel.getDocumentProofId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setGradeId(soapModel.getGradeId());
		model.setLevelId(soapModel.getLevelId());
		model.setQualificationId(soapModel.getQualificationId());
		model.setSpecializationId(soapModel.getSpecializationId());
		model.setMarksPercentage(soapModel.getMarksPercentage());
		model.setPassedDate(soapModel.getPassedDate());
		model.setCertificateId(soapModel.getCertificateId());
		model.setQualificationDate(soapModel.getQualificationDate());
		model.setInstitution(soapModel.getInstitution());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeQualification> toModels(
		EmployeeQualificationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeQualification> models =
			new ArrayList<EmployeeQualification>(soapModels.length);

		for (EmployeeQualificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeQualificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeQualificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeQualificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeQualificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeQualification.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeQualification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeQualification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeQualification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeQualification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeQualification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeQualification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeQualification, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeQualification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeQualification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeQualification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeQualification>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeQualification.class.getClassLoader(),
			EmployeeQualification.class, ModelWrapper.class);

		try {
			Constructor<EmployeeQualification> constructor =
				(Constructor<EmployeeQualification>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeQualification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeQualification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeQualification, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeeQualification, Object>>();
		Map<String, BiConsumer<EmployeeQualification, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EmployeeQualification, ?>>();

		attributeGetterFunctions.put(
			"employeeQualificationId",
			EmployeeQualification::getEmployeeQualificationId);
		attributeSetterBiConsumers.put(
			"employeeQualificationId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setEmployeeQualificationId);
		attributeGetterFunctions.put(
			"groupId", EmployeeQualification::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeQualification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setCompanyId);
		attributeGetterFunctions.put(
			"userId", EmployeeQualification::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setUserId);
		attributeGetterFunctions.put(
			"userName", EmployeeQualification::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeQualification, String>)
				EmployeeQualification::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeQualification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeQualification, Date>)
				EmployeeQualification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeQualification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeQualification, Date>)
				EmployeeQualification::setModifiedDate);
		attributeGetterFunctions.put(
			"foreignDegree", EmployeeQualification::getForeignDegree);
		attributeSetterBiConsumers.put(
			"foreignDegree",
			(BiConsumer<EmployeeQualification, Boolean>)
				EmployeeQualification::setForeignDegree);
		attributeGetterFunctions.put(
			"foreignInstitution", EmployeeQualification::getForeignInstitution);
		attributeSetterBiConsumers.put(
			"foreignInstitution",
			(BiConsumer<EmployeeQualification, String>)
				EmployeeQualification::setForeignInstitution);
		attributeGetterFunctions.put(
			"fromYear", EmployeeQualification::getFromYear);
		attributeSetterBiConsumers.put(
			"fromYear",
			(BiConsumer<EmployeeQualification, Integer>)
				EmployeeQualification::setFromYear);
		attributeGetterFunctions.put(
			"marksSecured", EmployeeQualification::getMarksSecured);
		attributeSetterBiConsumers.put(
			"marksSecured",
			(BiConsumer<EmployeeQualification, Float>)
				EmployeeQualification::setMarksSecured);
		attributeGetterFunctions.put(
			"toYear", EmployeeQualification::getToYear);
		attributeSetterBiConsumers.put(
			"toYear",
			(BiConsumer<EmployeeQualification, Integer>)
				EmployeeQualification::setToYear);
		attributeGetterFunctions.put(
			"documentProofId", EmployeeQualification::getDocumentProofId);
		attributeSetterBiConsumers.put(
			"documentProofId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setDocumentProofId);
		attributeGetterFunctions.put(
			"employeeId", EmployeeQualification::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setEmployeeId);
		attributeGetterFunctions.put(
			"gradeId", EmployeeQualification::getGradeId);
		attributeSetterBiConsumers.put(
			"gradeId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setGradeId);
		attributeGetterFunctions.put(
			"levelId", EmployeeQualification::getLevelId);
		attributeSetterBiConsumers.put(
			"levelId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setLevelId);
		attributeGetterFunctions.put(
			"qualificationId", EmployeeQualification::getQualificationId);
		attributeSetterBiConsumers.put(
			"qualificationId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setQualificationId);
		attributeGetterFunctions.put(
			"specializationId", EmployeeQualification::getSpecializationId);
		attributeSetterBiConsumers.put(
			"specializationId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setSpecializationId);
		attributeGetterFunctions.put(
			"marksPercentage", EmployeeQualification::getMarksPercentage);
		attributeSetterBiConsumers.put(
			"marksPercentage",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setMarksPercentage);
		attributeGetterFunctions.put(
			"passedDate", EmployeeQualification::getPassedDate);
		attributeSetterBiConsumers.put(
			"passedDate",
			(BiConsumer<EmployeeQualification, Date>)
				EmployeeQualification::setPassedDate);
		attributeGetterFunctions.put(
			"certificateId", EmployeeQualification::getCertificateId);
		attributeSetterBiConsumers.put(
			"certificateId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setCertificateId);
		attributeGetterFunctions.put(
			"qualificationDate", EmployeeQualification::getQualificationDate);
		attributeSetterBiConsumers.put(
			"qualificationDate",
			(BiConsumer<EmployeeQualification, Date>)
				EmployeeQualification::setQualificationDate);
		attributeGetterFunctions.put(
			"institution", EmployeeQualification::getInstitution);
		attributeSetterBiConsumers.put(
			"institution",
			(BiConsumer<EmployeeQualification, String>)
				EmployeeQualification::setInstitution);
		attributeGetterFunctions.put(
			"joiningProcessId", EmployeeQualification::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<EmployeeQualification, Long>)
				EmployeeQualification::setJoiningProcessId);
		attributeGetterFunctions.put(
			"status", EmployeeQualification::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeQualification, Integer>)
				EmployeeQualification::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeQualificationId() {
		return _employeeQualificationId;
	}

	@Override
	public void setEmployeeQualificationId(long employeeQualificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeQualificationId = employeeQualificationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getForeignDegree() {
		return _foreignDegree;
	}

	@JSON
	@Override
	public boolean isForeignDegree() {
		return _foreignDegree;
	}

	@Override
	public void setForeignDegree(boolean foreignDegree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foreignDegree = foreignDegree;
	}

	@JSON
	@Override
	public String getForeignInstitution() {
		if (_foreignInstitution == null) {
			return "";
		}
		else {
			return _foreignInstitution;
		}
	}

	@Override
	public void setForeignInstitution(String foreignInstitution) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foreignInstitution = foreignInstitution;
	}

	@JSON
	@Override
	public int getFromYear() {
		return _fromYear;
	}

	@Override
	public void setFromYear(int fromYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromYear = fromYear;
	}

	@JSON
	@Override
	public float getMarksSecured() {
		return _marksSecured;
	}

	@Override
	public void setMarksSecured(float marksSecured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_marksSecured = marksSecured;
	}

	@JSON
	@Override
	public int getToYear() {
		return _toYear;
	}

	@Override
	public void setToYear(int toYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toYear = toYear;
	}

	@JSON
	@Override
	public long getDocumentProofId() {
		return _documentProofId;
	}

	@Override
	public void setDocumentProofId(long documentProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentProofId = documentProofId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getGradeId() {
		return _gradeId;
	}

	@Override
	public void setGradeId(long gradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeId = gradeId;
	}

	@JSON
	@Override
	public long getLevelId() {
		return _levelId;
	}

	@Override
	public void setLevelId(long levelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_levelId = levelId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalLevelId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("levelId"));
	}

	@JSON
	@Override
	public long getQualificationId() {
		return _qualificationId;
	}

	@Override
	public void setQualificationId(long qualificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualificationId = qualificationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQualificationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("qualificationId"));
	}

	@JSON
	@Override
	public long getSpecializationId() {
		return _specializationId;
	}

	@Override
	public void setSpecializationId(long specializationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specializationId = specializationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSpecializationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("specializationId"));
	}

	@JSON
	@Override
	public long getMarksPercentage() {
		return _marksPercentage;
	}

	@Override
	public void setMarksPercentage(long marksPercentage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_marksPercentage = marksPercentage;
	}

	@JSON
	@Override
	public Date getPassedDate() {
		return _passedDate;
	}

	@Override
	public void setPassedDate(Date passedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passedDate = passedDate;
	}

	@JSON
	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificateId = certificateId;
	}

	@JSON
	@Override
	public Date getQualificationDate() {
		return _qualificationDate;
	}

	@Override
	public void setQualificationDate(Date qualificationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualificationDate = qualificationDate;
	}

	@JSON
	@Override
	public String getInstitution() {
		if (_institution == null) {
			return "";
		}
		else {
			return _institution;
		}
	}

	@Override
	public void setInstitution(String institution) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_institution = institution;
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeQualification.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeQualification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeQualification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeQualificationImpl employeeQualificationImpl =
			new EmployeeQualificationImpl();

		employeeQualificationImpl.setEmployeeQualificationId(
			getEmployeeQualificationId());
		employeeQualificationImpl.setGroupId(getGroupId());
		employeeQualificationImpl.setCompanyId(getCompanyId());
		employeeQualificationImpl.setUserId(getUserId());
		employeeQualificationImpl.setUserName(getUserName());
		employeeQualificationImpl.setCreateDate(getCreateDate());
		employeeQualificationImpl.setModifiedDate(getModifiedDate());
		employeeQualificationImpl.setForeignDegree(isForeignDegree());
		employeeQualificationImpl.setForeignInstitution(
			getForeignInstitution());
		employeeQualificationImpl.setFromYear(getFromYear());
		employeeQualificationImpl.setMarksSecured(getMarksSecured());
		employeeQualificationImpl.setToYear(getToYear());
		employeeQualificationImpl.setDocumentProofId(getDocumentProofId());
		employeeQualificationImpl.setEmployeeId(getEmployeeId());
		employeeQualificationImpl.setGradeId(getGradeId());
		employeeQualificationImpl.setLevelId(getLevelId());
		employeeQualificationImpl.setQualificationId(getQualificationId());
		employeeQualificationImpl.setSpecializationId(getSpecializationId());
		employeeQualificationImpl.setMarksPercentage(getMarksPercentage());
		employeeQualificationImpl.setPassedDate(getPassedDate());
		employeeQualificationImpl.setCertificateId(getCertificateId());
		employeeQualificationImpl.setQualificationDate(getQualificationDate());
		employeeQualificationImpl.setInstitution(getInstitution());
		employeeQualificationImpl.setJoiningProcessId(getJoiningProcessId());
		employeeQualificationImpl.setStatus(getStatus());

		employeeQualificationImpl.resetOriginalValues();

		return employeeQualificationImpl;
	}

	@Override
	public int compareTo(EmployeeQualification employeeQualification) {
		long primaryKey = employeeQualification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeQualification)) {
			return false;
		}

		EmployeeQualification employeeQualification =
			(EmployeeQualification)object;

		long primaryKey = employeeQualification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeQualification> toCacheModel() {
		EmployeeQualificationCacheModel employeeQualificationCacheModel =
			new EmployeeQualificationCacheModel();

		employeeQualificationCacheModel.employeeQualificationId =
			getEmployeeQualificationId();

		employeeQualificationCacheModel.groupId = getGroupId();

		employeeQualificationCacheModel.companyId = getCompanyId();

		employeeQualificationCacheModel.userId = getUserId();

		employeeQualificationCacheModel.userName = getUserName();

		String userName = employeeQualificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeQualificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeQualificationCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeQualificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeQualificationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			employeeQualificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeQualificationCacheModel.foreignDegree = isForeignDegree();

		employeeQualificationCacheModel.foreignInstitution =
			getForeignInstitution();

		String foreignInstitution =
			employeeQualificationCacheModel.foreignInstitution;

		if ((foreignInstitution != null) &&
			(foreignInstitution.length() == 0)) {

			employeeQualificationCacheModel.foreignInstitution = null;
		}

		employeeQualificationCacheModel.fromYear = getFromYear();

		employeeQualificationCacheModel.marksSecured = getMarksSecured();

		employeeQualificationCacheModel.toYear = getToYear();

		employeeQualificationCacheModel.documentProofId = getDocumentProofId();

		employeeQualificationCacheModel.employeeId = getEmployeeId();

		employeeQualificationCacheModel.gradeId = getGradeId();

		employeeQualificationCacheModel.levelId = getLevelId();

		employeeQualificationCacheModel.qualificationId = getQualificationId();

		employeeQualificationCacheModel.specializationId =
			getSpecializationId();

		employeeQualificationCacheModel.marksPercentage = getMarksPercentage();

		Date passedDate = getPassedDate();

		if (passedDate != null) {
			employeeQualificationCacheModel.passedDate = passedDate.getTime();
		}
		else {
			employeeQualificationCacheModel.passedDate = Long.MIN_VALUE;
		}

		employeeQualificationCacheModel.certificateId = getCertificateId();

		Date qualificationDate = getQualificationDate();

		if (qualificationDate != null) {
			employeeQualificationCacheModel.qualificationDate =
				qualificationDate.getTime();
		}
		else {
			employeeQualificationCacheModel.qualificationDate = Long.MIN_VALUE;
		}

		employeeQualificationCacheModel.institution = getInstitution();

		String institution = employeeQualificationCacheModel.institution;

		if ((institution != null) && (institution.length() == 0)) {
			employeeQualificationCacheModel.institution = null;
		}

		employeeQualificationCacheModel.joiningProcessId =
			getJoiningProcessId();

		employeeQualificationCacheModel.status = getStatus();

		return employeeQualificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeQualification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeQualification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeQualification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((EmployeeQualification)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeQualification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeQualification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeQualification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((EmployeeQualification)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeQualification>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeQualificationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _foreignDegree;
	private String _foreignInstitution;
	private int _fromYear;
	private float _marksSecured;
	private int _toYear;
	private long _documentProofId;
	private long _employeeId;
	private long _gradeId;
	private long _levelId;
	private long _qualificationId;
	private long _specializationId;
	private long _marksPercentage;
	private Date _passedDate;
	private long _certificateId;
	private Date _qualificationDate;
	private String _institution;
	private long _joiningProcessId;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		Function<EmployeeQualification, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeQualification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"employeeQualificationId", _employeeQualificationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("foreignDegree", _foreignDegree);
		_columnOriginalValues.put("foreignInstitution", _foreignInstitution);
		_columnOriginalValues.put("fromYear", _fromYear);
		_columnOriginalValues.put("marksSecured", _marksSecured);
		_columnOriginalValues.put("toYear", _toYear);
		_columnOriginalValues.put("documentProofId", _documentProofId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("gradeId", _gradeId);
		_columnOriginalValues.put("levelId", _levelId);
		_columnOriginalValues.put("qualificationId", _qualificationId);
		_columnOriginalValues.put("specializationId", _specializationId);
		_columnOriginalValues.put("marksPercentage", _marksPercentage);
		_columnOriginalValues.put("passedDate", _passedDate);
		_columnOriginalValues.put("certificateId", _certificateId);
		_columnOriginalValues.put("qualificationDate", _qualificationDate);
		_columnOriginalValues.put("institution", _institution);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeQualificationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("foreignDegree", 128L);

		columnBitmasks.put("foreignInstitution", 256L);

		columnBitmasks.put("fromYear", 512L);

		columnBitmasks.put("marksSecured", 1024L);

		columnBitmasks.put("toYear", 2048L);

		columnBitmasks.put("documentProofId", 4096L);

		columnBitmasks.put("employeeId", 8192L);

		columnBitmasks.put("gradeId", 16384L);

		columnBitmasks.put("levelId", 32768L);

		columnBitmasks.put("qualificationId", 65536L);

		columnBitmasks.put("specializationId", 131072L);

		columnBitmasks.put("marksPercentage", 262144L);

		columnBitmasks.put("passedDate", 524288L);

		columnBitmasks.put("certificateId", 1048576L);

		columnBitmasks.put("qualificationDate", 2097152L);

		columnBitmasks.put("institution", 4194304L);

		columnBitmasks.put("joiningProcessId", 8388608L);

		columnBitmasks.put("status", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeQualification _escapedModel;

}