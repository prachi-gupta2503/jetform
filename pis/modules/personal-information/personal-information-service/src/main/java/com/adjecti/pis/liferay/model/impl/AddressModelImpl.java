/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.Address;
import com.adjecti.pis.liferay.model.AddressModel;
import com.adjecti.pis.liferay.model.AddressSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;pis_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressImpl
 * @generated
 */
@JSON(strict = true)
public class AddressModelImpl
	extends BaseModelImpl<Address> implements AddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address model instance should use the <code>Address</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_Address";

	public static final Object[][] TABLE_COLUMNS = {
		{"addressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"addressTypeId", Types.INTEGER},
		{"addressLine1", Types.VARCHAR}, {"addressLine2", Types.VARCHAR},
		{"addressLine3", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"pinCode", Types.VARCHAR}, {"countryId", Types.BIGINT},
		{"stateId", Types.BIGINT}, {"accomodationTypeId", Types.BIGINT},
		{"districtId", Types.BIGINT}, {"joiningProcessId", Types.BIGINT},
		{"addressProofId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressTypeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("addressLine1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pinCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accomodationTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("districtId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addressProofId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_Address (addressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressTypeId INTEGER,addressLine1 VARCHAR(75) null,addressLine2 VARCHAR(75) null,addressLine3 VARCHAR(75) null,city VARCHAR(75) null,pinCode VARCHAR(75) null,countryId LONG,stateId LONG,accomodationTypeId LONG,districtId LONG,joiningProcessId LONG,addressProofId LONG)";

	public static final String TABLE_SQL_DROP = "drop table pis_Address";

	public static final String ORDER_BY_JPQL =
		" ORDER BY address.addressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_Address.addressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ACCOMODATIONTYPEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ADDRESSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DISTRICTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Address toModel(AddressSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Address model = new AddressImpl();

		model.setAddressId(soapModel.getAddressId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAddressTypeId(soapModel.getAddressTypeId());
		model.setAddressLine1(soapModel.getAddressLine1());
		model.setAddressLine2(soapModel.getAddressLine2());
		model.setAddressLine3(soapModel.getAddressLine3());
		model.setCity(soapModel.getCity());
		model.setPinCode(soapModel.getPinCode());
		model.setCountryId(soapModel.getCountryId());
		model.setStateId(soapModel.getStateId());
		model.setAccomodationTypeId(soapModel.getAccomodationTypeId());
		model.setDistrictId(soapModel.getDistrictId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setAddressProofId(soapModel.getAddressProofId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Address> toModels(AddressSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Address> models = new ArrayList<Address>(soapModels.length);

		for (AddressSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Address.class;
	}

	@Override
	public String getModelClassName() {
		return Address.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Address)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Address, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Address, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Address)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Address, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Address, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Address>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Address.class.getClassLoader(), Address.class, ModelWrapper.class);

		try {
			Constructor<Address> constructor =
				(Constructor<Address>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Address, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Address, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Address, Object>>();
		Map<String, BiConsumer<Address, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Address, ?>>();

		attributeGetterFunctions.put("addressId", Address::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId", (BiConsumer<Address, Long>)Address::setAddressId);
		attributeGetterFunctions.put("groupId", Address::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Address, Long>)Address::setGroupId);
		attributeGetterFunctions.put("companyId", Address::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Address, Long>)Address::setCompanyId);
		attributeGetterFunctions.put("userId", Address::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Address, Long>)Address::setUserId);
		attributeGetterFunctions.put("userName", Address::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Address, String>)Address::setUserName);
		attributeGetterFunctions.put("createDate", Address::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Address, Date>)Address::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Address::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Address, Date>)Address::setModifiedDate);
		attributeGetterFunctions.put(
			"addressTypeId", Address::getAddressTypeId);
		attributeSetterBiConsumers.put(
			"addressTypeId",
			(BiConsumer<Address, Integer>)Address::setAddressTypeId);
		attributeGetterFunctions.put("addressLine1", Address::getAddressLine1);
		attributeSetterBiConsumers.put(
			"addressLine1",
			(BiConsumer<Address, String>)Address::setAddressLine1);
		attributeGetterFunctions.put("addressLine2", Address::getAddressLine2);
		attributeSetterBiConsumers.put(
			"addressLine2",
			(BiConsumer<Address, String>)Address::setAddressLine2);
		attributeGetterFunctions.put("addressLine3", Address::getAddressLine3);
		attributeSetterBiConsumers.put(
			"addressLine3",
			(BiConsumer<Address, String>)Address::setAddressLine3);
		attributeGetterFunctions.put("city", Address::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Address, String>)Address::setCity);
		attributeGetterFunctions.put("pinCode", Address::getPinCode);
		attributeSetterBiConsumers.put(
			"pinCode", (BiConsumer<Address, String>)Address::setPinCode);
		attributeGetterFunctions.put("countryId", Address::getCountryId);
		attributeSetterBiConsumers.put(
			"countryId", (BiConsumer<Address, Long>)Address::setCountryId);
		attributeGetterFunctions.put("stateId", Address::getStateId);
		attributeSetterBiConsumers.put(
			"stateId", (BiConsumer<Address, Long>)Address::setStateId);
		attributeGetterFunctions.put(
			"accomodationTypeId", Address::getAccomodationTypeId);
		attributeSetterBiConsumers.put(
			"accomodationTypeId",
			(BiConsumer<Address, Long>)Address::setAccomodationTypeId);
		attributeGetterFunctions.put("districtId", Address::getDistrictId);
		attributeSetterBiConsumers.put(
			"districtId", (BiConsumer<Address, Long>)Address::setDistrictId);
		attributeGetterFunctions.put(
			"joiningProcessId", Address::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<Address, Long>)Address::setJoiningProcessId);
		attributeGetterFunctions.put(
			"addressProofId", Address::getAddressProofId);
		attributeSetterBiConsumers.put(
			"addressProofId",
			(BiConsumer<Address, Long>)Address::setAddressProofId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressId = addressId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAddressId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("addressId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getAddressTypeId() {
		return _addressTypeId;
	}

	@Override
	public void setAddressTypeId(int addressTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressTypeId = addressTypeId;
	}

	@JSON
	@Override
	public String getAddressLine1() {
		if (_addressLine1 == null) {
			return "";
		}
		else {
			return _addressLine1;
		}
	}

	@Override
	public void setAddressLine1(String addressLine1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine1 = addressLine1;
	}

	@JSON
	@Override
	public String getAddressLine2() {
		if (_addressLine2 == null) {
			return "";
		}
		else {
			return _addressLine2;
		}
	}

	@Override
	public void setAddressLine2(String addressLine2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine2 = addressLine2;
	}

	@JSON
	@Override
	public String getAddressLine3() {
		if (_addressLine3 == null) {
			return "";
		}
		else {
			return _addressLine3;
		}
	}

	@Override
	public void setAddressLine3(String addressLine3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine3 = addressLine3;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getPinCode() {
		if (_pinCode == null) {
			return "";
		}
		else {
			return _pinCode;
		}
	}

	@Override
	public void setPinCode(String pinCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pinCode = pinCode;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryId = countryId;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStateId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("stateId"));
	}

	@JSON
	@Override
	public long getAccomodationTypeId() {
		return _accomodationTypeId;
	}

	@Override
	public void setAccomodationTypeId(long accomodationTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accomodationTypeId = accomodationTypeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAccomodationTypeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("accomodationTypeId"));
	}

	@JSON
	@Override
	public long getDistrictId() {
		return _districtId;
	}

	@Override
	public void setDistrictId(long districtId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtId = districtId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistrictId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("districtId"));
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public long getAddressProofId() {
		return _addressProofId;
	}

	@Override
	public void setAddressProofId(long addressProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressProofId = addressProofId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Address.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Address toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Address>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressImpl addressImpl = new AddressImpl();

		addressImpl.setAddressId(getAddressId());
		addressImpl.setGroupId(getGroupId());
		addressImpl.setCompanyId(getCompanyId());
		addressImpl.setUserId(getUserId());
		addressImpl.setUserName(getUserName());
		addressImpl.setCreateDate(getCreateDate());
		addressImpl.setModifiedDate(getModifiedDate());
		addressImpl.setAddressTypeId(getAddressTypeId());
		addressImpl.setAddressLine1(getAddressLine1());
		addressImpl.setAddressLine2(getAddressLine2());
		addressImpl.setAddressLine3(getAddressLine3());
		addressImpl.setCity(getCity());
		addressImpl.setPinCode(getPinCode());
		addressImpl.setCountryId(getCountryId());
		addressImpl.setStateId(getStateId());
		addressImpl.setAccomodationTypeId(getAccomodationTypeId());
		addressImpl.setDistrictId(getDistrictId());
		addressImpl.setJoiningProcessId(getJoiningProcessId());
		addressImpl.setAddressProofId(getAddressProofId());

		addressImpl.resetOriginalValues();

		return addressImpl;
	}

	@Override
	public int compareTo(Address address) {
		long primaryKey = address.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Address)) {
			return false;
		}

		Address address = (Address)object;

		long primaryKey = address.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Address> toCacheModel() {
		AddressCacheModel addressCacheModel = new AddressCacheModel();

		addressCacheModel.addressId = getAddressId();

		addressCacheModel.groupId = getGroupId();

		addressCacheModel.companyId = getCompanyId();

		addressCacheModel.userId = getUserId();

		addressCacheModel.userName = getUserName();

		String userName = addressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addressCacheModel.createDate = createDate.getTime();
		}
		else {
			addressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addressCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			addressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addressCacheModel.addressTypeId = getAddressTypeId();

		addressCacheModel.addressLine1 = getAddressLine1();

		String addressLine1 = addressCacheModel.addressLine1;

		if ((addressLine1 != null) && (addressLine1.length() == 0)) {
			addressCacheModel.addressLine1 = null;
		}

		addressCacheModel.addressLine2 = getAddressLine2();

		String addressLine2 = addressCacheModel.addressLine2;

		if ((addressLine2 != null) && (addressLine2.length() == 0)) {
			addressCacheModel.addressLine2 = null;
		}

		addressCacheModel.addressLine3 = getAddressLine3();

		String addressLine3 = addressCacheModel.addressLine3;

		if ((addressLine3 != null) && (addressLine3.length() == 0)) {
			addressCacheModel.addressLine3 = null;
		}

		addressCacheModel.city = getCity();

		String city = addressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			addressCacheModel.city = null;
		}

		addressCacheModel.pinCode = getPinCode();

		String pinCode = addressCacheModel.pinCode;

		if ((pinCode != null) && (pinCode.length() == 0)) {
			addressCacheModel.pinCode = null;
		}

		addressCacheModel.countryId = getCountryId();

		addressCacheModel.stateId = getStateId();

		addressCacheModel.accomodationTypeId = getAccomodationTypeId();

		addressCacheModel.districtId = getDistrictId();

		addressCacheModel.joiningProcessId = getJoiningProcessId();

		addressCacheModel.addressProofId = getAddressProofId();

		return addressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Address)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Address)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Address>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _addressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _addressTypeId;
	private String _addressLine1;
	private String _addressLine2;
	private String _addressLine3;
	private String _city;
	private String _pinCode;
	private long _countryId;
	private long _stateId;
	private long _accomodationTypeId;
	private long _districtId;
	private long _joiningProcessId;
	private long _addressProofId;

	public <T> T getColumnValue(String columnName) {
		Function<Address, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Address)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("addressId", _addressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressTypeId", _addressTypeId);
		_columnOriginalValues.put("addressLine1", _addressLine1);
		_columnOriginalValues.put("addressLine2", _addressLine2);
		_columnOriginalValues.put("addressLine3", _addressLine3);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("pinCode", _pinCode);
		_columnOriginalValues.put("countryId", _countryId);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("accomodationTypeId", _accomodationTypeId);
		_columnOriginalValues.put("districtId", _districtId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("addressProofId", _addressProofId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addressId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("addressTypeId", 128L);

		columnBitmasks.put("addressLine1", 256L);

		columnBitmasks.put("addressLine2", 512L);

		columnBitmasks.put("addressLine3", 1024L);

		columnBitmasks.put("city", 2048L);

		columnBitmasks.put("pinCode", 4096L);

		columnBitmasks.put("countryId", 8192L);

		columnBitmasks.put("stateId", 16384L);

		columnBitmasks.put("accomodationTypeId", 32768L);

		columnBitmasks.put("districtId", 65536L);

		columnBitmasks.put("joiningProcessId", 131072L);

		columnBitmasks.put("addressProofId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Address _escapedModel;

}