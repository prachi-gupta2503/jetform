/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.IDAMFailedTransaction;
import com.adjecti.pis.liferay.model.IDAMFailedTransactionModel;
import com.adjecti.pis.liferay.model.IDAMFailedTransactionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the IDAMFailedTransaction service. Represents a row in the &quot;pis_IDAMFailedTransaction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>IDAMFailedTransactionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IDAMFailedTransactionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IDAMFailedTransactionImpl
 * @generated
 */
@JSON(strict = true)
public class IDAMFailedTransactionModelImpl
	extends BaseModelImpl<IDAMFailedTransaction>
	implements IDAMFailedTransactionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a idam failed transaction model instance should use the <code>IDAMFailedTransaction</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_IDAMFailedTransaction";

	public static final Object[][] TABLE_COLUMNS = {
		{"idamFailedTransactionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"employeeId", Types.BIGINT},
		{"classId", Types.BIGINT}, {"className", Types.VARCHAR},
		{"idamUrl", Types.VARCHAR}, {"attribute", Types.VARCHAR},
		{"oldValue", Types.VARCHAR}, {"newValue", Types.VARCHAR},
		{"error", Types.VARCHAR}, {"firedon", Types.TIMESTAMP},
		{"deleted", Types.BOOLEAN}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idamFailedTransactionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idamUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attribute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oldValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("error", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firedon", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_IDAMFailedTransaction (idamFailedTransactionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,classId LONG,className VARCHAR(75) null,idamUrl VARCHAR(75) null,attribute VARCHAR(75) null,oldValue VARCHAR(75) null,newValue VARCHAR(75) null,error VARCHAR(75) null,firedon DATE null,deleted BOOLEAN,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_IDAMFailedTransaction";

	public static final String ORDER_BY_JPQL =
		" ORDER BY idamFailedTransaction.idamFailedTransactionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_IDAMFailedTransaction.idamFailedTransactionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long IDAMFAILEDTRANSACTIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static IDAMFailedTransaction toModel(
		IDAMFailedTransactionSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		IDAMFailedTransaction model = new IDAMFailedTransactionImpl();

		model.setIdamFailedTransactionId(
			soapModel.getIdamFailedTransactionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setClassId(soapModel.getClassId());
		model.setClassName(soapModel.getClassName());
		model.setIdamUrl(soapModel.getIdamUrl());
		model.setAttribute(soapModel.getAttribute());
		model.setOldValue(soapModel.getOldValue());
		model.setNewValue(soapModel.getNewValue());
		model.setError(soapModel.getError());
		model.setFiredon(soapModel.getFiredon());
		model.setDeleted(soapModel.isDeleted());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<IDAMFailedTransaction> toModels(
		IDAMFailedTransactionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<IDAMFailedTransaction> models =
			new ArrayList<IDAMFailedTransaction>(soapModels.length);

		for (IDAMFailedTransactionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public IDAMFailedTransactionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idamFailedTransactionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdamFailedTransactionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idamFailedTransactionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IDAMFailedTransaction.class;
	}

	@Override
	public String getModelClassName() {
		return IDAMFailedTransaction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<IDAMFailedTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<IDAMFailedTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IDAMFailedTransaction, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((IDAMFailedTransaction)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<IDAMFailedTransaction, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<IDAMFailedTransaction, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(IDAMFailedTransaction)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<IDAMFailedTransaction, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<IDAMFailedTransaction, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, IDAMFailedTransaction>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			IDAMFailedTransaction.class.getClassLoader(),
			IDAMFailedTransaction.class, ModelWrapper.class);

		try {
			Constructor<IDAMFailedTransaction> constructor =
				(Constructor<IDAMFailedTransaction>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<IDAMFailedTransaction, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<IDAMFailedTransaction, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<IDAMFailedTransaction, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<IDAMFailedTransaction, Object>>();
		Map<String, BiConsumer<IDAMFailedTransaction, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<IDAMFailedTransaction, ?>>();

		attributeGetterFunctions.put(
			"idamFailedTransactionId",
			IDAMFailedTransaction::getIdamFailedTransactionId);
		attributeSetterBiConsumers.put(
			"idamFailedTransactionId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setIdamFailedTransactionId);
		attributeGetterFunctions.put(
			"groupId", IDAMFailedTransaction::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setGroupId);
		attributeGetterFunctions.put(
			"companyId", IDAMFailedTransaction::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setCompanyId);
		attributeGetterFunctions.put(
			"userId", IDAMFailedTransaction::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setUserId);
		attributeGetterFunctions.put(
			"userName", IDAMFailedTransaction::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setUserName);
		attributeGetterFunctions.put(
			"createDate", IDAMFailedTransaction::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<IDAMFailedTransaction, Date>)
				IDAMFailedTransaction::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", IDAMFailedTransaction::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<IDAMFailedTransaction, Date>)
				IDAMFailedTransaction::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", IDAMFailedTransaction::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setEmployeeId);
		attributeGetterFunctions.put(
			"classId", IDAMFailedTransaction::getClassId);
		attributeSetterBiConsumers.put(
			"classId",
			(BiConsumer<IDAMFailedTransaction, Long>)
				IDAMFailedTransaction::setClassId);
		attributeGetterFunctions.put(
			"className", IDAMFailedTransaction::getClassName);
		attributeSetterBiConsumers.put(
			"className",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setClassName);
		attributeGetterFunctions.put(
			"idamUrl", IDAMFailedTransaction::getIdamUrl);
		attributeSetterBiConsumers.put(
			"idamUrl",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setIdamUrl);
		attributeGetterFunctions.put(
			"attribute", IDAMFailedTransaction::getAttribute);
		attributeSetterBiConsumers.put(
			"attribute",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setAttribute);
		attributeGetterFunctions.put(
			"oldValue", IDAMFailedTransaction::getOldValue);
		attributeSetterBiConsumers.put(
			"oldValue",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setOldValue);
		attributeGetterFunctions.put(
			"newValue", IDAMFailedTransaction::getNewValue);
		attributeSetterBiConsumers.put(
			"newValue",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setNewValue);
		attributeGetterFunctions.put("error", IDAMFailedTransaction::getError);
		attributeSetterBiConsumers.put(
			"error",
			(BiConsumer<IDAMFailedTransaction, String>)
				IDAMFailedTransaction::setError);
		attributeGetterFunctions.put(
			"firedon", IDAMFailedTransaction::getFiredon);
		attributeSetterBiConsumers.put(
			"firedon",
			(BiConsumer<IDAMFailedTransaction, Date>)
				IDAMFailedTransaction::setFiredon);
		attributeGetterFunctions.put(
			"deleted", IDAMFailedTransaction::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<IDAMFailedTransaction, Boolean>)
				IDAMFailedTransaction::setDeleted);
		attributeGetterFunctions.put(
			"status", IDAMFailedTransaction::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<IDAMFailedTransaction, Integer>)
				IDAMFailedTransaction::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getIdamFailedTransactionId() {
		return _idamFailedTransactionId;
	}

	@Override
	public void setIdamFailedTransactionId(long idamFailedTransactionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamFailedTransactionId = idamFailedTransactionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classId = classId;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_className = className;
	}

	@JSON
	@Override
	public String getIdamUrl() {
		if (_idamUrl == null) {
			return "";
		}
		else {
			return _idamUrl;
		}
	}

	@Override
	public void setIdamUrl(String idamUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamUrl = idamUrl;
	}

	@JSON
	@Override
	public String getAttribute() {
		if (_attribute == null) {
			return "";
		}
		else {
			return _attribute;
		}
	}

	@Override
	public void setAttribute(String attribute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attribute = attribute;
	}

	@JSON
	@Override
	public String getOldValue() {
		if (_oldValue == null) {
			return "";
		}
		else {
			return _oldValue;
		}
	}

	@Override
	public void setOldValue(String oldValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oldValue = oldValue;
	}

	@JSON
	@Override
	public String getNewValue() {
		if (_newValue == null) {
			return "";
		}
		else {
			return _newValue;
		}
	}

	@Override
	public void setNewValue(String newValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newValue = newValue;
	}

	@JSON
	@Override
	public String getError() {
		if (_error == null) {
			return "";
		}
		else {
			return _error;
		}
	}

	@Override
	public void setError(String error) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_error = error;
	}

	@JSON
	@Override
	public Date getFiredon() {
		return _firedon;
	}

	@Override
	public void setFiredon(Date firedon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firedon = firedon;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), IDAMFailedTransaction.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IDAMFailedTransaction toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, IDAMFailedTransaction>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IDAMFailedTransactionImpl idamFailedTransactionImpl =
			new IDAMFailedTransactionImpl();

		idamFailedTransactionImpl.setIdamFailedTransactionId(
			getIdamFailedTransactionId());
		idamFailedTransactionImpl.setGroupId(getGroupId());
		idamFailedTransactionImpl.setCompanyId(getCompanyId());
		idamFailedTransactionImpl.setUserId(getUserId());
		idamFailedTransactionImpl.setUserName(getUserName());
		idamFailedTransactionImpl.setCreateDate(getCreateDate());
		idamFailedTransactionImpl.setModifiedDate(getModifiedDate());
		idamFailedTransactionImpl.setEmployeeId(getEmployeeId());
		idamFailedTransactionImpl.setClassId(getClassId());
		idamFailedTransactionImpl.setClassName(getClassName());
		idamFailedTransactionImpl.setIdamUrl(getIdamUrl());
		idamFailedTransactionImpl.setAttribute(getAttribute());
		idamFailedTransactionImpl.setOldValue(getOldValue());
		idamFailedTransactionImpl.setNewValue(getNewValue());
		idamFailedTransactionImpl.setError(getError());
		idamFailedTransactionImpl.setFiredon(getFiredon());
		idamFailedTransactionImpl.setDeleted(isDeleted());
		idamFailedTransactionImpl.setStatus(getStatus());

		idamFailedTransactionImpl.resetOriginalValues();

		return idamFailedTransactionImpl;
	}

	@Override
	public int compareTo(IDAMFailedTransaction idamFailedTransaction) {
		int value = 0;

		if (getIdamFailedTransactionId() <
				idamFailedTransaction.getIdamFailedTransactionId()) {

			value = -1;
		}
		else if (getIdamFailedTransactionId() >
					idamFailedTransaction.getIdamFailedTransactionId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof IDAMFailedTransaction)) {
			return false;
		}

		IDAMFailedTransaction idamFailedTransaction =
			(IDAMFailedTransaction)object;

		long primaryKey = idamFailedTransaction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<IDAMFailedTransaction> toCacheModel() {
		IDAMFailedTransactionCacheModel idamFailedTransactionCacheModel =
			new IDAMFailedTransactionCacheModel();

		idamFailedTransactionCacheModel.idamFailedTransactionId =
			getIdamFailedTransactionId();

		idamFailedTransactionCacheModel.groupId = getGroupId();

		idamFailedTransactionCacheModel.companyId = getCompanyId();

		idamFailedTransactionCacheModel.userId = getUserId();

		idamFailedTransactionCacheModel.userName = getUserName();

		String userName = idamFailedTransactionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			idamFailedTransactionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			idamFailedTransactionCacheModel.createDate = createDate.getTime();
		}
		else {
			idamFailedTransactionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			idamFailedTransactionCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			idamFailedTransactionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		idamFailedTransactionCacheModel.employeeId = getEmployeeId();

		idamFailedTransactionCacheModel.classId = getClassId();

		idamFailedTransactionCacheModel.className = getClassName();

		String className = idamFailedTransactionCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			idamFailedTransactionCacheModel.className = null;
		}

		idamFailedTransactionCacheModel.idamUrl = getIdamUrl();

		String idamUrl = idamFailedTransactionCacheModel.idamUrl;

		if ((idamUrl != null) && (idamUrl.length() == 0)) {
			idamFailedTransactionCacheModel.idamUrl = null;
		}

		idamFailedTransactionCacheModel.attribute = getAttribute();

		String attribute = idamFailedTransactionCacheModel.attribute;

		if ((attribute != null) && (attribute.length() == 0)) {
			idamFailedTransactionCacheModel.attribute = null;
		}

		idamFailedTransactionCacheModel.oldValue = getOldValue();

		String oldValue = idamFailedTransactionCacheModel.oldValue;

		if ((oldValue != null) && (oldValue.length() == 0)) {
			idamFailedTransactionCacheModel.oldValue = null;
		}

		idamFailedTransactionCacheModel.newValue = getNewValue();

		String newValue = idamFailedTransactionCacheModel.newValue;

		if ((newValue != null) && (newValue.length() == 0)) {
			idamFailedTransactionCacheModel.newValue = null;
		}

		idamFailedTransactionCacheModel.error = getError();

		String error = idamFailedTransactionCacheModel.error;

		if ((error != null) && (error.length() == 0)) {
			idamFailedTransactionCacheModel.error = null;
		}

		Date firedon = getFiredon();

		if (firedon != null) {
			idamFailedTransactionCacheModel.firedon = firedon.getTime();
		}
		else {
			idamFailedTransactionCacheModel.firedon = Long.MIN_VALUE;
		}

		idamFailedTransactionCacheModel.deleted = isDeleted();

		idamFailedTransactionCacheModel.status = getStatus();

		return idamFailedTransactionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<IDAMFailedTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<IDAMFailedTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IDAMFailedTransaction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((IDAMFailedTransaction)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<IDAMFailedTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<IDAMFailedTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IDAMFailedTransaction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((IDAMFailedTransaction)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, IDAMFailedTransaction>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _idamFailedTransactionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private long _classId;
	private String _className;
	private String _idamUrl;
	private String _attribute;
	private String _oldValue;
	private String _newValue;
	private String _error;
	private Date _firedon;
	private boolean _deleted;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		Function<IDAMFailedTransaction, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((IDAMFailedTransaction)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"idamFailedTransactionId", _idamFailedTransactionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("classId", _classId);
		_columnOriginalValues.put("className", _className);
		_columnOriginalValues.put("idamUrl", _idamUrl);
		_columnOriginalValues.put("attribute", _attribute);
		_columnOriginalValues.put("oldValue", _oldValue);
		_columnOriginalValues.put("newValue", _newValue);
		_columnOriginalValues.put("error", _error);
		_columnOriginalValues.put("firedon", _firedon);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idamFailedTransactionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("employeeId", 128L);

		columnBitmasks.put("classId", 256L);

		columnBitmasks.put("className", 512L);

		columnBitmasks.put("idamUrl", 1024L);

		columnBitmasks.put("attribute", 2048L);

		columnBitmasks.put("oldValue", 4096L);

		columnBitmasks.put("newValue", 8192L);

		columnBitmasks.put("error", 16384L);

		columnBitmasks.put("firedon", 32768L);

		columnBitmasks.put("deleted", 65536L);

		columnBitmasks.put("status", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private IDAMFailedTransaction _escapedModel;

}