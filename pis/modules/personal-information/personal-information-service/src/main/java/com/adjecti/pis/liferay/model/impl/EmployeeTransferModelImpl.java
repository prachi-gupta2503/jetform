/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeTransfer;
import com.adjecti.pis.liferay.model.EmployeeTransferModel;
import com.adjecti.pis.liferay.model.EmployeeTransferSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeTransfer service. Represents a row in the &quot;pis_EmployeeTransfer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeTransferModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeTransferImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeTransferImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeTransferModelImpl
	extends BaseModelImpl<EmployeeTransfer> implements EmployeeTransferModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee transfer model instance should use the <code>EmployeeTransfer</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeTransfer";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeTransferId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"personalNo", Types.VARCHAR}, {"transferDate", Types.TIMESTAMP},
		{"designationId", Types.BIGINT}, {"employeeId", Types.BIGINT},
		{"fromOrganizationId", Types.BIGINT}, {"gradeId", Types.BIGINT},
		{"gradeModeId", Types.BIGINT}, {"toOrganizationId", Types.BIGINT},
		{"transferLetterId", Types.BIGINT}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeTransferId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("personalNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromOrganizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gradeModeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("toOrganizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("transferLetterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeTransfer (employeeTransferId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,personalNo VARCHAR(75) null,transferDate DATE null,designationId LONG,employeeId LONG,fromOrganizationId LONG,gradeId LONG,gradeModeId LONG,toOrganizationId LONG,transferLetterId LONG,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeTransfer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeTransfer.employeeTransferId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeTransfer.employeeTransferId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FROMORGANIZATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GRADEMODEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TOORGANIZATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEETRANSFERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeTransfer toModel(EmployeeTransferSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeTransfer model = new EmployeeTransferImpl();

		model.setEmployeeTransferId(soapModel.getEmployeeTransferId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setPersonalNo(soapModel.getPersonalNo());
		model.setTransferDate(soapModel.getTransferDate());
		model.setDesignationId(soapModel.getDesignationId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setFromOrganizationId(soapModel.getFromOrganizationId());
		model.setGradeId(soapModel.getGradeId());
		model.setGradeModeId(soapModel.getGradeModeId());
		model.setToOrganizationId(soapModel.getToOrganizationId());
		model.setTransferLetterId(soapModel.getTransferLetterId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeTransfer> toModels(
		EmployeeTransferSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeTransfer> models = new ArrayList<EmployeeTransfer>(
			soapModels.length);

		for (EmployeeTransferSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeTransferModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeTransferId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeTransferId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeTransferId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeTransfer.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeTransfer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeTransfer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeTransfer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeTransfer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeTransfer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeTransfer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeTransfer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeTransfer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeTransfer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeTransfer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeTransfer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeTransfer.class.getClassLoader(), EmployeeTransfer.class,
			ModelWrapper.class);

		try {
			Constructor<EmployeeTransfer> constructor =
				(Constructor<EmployeeTransfer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeTransfer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeTransfer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeTransfer, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EmployeeTransfer, Object>>();
		Map<String, BiConsumer<EmployeeTransfer, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EmployeeTransfer, ?>>();

		attributeGetterFunctions.put(
			"employeeTransferId", EmployeeTransfer::getEmployeeTransferId);
		attributeSetterBiConsumers.put(
			"employeeTransferId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setEmployeeTransferId);
		attributeGetterFunctions.put("groupId", EmployeeTransfer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeTransfer, Long>)EmployeeTransfer::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeTransfer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeTransfer, Long>)EmployeeTransfer::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeTransfer::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeTransfer, Long>)EmployeeTransfer::setUserId);
		attributeGetterFunctions.put("userName", EmployeeTransfer::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeTransfer, String>)
				EmployeeTransfer::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeTransfer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeTransfer, Date>)
				EmployeeTransfer::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeTransfer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeTransfer, Date>)
				EmployeeTransfer::setModifiedDate);
		attributeGetterFunctions.put("active", EmployeeTransfer::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<EmployeeTransfer, Boolean>)EmployeeTransfer::setActive);
		attributeGetterFunctions.put(
			"personalNo", EmployeeTransfer::getPersonalNo);
		attributeSetterBiConsumers.put(
			"personalNo",
			(BiConsumer<EmployeeTransfer, String>)
				EmployeeTransfer::setPersonalNo);
		attributeGetterFunctions.put(
			"transferDate", EmployeeTransfer::getTransferDate);
		attributeSetterBiConsumers.put(
			"transferDate",
			(BiConsumer<EmployeeTransfer, Date>)
				EmployeeTransfer::setTransferDate);
		attributeGetterFunctions.put(
			"designationId", EmployeeTransfer::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setDesignationId);
		attributeGetterFunctions.put(
			"employeeId", EmployeeTransfer::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setEmployeeId);
		attributeGetterFunctions.put(
			"fromOrganizationId", EmployeeTransfer::getFromOrganizationId);
		attributeSetterBiConsumers.put(
			"fromOrganizationId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setFromOrganizationId);
		attributeGetterFunctions.put("gradeId", EmployeeTransfer::getGradeId);
		attributeSetterBiConsumers.put(
			"gradeId",
			(BiConsumer<EmployeeTransfer, Long>)EmployeeTransfer::setGradeId);
		attributeGetterFunctions.put(
			"gradeModeId", EmployeeTransfer::getGradeModeId);
		attributeSetterBiConsumers.put(
			"gradeModeId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setGradeModeId);
		attributeGetterFunctions.put(
			"toOrganizationId", EmployeeTransfer::getToOrganizationId);
		attributeSetterBiConsumers.put(
			"toOrganizationId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setToOrganizationId);
		attributeGetterFunctions.put(
			"transferLetterId", EmployeeTransfer::getTransferLetterId);
		attributeSetterBiConsumers.put(
			"transferLetterId",
			(BiConsumer<EmployeeTransfer, Long>)
				EmployeeTransfer::setTransferLetterId);
		attributeGetterFunctions.put("status", EmployeeTransfer::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeTransfer, Integer>)EmployeeTransfer::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeTransferId() {
		return _employeeTransferId;
	}

	@Override
	public void setEmployeeTransferId(long employeeTransferId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeTransferId = employeeTransferId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public String getPersonalNo() {
		if (_personalNo == null) {
			return "";
		}
		else {
			return _personalNo;
		}
	}

	@Override
	public void setPersonalNo(String personalNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalNo = personalNo;
	}

	@JSON
	@Override
	public Date getTransferDate() {
		return _transferDate;
	}

	@Override
	public void setTransferDate(Date transferDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferDate = transferDate;
	}

	@JSON
	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getFromOrganizationId() {
		return _fromOrganizationId;
	}

	@Override
	public void setFromOrganizationId(long fromOrganizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromOrganizationId = fromOrganizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFromOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fromOrganizationId"));
	}

	@JSON
	@Override
	public long getGradeId() {
		return _gradeId;
	}

	@Override
	public void setGradeId(long gradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeId = gradeId;
	}

	@JSON
	@Override
	public long getGradeModeId() {
		return _gradeModeId;
	}

	@Override
	public void setGradeModeId(long gradeModeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeModeId = gradeModeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGradeModeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("gradeModeId"));
	}

	@JSON
	@Override
	public long getToOrganizationId() {
		return _toOrganizationId;
	}

	@Override
	public void setToOrganizationId(long toOrganizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toOrganizationId = toOrganizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalToOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("toOrganizationId"));
	}

	@JSON
	@Override
	public long getTransferLetterId() {
		return _transferLetterId;
	}

	@Override
	public void setTransferLetterId(long transferLetterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferLetterId = transferLetterId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeTransfer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeTransfer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeTransfer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeTransferImpl employeeTransferImpl = new EmployeeTransferImpl();

		employeeTransferImpl.setEmployeeTransferId(getEmployeeTransferId());
		employeeTransferImpl.setGroupId(getGroupId());
		employeeTransferImpl.setCompanyId(getCompanyId());
		employeeTransferImpl.setUserId(getUserId());
		employeeTransferImpl.setUserName(getUserName());
		employeeTransferImpl.setCreateDate(getCreateDate());
		employeeTransferImpl.setModifiedDate(getModifiedDate());
		employeeTransferImpl.setActive(isActive());
		employeeTransferImpl.setPersonalNo(getPersonalNo());
		employeeTransferImpl.setTransferDate(getTransferDate());
		employeeTransferImpl.setDesignationId(getDesignationId());
		employeeTransferImpl.setEmployeeId(getEmployeeId());
		employeeTransferImpl.setFromOrganizationId(getFromOrganizationId());
		employeeTransferImpl.setGradeId(getGradeId());
		employeeTransferImpl.setGradeModeId(getGradeModeId());
		employeeTransferImpl.setToOrganizationId(getToOrganizationId());
		employeeTransferImpl.setTransferLetterId(getTransferLetterId());
		employeeTransferImpl.setStatus(getStatus());

		employeeTransferImpl.resetOriginalValues();

		return employeeTransferImpl;
	}

	@Override
	public int compareTo(EmployeeTransfer employeeTransfer) {
		long primaryKey = employeeTransfer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeTransfer)) {
			return false;
		}

		EmployeeTransfer employeeTransfer = (EmployeeTransfer)object;

		long primaryKey = employeeTransfer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeTransfer> toCacheModel() {
		EmployeeTransferCacheModel employeeTransferCacheModel =
			new EmployeeTransferCacheModel();

		employeeTransferCacheModel.employeeTransferId = getEmployeeTransferId();

		employeeTransferCacheModel.groupId = getGroupId();

		employeeTransferCacheModel.companyId = getCompanyId();

		employeeTransferCacheModel.userId = getUserId();

		employeeTransferCacheModel.userName = getUserName();

		String userName = employeeTransferCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeTransferCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeTransferCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeTransferCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeTransferCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeTransferCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeTransferCacheModel.active = isActive();

		employeeTransferCacheModel.personalNo = getPersonalNo();

		String personalNo = employeeTransferCacheModel.personalNo;

		if ((personalNo != null) && (personalNo.length() == 0)) {
			employeeTransferCacheModel.personalNo = null;
		}

		Date transferDate = getTransferDate();

		if (transferDate != null) {
			employeeTransferCacheModel.transferDate = transferDate.getTime();
		}
		else {
			employeeTransferCacheModel.transferDate = Long.MIN_VALUE;
		}

		employeeTransferCacheModel.designationId = getDesignationId();

		employeeTransferCacheModel.employeeId = getEmployeeId();

		employeeTransferCacheModel.fromOrganizationId = getFromOrganizationId();

		employeeTransferCacheModel.gradeId = getGradeId();

		employeeTransferCacheModel.gradeModeId = getGradeModeId();

		employeeTransferCacheModel.toOrganizationId = getToOrganizationId();

		employeeTransferCacheModel.transferLetterId = getTransferLetterId();

		employeeTransferCacheModel.status = getStatus();

		return employeeTransferCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeTransfer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeTransfer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeTransfer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EmployeeTransfer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeTransfer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeTransfer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeTransfer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmployeeTransfer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeTransfer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeTransferId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private String _personalNo;
	private Date _transferDate;
	private long _designationId;
	private long _employeeId;
	private long _fromOrganizationId;
	private long _gradeId;
	private long _gradeModeId;
	private long _toOrganizationId;
	private long _transferLetterId;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeTransfer, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeTransfer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeTransferId", _employeeTransferId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("personalNo", _personalNo);
		_columnOriginalValues.put("transferDate", _transferDate);
		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("fromOrganizationId", _fromOrganizationId);
		_columnOriginalValues.put("gradeId", _gradeId);
		_columnOriginalValues.put("gradeModeId", _gradeModeId);
		_columnOriginalValues.put("toOrganizationId", _toOrganizationId);
		_columnOriginalValues.put("transferLetterId", _transferLetterId);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeTransferId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("personalNo", 256L);

		columnBitmasks.put("transferDate", 512L);

		columnBitmasks.put("designationId", 1024L);

		columnBitmasks.put("employeeId", 2048L);

		columnBitmasks.put("fromOrganizationId", 4096L);

		columnBitmasks.put("gradeId", 8192L);

		columnBitmasks.put("gradeModeId", 16384L);

		columnBitmasks.put("toOrganizationId", 32768L);

		columnBitmasks.put("transferLetterId", 65536L);

		columnBitmasks.put("status", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeTransfer _escapedModel;

}