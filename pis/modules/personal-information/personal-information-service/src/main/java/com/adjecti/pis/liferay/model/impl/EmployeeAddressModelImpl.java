/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeeAddress;
import com.adjecti.pis.liferay.model.EmployeeAddressModel;
import com.adjecti.pis.liferay.model.EmployeeAddressSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeAddress service. Represents a row in the &quot;pis_EmployeeAddress&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeAddressImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeAddressModelImpl
	extends BaseModelImpl<EmployeeAddress> implements EmployeeAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee address model instance should use the <code>EmployeeAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeeAddress";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeAddressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"fromDate", Types.TIMESTAMP}, {"permanent", Types.BOOLEAN},
		{"toDate", Types.TIMESTAMP}, {"addressLine1", Types.VARCHAR},
		{"addressLine2", Types.VARCHAR}, {"addressLine3", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"pinCode", Types.VARCHAR},
		{"countryId", Types.BIGINT}, {"stateId", Types.BIGINT},
		{"accomodationTypeId", Types.BIGINT}, {"districtId", Types.BIGINT},
		{"joiningProcessId", Types.BIGINT}, {"addressProofId", Types.BIGINT},
		{"status", Types.INTEGER}, {"addressId", Types.BIGINT},
		{"employeeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permanent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressLine1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pinCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accomodationTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("districtId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addressProofId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeeAddress (employeeAddressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,fromDate DATE null,permanent BOOLEAN,toDate DATE null,addressLine1 VARCHAR(75) null,addressLine2 VARCHAR(75) null,addressLine3 VARCHAR(75) null,city VARCHAR(75) null,pinCode VARCHAR(75) null,countryId LONG,stateId LONG,accomodationTypeId LONG,districtId LONG,joiningProcessId LONG,addressProofId LONG,status INTEGER,addressId LONG,employeeId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeeAddress";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeAddress.employeeAddressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeeAddress.employeeAddressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ACCOMODATIONTYPEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DISTRICTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEADDRESSID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeeAddress toModel(EmployeeAddressSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeAddress model = new EmployeeAddressImpl();

		model.setEmployeeAddressId(soapModel.getEmployeeAddressId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setFromDate(soapModel.getFromDate());
		model.setPermanent(soapModel.isPermanent());
		model.setToDate(soapModel.getToDate());
		model.setAddressLine1(soapModel.getAddressLine1());
		model.setAddressLine2(soapModel.getAddressLine2());
		model.setAddressLine3(soapModel.getAddressLine3());
		model.setCity(soapModel.getCity());
		model.setPinCode(soapModel.getPinCode());
		model.setCountryId(soapModel.getCountryId());
		model.setStateId(soapModel.getStateId());
		model.setAccomodationTypeId(soapModel.getAccomodationTypeId());
		model.setDistrictId(soapModel.getDistrictId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setAddressProofId(soapModel.getAddressProofId());
		model.setStatus(soapModel.getStatus());
		model.setAddressId(soapModel.getAddressId());
		model.setEmployeeId(soapModel.getEmployeeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeeAddress> toModels(
		EmployeeAddressSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeeAddress> models = new ArrayList<EmployeeAddress>(
			soapModels.length);

		for (EmployeeAddressSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeAddress.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeAddress, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeAddress, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeAddress, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeAddress, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeeAddress>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeeAddress.class.getClassLoader(), EmployeeAddress.class,
			ModelWrapper.class);

		try {
			Constructor<EmployeeAddress> constructor =
				(Constructor<EmployeeAddress>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeeAddress, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeAddress, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeAddress, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EmployeeAddress, Object>>();
		Map<String, BiConsumer<EmployeeAddress, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EmployeeAddress, ?>>();

		attributeGetterFunctions.put(
			"employeeAddressId", EmployeeAddress::getEmployeeAddressId);
		attributeSetterBiConsumers.put(
			"employeeAddressId",
			(BiConsumer<EmployeeAddress, Long>)
				EmployeeAddress::setEmployeeAddressId);
		attributeGetterFunctions.put("groupId", EmployeeAddress::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeAddress::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeAddress::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setUserId);
		attributeGetterFunctions.put("userName", EmployeeAddress::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeeAddress, String>)EmployeeAddress::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeeAddress::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeAddress, Date>)EmployeeAddress::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeAddress::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeAddress, Date>)
				EmployeeAddress::setModifiedDate);
		attributeGetterFunctions.put("active", EmployeeAddress::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<EmployeeAddress, Boolean>)EmployeeAddress::setActive);
		attributeGetterFunctions.put("fromDate", EmployeeAddress::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate",
			(BiConsumer<EmployeeAddress, Date>)EmployeeAddress::setFromDate);
		attributeGetterFunctions.put(
			"permanent", EmployeeAddress::getPermanent);
		attributeSetterBiConsumers.put(
			"permanent",
			(BiConsumer<EmployeeAddress, Boolean>)
				EmployeeAddress::setPermanent);
		attributeGetterFunctions.put("toDate", EmployeeAddress::getToDate);
		attributeSetterBiConsumers.put(
			"toDate",
			(BiConsumer<EmployeeAddress, Date>)EmployeeAddress::setToDate);
		attributeGetterFunctions.put(
			"addressLine1", EmployeeAddress::getAddressLine1);
		attributeSetterBiConsumers.put(
			"addressLine1",
			(BiConsumer<EmployeeAddress, String>)
				EmployeeAddress::setAddressLine1);
		attributeGetterFunctions.put(
			"addressLine2", EmployeeAddress::getAddressLine2);
		attributeSetterBiConsumers.put(
			"addressLine2",
			(BiConsumer<EmployeeAddress, String>)
				EmployeeAddress::setAddressLine2);
		attributeGetterFunctions.put(
			"addressLine3", EmployeeAddress::getAddressLine3);
		attributeSetterBiConsumers.put(
			"addressLine3",
			(BiConsumer<EmployeeAddress, String>)
				EmployeeAddress::setAddressLine3);
		attributeGetterFunctions.put("city", EmployeeAddress::getCity);
		attributeSetterBiConsumers.put(
			"city",
			(BiConsumer<EmployeeAddress, String>)EmployeeAddress::setCity);
		attributeGetterFunctions.put("pinCode", EmployeeAddress::getPinCode);
		attributeSetterBiConsumers.put(
			"pinCode",
			(BiConsumer<EmployeeAddress, String>)EmployeeAddress::setPinCode);
		attributeGetterFunctions.put(
			"countryId", EmployeeAddress::getCountryId);
		attributeSetterBiConsumers.put(
			"countryId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setCountryId);
		attributeGetterFunctions.put("stateId", EmployeeAddress::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setStateId);
		attributeGetterFunctions.put(
			"accomodationTypeId", EmployeeAddress::getAccomodationTypeId);
		attributeSetterBiConsumers.put(
			"accomodationTypeId",
			(BiConsumer<EmployeeAddress, Long>)
				EmployeeAddress::setAccomodationTypeId);
		attributeGetterFunctions.put(
			"districtId", EmployeeAddress::getDistrictId);
		attributeSetterBiConsumers.put(
			"districtId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setDistrictId);
		attributeGetterFunctions.put(
			"joiningProcessId", EmployeeAddress::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<EmployeeAddress, Long>)
				EmployeeAddress::setJoiningProcessId);
		attributeGetterFunctions.put(
			"addressProofId", EmployeeAddress::getAddressProofId);
		attributeSetterBiConsumers.put(
			"addressProofId",
			(BiConsumer<EmployeeAddress, Long>)
				EmployeeAddress::setAddressProofId);
		attributeGetterFunctions.put("status", EmployeeAddress::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeeAddress, Integer>)EmployeeAddress::setStatus);
		attributeGetterFunctions.put(
			"addressId", EmployeeAddress::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setAddressId);
		attributeGetterFunctions.put(
			"employeeId", EmployeeAddress::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeAddress, Long>)EmployeeAddress::setEmployeeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeeAddressId() {
		return _employeeAddressId;
	}

	@Override
	public void setEmployeeAddressId(long employeeAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeAddressId = employeeAddressId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDate = fromDate;
	}

	@JSON
	@Override
	public boolean getPermanent() {
		return _permanent;
	}

	@JSON
	@Override
	public boolean isPermanent() {
		return _permanent;
	}

	@Override
	public void setPermanent(boolean permanent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanent = permanent;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toDate = toDate;
	}

	@JSON
	@Override
	public String getAddressLine1() {
		if (_addressLine1 == null) {
			return "";
		}
		else {
			return _addressLine1;
		}
	}

	@Override
	public void setAddressLine1(String addressLine1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine1 = addressLine1;
	}

	@JSON
	@Override
	public String getAddressLine2() {
		if (_addressLine2 == null) {
			return "";
		}
		else {
			return _addressLine2;
		}
	}

	@Override
	public void setAddressLine2(String addressLine2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine2 = addressLine2;
	}

	@JSON
	@Override
	public String getAddressLine3() {
		if (_addressLine3 == null) {
			return "";
		}
		else {
			return _addressLine3;
		}
	}

	@Override
	public void setAddressLine3(String addressLine3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressLine3 = addressLine3;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getPinCode() {
		if (_pinCode == null) {
			return "";
		}
		else {
			return _pinCode;
		}
	}

	@Override
	public void setPinCode(String pinCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pinCode = pinCode;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryId = countryId;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStateId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("stateId"));
	}

	@JSON
	@Override
	public long getAccomodationTypeId() {
		return _accomodationTypeId;
	}

	@Override
	public void setAccomodationTypeId(long accomodationTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accomodationTypeId = accomodationTypeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAccomodationTypeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("accomodationTypeId"));
	}

	@JSON
	@Override
	public long getDistrictId() {
		return _districtId;
	}

	@Override
	public void setDistrictId(long districtId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtId = districtId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistrictId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("districtId"));
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	@JSON
	@Override
	public long getAddressProofId() {
		return _addressProofId;
	}

	@Override
	public void setAddressProofId(long addressProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressProofId = addressProofId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressId = addressId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeAddress.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeAddressImpl employeeAddressImpl = new EmployeeAddressImpl();

		employeeAddressImpl.setEmployeeAddressId(getEmployeeAddressId());
		employeeAddressImpl.setGroupId(getGroupId());
		employeeAddressImpl.setCompanyId(getCompanyId());
		employeeAddressImpl.setUserId(getUserId());
		employeeAddressImpl.setUserName(getUserName());
		employeeAddressImpl.setCreateDate(getCreateDate());
		employeeAddressImpl.setModifiedDate(getModifiedDate());
		employeeAddressImpl.setActive(isActive());
		employeeAddressImpl.setFromDate(getFromDate());
		employeeAddressImpl.setPermanent(isPermanent());
		employeeAddressImpl.setToDate(getToDate());
		employeeAddressImpl.setAddressLine1(getAddressLine1());
		employeeAddressImpl.setAddressLine2(getAddressLine2());
		employeeAddressImpl.setAddressLine3(getAddressLine3());
		employeeAddressImpl.setCity(getCity());
		employeeAddressImpl.setPinCode(getPinCode());
		employeeAddressImpl.setCountryId(getCountryId());
		employeeAddressImpl.setStateId(getStateId());
		employeeAddressImpl.setAccomodationTypeId(getAccomodationTypeId());
		employeeAddressImpl.setDistrictId(getDistrictId());
		employeeAddressImpl.setJoiningProcessId(getJoiningProcessId());
		employeeAddressImpl.setAddressProofId(getAddressProofId());
		employeeAddressImpl.setStatus(getStatus());
		employeeAddressImpl.setAddressId(getAddressId());
		employeeAddressImpl.setEmployeeId(getEmployeeId());

		employeeAddressImpl.resetOriginalValues();

		return employeeAddressImpl;
	}

	@Override
	public int compareTo(EmployeeAddress employeeAddress) {
		long primaryKey = employeeAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeAddress)) {
			return false;
		}

		EmployeeAddress employeeAddress = (EmployeeAddress)object;

		long primaryKey = employeeAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeAddress> toCacheModel() {
		EmployeeAddressCacheModel employeeAddressCacheModel =
			new EmployeeAddressCacheModel();

		employeeAddressCacheModel.employeeAddressId = getEmployeeAddressId();

		employeeAddressCacheModel.groupId = getGroupId();

		employeeAddressCacheModel.companyId = getCompanyId();

		employeeAddressCacheModel.userId = getUserId();

		employeeAddressCacheModel.userName = getUserName();

		String userName = employeeAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeeAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeAddressCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeAddressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeAddressCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeAddressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeAddressCacheModel.active = isActive();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			employeeAddressCacheModel.fromDate = fromDate.getTime();
		}
		else {
			employeeAddressCacheModel.fromDate = Long.MIN_VALUE;
		}

		employeeAddressCacheModel.permanent = isPermanent();

		Date toDate = getToDate();

		if (toDate != null) {
			employeeAddressCacheModel.toDate = toDate.getTime();
		}
		else {
			employeeAddressCacheModel.toDate = Long.MIN_VALUE;
		}

		employeeAddressCacheModel.addressLine1 = getAddressLine1();

		String addressLine1 = employeeAddressCacheModel.addressLine1;

		if ((addressLine1 != null) && (addressLine1.length() == 0)) {
			employeeAddressCacheModel.addressLine1 = null;
		}

		employeeAddressCacheModel.addressLine2 = getAddressLine2();

		String addressLine2 = employeeAddressCacheModel.addressLine2;

		if ((addressLine2 != null) && (addressLine2.length() == 0)) {
			employeeAddressCacheModel.addressLine2 = null;
		}

		employeeAddressCacheModel.addressLine3 = getAddressLine3();

		String addressLine3 = employeeAddressCacheModel.addressLine3;

		if ((addressLine3 != null) && (addressLine3.length() == 0)) {
			employeeAddressCacheModel.addressLine3 = null;
		}

		employeeAddressCacheModel.city = getCity();

		String city = employeeAddressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			employeeAddressCacheModel.city = null;
		}

		employeeAddressCacheModel.pinCode = getPinCode();

		String pinCode = employeeAddressCacheModel.pinCode;

		if ((pinCode != null) && (pinCode.length() == 0)) {
			employeeAddressCacheModel.pinCode = null;
		}

		employeeAddressCacheModel.countryId = getCountryId();

		employeeAddressCacheModel.stateId = getStateId();

		employeeAddressCacheModel.accomodationTypeId = getAccomodationTypeId();

		employeeAddressCacheModel.districtId = getDistrictId();

		employeeAddressCacheModel.joiningProcessId = getJoiningProcessId();

		employeeAddressCacheModel.addressProofId = getAddressProofId();

		employeeAddressCacheModel.status = getStatus();

		employeeAddressCacheModel.addressId = getAddressId();

		employeeAddressCacheModel.employeeId = getEmployeeId();

		return employeeAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EmployeeAddress)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeeAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeeAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmployeeAddress)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeAddress>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeeAddressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private Date _fromDate;
	private boolean _permanent;
	private Date _toDate;
	private String _addressLine1;
	private String _addressLine2;
	private String _addressLine3;
	private String _city;
	private String _pinCode;
	private long _countryId;
	private long _stateId;
	private long _accomodationTypeId;
	private long _districtId;
	private long _joiningProcessId;
	private long _addressProofId;
	private int _status;
	private long _addressId;
	private long _employeeId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmployeeAddress, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeAddressId", _employeeAddressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("fromDate", _fromDate);
		_columnOriginalValues.put("permanent", _permanent);
		_columnOriginalValues.put("toDate", _toDate);
		_columnOriginalValues.put("addressLine1", _addressLine1);
		_columnOriginalValues.put("addressLine2", _addressLine2);
		_columnOriginalValues.put("addressLine3", _addressLine3);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("pinCode", _pinCode);
		_columnOriginalValues.put("countryId", _countryId);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("accomodationTypeId", _accomodationTypeId);
		_columnOriginalValues.put("districtId", _districtId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("addressProofId", _addressProofId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("addressId", _addressId);
		_columnOriginalValues.put("employeeId", _employeeId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeAddressId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("fromDate", 256L);

		columnBitmasks.put("permanent", 512L);

		columnBitmasks.put("toDate", 1024L);

		columnBitmasks.put("addressLine1", 2048L);

		columnBitmasks.put("addressLine2", 4096L);

		columnBitmasks.put("addressLine3", 8192L);

		columnBitmasks.put("city", 16384L);

		columnBitmasks.put("pinCode", 32768L);

		columnBitmasks.put("countryId", 65536L);

		columnBitmasks.put("stateId", 131072L);

		columnBitmasks.put("accomodationTypeId", 262144L);

		columnBitmasks.put("districtId", 524288L);

		columnBitmasks.put("joiningProcessId", 1048576L);

		columnBitmasks.put("addressProofId", 2097152L);

		columnBitmasks.put("status", 4194304L);

		columnBitmasks.put("addressId", 8388608L);

		columnBitmasks.put("employeeId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeAddress _escapedModel;

}