/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.EmployeePermission;
import com.adjecti.pis.liferay.model.EmployeePermissionModel;
import com.adjecti.pis.liferay.model.EmployeePermissionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeePermission service. Represents a row in the &quot;pis_EmployeePermission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeePermissionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeePermissionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeePermissionImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeePermissionModelImpl
	extends BaseModelImpl<EmployeePermission>
	implements EmployeePermissionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee permission model instance should use the <code>EmployeePermission</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_EmployeePermission";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeePermissionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"idamUser", Types.BOOLEAN},
		{"digitalSigning", Types.BOOLEAN}, {"pisAccess", Types.BOOLEAN},
		{"emailAccess", Types.BOOLEAN}, {"eGovAccess", Types.BOOLEAN},
		{"idamUserCreated", Types.BOOLEAN}, {"userCreated", Types.BOOLEAN},
		{"employeeCreated", Types.BOOLEAN}, {"firstName", Types.VARCHAR},
		{"personalNo", Types.BIGINT}, {"lastName", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"designationId", Types.BIGINT},
		{"employeeId", Types.BIGINT}, {"joiningProcessId", Types.BIGINT},
		{"singleUserOnboardingId", Types.BIGINT},
		{"registrationRequestId", Types.BIGINT}, {"form", Types.VARCHAR},
		{"currentState", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeePermissionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("idamUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("digitalSigning", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pisAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("emailAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("eGovAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("idamUserCreated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("userCreated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("employeeCreated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("singleUserOnboardingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("registrationRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("form", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentState", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_EmployeePermission (employeePermissionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,idamUser BOOLEAN,digitalSigning BOOLEAN,pisAccess BOOLEAN,emailAccess BOOLEAN,eGovAccess BOOLEAN,idamUserCreated BOOLEAN,userCreated BOOLEAN,employeeCreated BOOLEAN,firstName VARCHAR(75) null,personalNo LONG,lastName VARCHAR(75) null,emailAddress VARCHAR(75) null,designationId LONG,employeeId LONG,joiningProcessId LONG,singleUserOnboardingId LONG,registrationRequestId LONG,form VARCHAR(75) null,currentState VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table pis_EmployeePermission";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeePermission.employeePermissionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_EmployeePermission.employeePermissionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FORM_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REGISTRATIONREQUESTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SINGLEUSERONBOARDINGID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEPERMISSIONID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EmployeePermission toModel(EmployeePermissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeePermission model = new EmployeePermissionImpl();

		model.setEmployeePermissionId(soapModel.getEmployeePermissionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setIdamUser(soapModel.isIdamUser());
		model.setDigitalSigning(soapModel.isDigitalSigning());
		model.setPisAccess(soapModel.isPisAccess());
		model.setEmailAccess(soapModel.isEmailAccess());
		model.setEGovAccess(soapModel.isEGovAccess());
		model.setIdamUserCreated(soapModel.isIdamUserCreated());
		model.setUserCreated(soapModel.isUserCreated());
		model.setEmployeeCreated(soapModel.isEmployeeCreated());
		model.setFirstName(soapModel.getFirstName());
		model.setPersonalNo(soapModel.getPersonalNo());
		model.setLastName(soapModel.getLastName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setDesignationId(soapModel.getDesignationId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setSingleUserOnboardingId(soapModel.getSingleUserOnboardingId());
		model.setRegistrationRequestId(soapModel.getRegistrationRequestId());
		model.setForm(soapModel.getForm());
		model.setCurrentState(soapModel.getCurrentState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EmployeePermission> toModels(
		EmployeePermissionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EmployeePermission> models = new ArrayList<EmployeePermission>(
			soapModels.length);

		for (EmployeePermissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeePermissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeePermissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeePermissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeePermissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeePermission.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeePermission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeePermission, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeePermission, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeePermission, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeePermission)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeePermission, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeePermission, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeePermission)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeePermission, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeePermission, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmployeePermission>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmployeePermission.class.getClassLoader(), EmployeePermission.class,
			ModelWrapper.class);

		try {
			Constructor<EmployeePermission> constructor =
				(Constructor<EmployeePermission>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmployeePermission, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeePermission, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeePermission, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeePermission, Object>>();
		Map<String, BiConsumer<EmployeePermission, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EmployeePermission, ?>>();

		attributeGetterFunctions.put(
			"employeePermissionId",
			EmployeePermission::getEmployeePermissionId);
		attributeSetterBiConsumers.put(
			"employeePermissionId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setEmployeePermissionId);
		attributeGetterFunctions.put("groupId", EmployeePermission::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeePermission::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeePermission::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setUserId);
		attributeGetterFunctions.put(
			"userName", EmployeePermission::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setUserName);
		attributeGetterFunctions.put(
			"createDate", EmployeePermission::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeePermission, Date>)
				EmployeePermission::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeePermission::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeePermission, Date>)
				EmployeePermission::setModifiedDate);
		attributeGetterFunctions.put("status", EmployeePermission::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EmployeePermission, Integer>)
				EmployeePermission::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", EmployeePermission::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", EmployeePermission::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", EmployeePermission::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<EmployeePermission, Date>)
				EmployeePermission::setStatusDate);
		attributeGetterFunctions.put(
			"idamUser", EmployeePermission::getIdamUser);
		attributeSetterBiConsumers.put(
			"idamUser",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setIdamUser);
		attributeGetterFunctions.put(
			"digitalSigning", EmployeePermission::getDigitalSigning);
		attributeSetterBiConsumers.put(
			"digitalSigning",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setDigitalSigning);
		attributeGetterFunctions.put(
			"pisAccess", EmployeePermission::getPisAccess);
		attributeSetterBiConsumers.put(
			"pisAccess",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setPisAccess);
		attributeGetterFunctions.put(
			"emailAccess", EmployeePermission::getEmailAccess);
		attributeSetterBiConsumers.put(
			"emailAccess",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setEmailAccess);
		attributeGetterFunctions.put(
			"eGovAccess", EmployeePermission::getEGovAccess);
		attributeSetterBiConsumers.put(
			"eGovAccess",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setEGovAccess);
		attributeGetterFunctions.put(
			"idamUserCreated", EmployeePermission::getIdamUserCreated);
		attributeSetterBiConsumers.put(
			"idamUserCreated",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setIdamUserCreated);
		attributeGetterFunctions.put(
			"userCreated", EmployeePermission::getUserCreated);
		attributeSetterBiConsumers.put(
			"userCreated",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setUserCreated);
		attributeGetterFunctions.put(
			"employeeCreated", EmployeePermission::getEmployeeCreated);
		attributeSetterBiConsumers.put(
			"employeeCreated",
			(BiConsumer<EmployeePermission, Boolean>)
				EmployeePermission::setEmployeeCreated);
		attributeGetterFunctions.put(
			"firstName", EmployeePermission::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setFirstName);
		attributeGetterFunctions.put(
			"personalNo", EmployeePermission::getPersonalNo);
		attributeSetterBiConsumers.put(
			"personalNo",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setPersonalNo);
		attributeGetterFunctions.put(
			"lastName", EmployeePermission::getLastName);
		attributeSetterBiConsumers.put(
			"lastName",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setLastName);
		attributeGetterFunctions.put(
			"emailAddress", EmployeePermission::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setEmailAddress);
		attributeGetterFunctions.put(
			"designationId", EmployeePermission::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setDesignationId);
		attributeGetterFunctions.put(
			"employeeId", EmployeePermission::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setEmployeeId);
		attributeGetterFunctions.put(
			"joiningProcessId", EmployeePermission::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setJoiningProcessId);
		attributeGetterFunctions.put(
			"singleUserOnboardingId",
			EmployeePermission::getSingleUserOnboardingId);
		attributeSetterBiConsumers.put(
			"singleUserOnboardingId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setSingleUserOnboardingId);
		attributeGetterFunctions.put(
			"registrationRequestId",
			EmployeePermission::getRegistrationRequestId);
		attributeSetterBiConsumers.put(
			"registrationRequestId",
			(BiConsumer<EmployeePermission, Long>)
				EmployeePermission::setRegistrationRequestId);
		attributeGetterFunctions.put("form", EmployeePermission::getForm);
		attributeSetterBiConsumers.put(
			"form",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setForm);
		attributeGetterFunctions.put(
			"currentState", EmployeePermission::getCurrentState);
		attributeSetterBiConsumers.put(
			"currentState",
			(BiConsumer<EmployeePermission, String>)
				EmployeePermission::setCurrentState);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEmployeePermissionId() {
		return _employeePermissionId;
	}

	@Override
	public void setEmployeePermissionId(long employeePermissionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeePermissionId = employeePermissionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public boolean getIdamUser() {
		return _idamUser;
	}

	@JSON
	@Override
	public boolean isIdamUser() {
		return _idamUser;
	}

	@Override
	public void setIdamUser(boolean idamUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamUser = idamUser;
	}

	@JSON
	@Override
	public boolean getDigitalSigning() {
		return _digitalSigning;
	}

	@JSON
	@Override
	public boolean isDigitalSigning() {
		return _digitalSigning;
	}

	@Override
	public void setDigitalSigning(boolean digitalSigning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_digitalSigning = digitalSigning;
	}

	@JSON
	@Override
	public boolean getPisAccess() {
		return _pisAccess;
	}

	@JSON
	@Override
	public boolean isPisAccess() {
		return _pisAccess;
	}

	@Override
	public void setPisAccess(boolean pisAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pisAccess = pisAccess;
	}

	@JSON
	@Override
	public boolean getEmailAccess() {
		return _emailAccess;
	}

	@JSON
	@Override
	public boolean isEmailAccess() {
		return _emailAccess;
	}

	@Override
	public void setEmailAccess(boolean emailAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAccess = emailAccess;
	}

	@JSON
	@Override
	public boolean getEGovAccess() {
		return _eGovAccess;
	}

	@JSON
	@Override
	public boolean isEGovAccess() {
		return _eGovAccess;
	}

	@Override
	public void setEGovAccess(boolean eGovAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eGovAccess = eGovAccess;
	}

	@JSON
	@Override
	public boolean getIdamUserCreated() {
		return _idamUserCreated;
	}

	@JSON
	@Override
	public boolean isIdamUserCreated() {
		return _idamUserCreated;
	}

	@Override
	public void setIdamUserCreated(boolean idamUserCreated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamUserCreated = idamUserCreated;
	}

	@JSON
	@Override
	public boolean getUserCreated() {
		return _userCreated;
	}

	@JSON
	@Override
	public boolean isUserCreated() {
		return _userCreated;
	}

	@Override
	public void setUserCreated(boolean userCreated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userCreated = userCreated;
	}

	@JSON
	@Override
	public boolean getEmployeeCreated() {
		return _employeeCreated;
	}

	@JSON
	@Override
	public boolean isEmployeeCreated() {
		return _employeeCreated;
	}

	@Override
	public void setEmployeeCreated(boolean employeeCreated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeCreated = employeeCreated;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public long getPersonalNo() {
		return _personalNo;
	}

	@Override
	public void setPersonalNo(long personalNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalNo = personalNo;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public long getSingleUserOnboardingId() {
		return _singleUserOnboardingId;
	}

	@Override
	public void setSingleUserOnboardingId(long singleUserOnboardingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_singleUserOnboardingId = singleUserOnboardingId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSingleUserOnboardingId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("singleUserOnboardingId"));
	}

	@JSON
	@Override
	public long getRegistrationRequestId() {
		return _registrationRequestId;
	}

	@Override
	public void setRegistrationRequestId(long registrationRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registrationRequestId = registrationRequestId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRegistrationRequestId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("registrationRequestId"));
	}

	@JSON
	@Override
	public String getForm() {
		if (_form == null) {
			return "";
		}
		else {
			return _form;
		}
	}

	@Override
	public void setForm(String form) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_form = form;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalForm() {
		return getColumnOriginalValue("form");
	}

	@JSON
	@Override
	public String getCurrentState() {
		if (_currentState == null) {
			return "";
		}
		else {
			return _currentState;
		}
	}

	@Override
	public void setCurrentState(String currentState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentState = currentState;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeePermission.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeePermission toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeePermission>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeePermissionImpl employeePermissionImpl =
			new EmployeePermissionImpl();

		employeePermissionImpl.setEmployeePermissionId(
			getEmployeePermissionId());
		employeePermissionImpl.setGroupId(getGroupId());
		employeePermissionImpl.setCompanyId(getCompanyId());
		employeePermissionImpl.setUserId(getUserId());
		employeePermissionImpl.setUserName(getUserName());
		employeePermissionImpl.setCreateDate(getCreateDate());
		employeePermissionImpl.setModifiedDate(getModifiedDate());
		employeePermissionImpl.setStatus(getStatus());
		employeePermissionImpl.setStatusByUserId(getStatusByUserId());
		employeePermissionImpl.setStatusByUserName(getStatusByUserName());
		employeePermissionImpl.setStatusDate(getStatusDate());
		employeePermissionImpl.setIdamUser(isIdamUser());
		employeePermissionImpl.setDigitalSigning(isDigitalSigning());
		employeePermissionImpl.setPisAccess(isPisAccess());
		employeePermissionImpl.setEmailAccess(isEmailAccess());
		employeePermissionImpl.setEGovAccess(isEGovAccess());
		employeePermissionImpl.setIdamUserCreated(isIdamUserCreated());
		employeePermissionImpl.setUserCreated(isUserCreated());
		employeePermissionImpl.setEmployeeCreated(isEmployeeCreated());
		employeePermissionImpl.setFirstName(getFirstName());
		employeePermissionImpl.setPersonalNo(getPersonalNo());
		employeePermissionImpl.setLastName(getLastName());
		employeePermissionImpl.setEmailAddress(getEmailAddress());
		employeePermissionImpl.setDesignationId(getDesignationId());
		employeePermissionImpl.setEmployeeId(getEmployeeId());
		employeePermissionImpl.setJoiningProcessId(getJoiningProcessId());
		employeePermissionImpl.setSingleUserOnboardingId(
			getSingleUserOnboardingId());
		employeePermissionImpl.setRegistrationRequestId(
			getRegistrationRequestId());
		employeePermissionImpl.setForm(getForm());
		employeePermissionImpl.setCurrentState(getCurrentState());

		employeePermissionImpl.resetOriginalValues();

		return employeePermissionImpl;
	}

	@Override
	public int compareTo(EmployeePermission employeePermission) {
		int value = 0;

		if (getEmployeePermissionId() <
				employeePermission.getEmployeePermissionId()) {

			value = -1;
		}
		else if (getEmployeePermissionId() >
					employeePermission.getEmployeePermissionId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeePermission)) {
			return false;
		}

		EmployeePermission employeePermission = (EmployeePermission)object;

		long primaryKey = employeePermission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeePermission> toCacheModel() {
		EmployeePermissionCacheModel employeePermissionCacheModel =
			new EmployeePermissionCacheModel();

		employeePermissionCacheModel.employeePermissionId =
			getEmployeePermissionId();

		employeePermissionCacheModel.groupId = getGroupId();

		employeePermissionCacheModel.companyId = getCompanyId();

		employeePermissionCacheModel.userId = getUserId();

		employeePermissionCacheModel.userName = getUserName();

		String userName = employeePermissionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			employeePermissionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeePermissionCacheModel.createDate = createDate.getTime();
		}
		else {
			employeePermissionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeePermissionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeePermissionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeePermissionCacheModel.status = getStatus();

		employeePermissionCacheModel.statusByUserId = getStatusByUserId();

		employeePermissionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = employeePermissionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			employeePermissionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			employeePermissionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			employeePermissionCacheModel.statusDate = Long.MIN_VALUE;
		}

		employeePermissionCacheModel.idamUser = isIdamUser();

		employeePermissionCacheModel.digitalSigning = isDigitalSigning();

		employeePermissionCacheModel.pisAccess = isPisAccess();

		employeePermissionCacheModel.emailAccess = isEmailAccess();

		employeePermissionCacheModel.eGovAccess = isEGovAccess();

		employeePermissionCacheModel.idamUserCreated = isIdamUserCreated();

		employeePermissionCacheModel.userCreated = isUserCreated();

		employeePermissionCacheModel.employeeCreated = isEmployeeCreated();

		employeePermissionCacheModel.firstName = getFirstName();

		String firstName = employeePermissionCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			employeePermissionCacheModel.firstName = null;
		}

		employeePermissionCacheModel.personalNo = getPersonalNo();

		employeePermissionCacheModel.lastName = getLastName();

		String lastName = employeePermissionCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			employeePermissionCacheModel.lastName = null;
		}

		employeePermissionCacheModel.emailAddress = getEmailAddress();

		String emailAddress = employeePermissionCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			employeePermissionCacheModel.emailAddress = null;
		}

		employeePermissionCacheModel.designationId = getDesignationId();

		employeePermissionCacheModel.employeeId = getEmployeeId();

		employeePermissionCacheModel.joiningProcessId = getJoiningProcessId();

		employeePermissionCacheModel.singleUserOnboardingId =
			getSingleUserOnboardingId();

		employeePermissionCacheModel.registrationRequestId =
			getRegistrationRequestId();

		employeePermissionCacheModel.form = getForm();

		String form = employeePermissionCacheModel.form;

		if ((form != null) && (form.length() == 0)) {
			employeePermissionCacheModel.form = null;
		}

		employeePermissionCacheModel.currentState = getCurrentState();

		String currentState = employeePermissionCacheModel.currentState;

		if ((currentState != null) && (currentState.length() == 0)) {
			employeePermissionCacheModel.currentState = null;
		}

		return employeePermissionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeePermission, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeePermission, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeePermission, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EmployeePermission)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmployeePermission, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmployeePermission, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeePermission, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmployeePermission)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeePermission>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _employeePermissionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private boolean _idamUser;
	private boolean _digitalSigning;
	private boolean _pisAccess;
	private boolean _emailAccess;
	private boolean _eGovAccess;
	private boolean _idamUserCreated;
	private boolean _userCreated;
	private boolean _employeeCreated;
	private String _firstName;
	private long _personalNo;
	private String _lastName;
	private String _emailAddress;
	private long _designationId;
	private long _employeeId;
	private long _joiningProcessId;
	private long _singleUserOnboardingId;
	private long _registrationRequestId;
	private String _form;
	private String _currentState;

	public <T> T getColumnValue(String columnName) {
		Function<EmployeePermission, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeePermission)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"employeePermissionId", _employeePermissionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("idamUser", _idamUser);
		_columnOriginalValues.put("digitalSigning", _digitalSigning);
		_columnOriginalValues.put("pisAccess", _pisAccess);
		_columnOriginalValues.put("emailAccess", _emailAccess);
		_columnOriginalValues.put("eGovAccess", _eGovAccess);
		_columnOriginalValues.put("idamUserCreated", _idamUserCreated);
		_columnOriginalValues.put("userCreated", _userCreated);
		_columnOriginalValues.put("employeeCreated", _employeeCreated);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("personalNo", _personalNo);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put(
			"singleUserOnboardingId", _singleUserOnboardingId);
		_columnOriginalValues.put(
			"registrationRequestId", _registrationRequestId);
		_columnOriginalValues.put("form", _form);
		_columnOriginalValues.put("currentState", _currentState);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeePermissionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("status", 128L);

		columnBitmasks.put("statusByUserId", 256L);

		columnBitmasks.put("statusByUserName", 512L);

		columnBitmasks.put("statusDate", 1024L);

		columnBitmasks.put("idamUser", 2048L);

		columnBitmasks.put("digitalSigning", 4096L);

		columnBitmasks.put("pisAccess", 8192L);

		columnBitmasks.put("emailAccess", 16384L);

		columnBitmasks.put("eGovAccess", 32768L);

		columnBitmasks.put("idamUserCreated", 65536L);

		columnBitmasks.put("userCreated", 131072L);

		columnBitmasks.put("employeeCreated", 262144L);

		columnBitmasks.put("firstName", 524288L);

		columnBitmasks.put("personalNo", 1048576L);

		columnBitmasks.put("lastName", 2097152L);

		columnBitmasks.put("emailAddress", 4194304L);

		columnBitmasks.put("designationId", 8388608L);

		columnBitmasks.put("employeeId", 16777216L);

		columnBitmasks.put("joiningProcessId", 33554432L);

		columnBitmasks.put("singleUserOnboardingId", 67108864L);

		columnBitmasks.put("registrationRequestId", 134217728L);

		columnBitmasks.put("form", 268435456L);

		columnBitmasks.put("currentState", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeePermission _escapedModel;

}