/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.pis.liferay.model.impl;

import com.adjecti.pis.liferay.model.ServiceRequest;
import com.adjecti.pis.liferay.model.ServiceRequestModel;
import com.adjecti.pis.liferay.model.ServiceRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ServiceRequest service. Represents a row in the &quot;pis_ServiceRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ServiceRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServiceRequestImpl
 * @generated
 */
@JSON(strict = true)
public class ServiceRequestModelImpl
	extends BaseModelImpl<ServiceRequest> implements ServiceRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service request model instance should use the <code>ServiceRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "pis_ServiceRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"serviceRequestId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"serviceRequestTypeId", Types.BIGINT}, {"subject", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"employeeId", Types.BIGINT},
		{"documentProofId", Types.BIGINT}, {"organizationId", Types.BIGINT},
		{"joiningProcessId", Types.BIGINT}, {"status", Types.INTEGER},
		{"deleted", Types.BOOLEAN}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"state_", Types.VARCHAR}, {"comments", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("serviceRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("serviceRequestTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentProofId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("joiningProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pis_ServiceRequest (serviceRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,serviceRequestTypeId LONG,subject VARCHAR(75) null,description VARCHAR(75) null,employeeId LONG,documentProofId LONG,organizationId LONG,joiningProcessId LONG,status INTEGER,deleted BOOLEAN,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,state_ VARCHAR(75) null,comments VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table pis_ServiceRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY serviceRequest.serviceRequestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pis_ServiceRequest.serviceRequestId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DELETED_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long JOININGPROCESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SERVICEREQUESTTYPEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SERVICEREQUESTID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ServiceRequest toModel(ServiceRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ServiceRequest model = new ServiceRequestImpl();

		model.setServiceRequestId(soapModel.getServiceRequestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setServiceRequestTypeId(soapModel.getServiceRequestTypeId());
		model.setSubject(soapModel.getSubject());
		model.setDescription(soapModel.getDescription());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setDocumentProofId(soapModel.getDocumentProofId());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setJoiningProcessId(soapModel.getJoiningProcessId());
		model.setStatus(soapModel.getStatus());
		model.setDeleted(soapModel.isDeleted());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setState(soapModel.getState());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ServiceRequest> toModels(
		ServiceRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ServiceRequest> models = new ArrayList<ServiceRequest>(
			soapModels.length);

		for (ServiceRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ServiceRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serviceRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServiceRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serviceRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceRequest.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ServiceRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ServiceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ServiceRequest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ServiceRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ServiceRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ServiceRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ServiceRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ServiceRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ServiceRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ServiceRequest.class.getClassLoader(), ServiceRequest.class,
			ModelWrapper.class);

		try {
			Constructor<ServiceRequest> constructor =
				(Constructor<ServiceRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ServiceRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ServiceRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ServiceRequest, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ServiceRequest, Object>>();
		Map<String, BiConsumer<ServiceRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ServiceRequest, ?>>();

		attributeGetterFunctions.put(
			"serviceRequestId", ServiceRequest::getServiceRequestId);
		attributeSetterBiConsumers.put(
			"serviceRequestId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setServiceRequestId);
		attributeGetterFunctions.put("groupId", ServiceRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ServiceRequest, Long>)ServiceRequest::setGroupId);
		attributeGetterFunctions.put("companyId", ServiceRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ServiceRequest, Long>)ServiceRequest::setCompanyId);
		attributeGetterFunctions.put("userId", ServiceRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ServiceRequest, Long>)ServiceRequest::setUserId);
		attributeGetterFunctions.put("userName", ServiceRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ServiceRequest, String>)ServiceRequest::setUserName);
		attributeGetterFunctions.put(
			"createDate", ServiceRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ServiceRequest, Date>)ServiceRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ServiceRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ServiceRequest, Date>)ServiceRequest::setModifiedDate);
		attributeGetterFunctions.put("active", ServiceRequest::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<ServiceRequest, Boolean>)ServiceRequest::setActive);
		attributeGetterFunctions.put(
			"serviceRequestTypeId", ServiceRequest::getServiceRequestTypeId);
		attributeSetterBiConsumers.put(
			"serviceRequestTypeId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setServiceRequestTypeId);
		attributeGetterFunctions.put("subject", ServiceRequest::getSubject);
		attributeSetterBiConsumers.put(
			"subject",
			(BiConsumer<ServiceRequest, String>)ServiceRequest::setSubject);
		attributeGetterFunctions.put(
			"description", ServiceRequest::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<ServiceRequest, String>)ServiceRequest::setDescription);
		attributeGetterFunctions.put(
			"employeeId", ServiceRequest::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<ServiceRequest, Long>)ServiceRequest::setEmployeeId);
		attributeGetterFunctions.put(
			"documentProofId", ServiceRequest::getDocumentProofId);
		attributeSetterBiConsumers.put(
			"documentProofId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setDocumentProofId);
		attributeGetterFunctions.put(
			"organizationId", ServiceRequest::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setOrganizationId);
		attributeGetterFunctions.put(
			"joiningProcessId", ServiceRequest::getJoiningProcessId);
		attributeSetterBiConsumers.put(
			"joiningProcessId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setJoiningProcessId);
		attributeGetterFunctions.put("status", ServiceRequest::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ServiceRequest, Integer>)ServiceRequest::setStatus);
		attributeGetterFunctions.put("deleted", ServiceRequest::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<ServiceRequest, Boolean>)ServiceRequest::setDeleted);
		attributeGetterFunctions.put(
			"statusByUserId", ServiceRequest::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<ServiceRequest, Long>)
				ServiceRequest::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", ServiceRequest::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<ServiceRequest, String>)
				ServiceRequest::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", ServiceRequest::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<ServiceRequest, Date>)ServiceRequest::setStatusDate);
		attributeGetterFunctions.put("state", ServiceRequest::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<ServiceRequest, String>)ServiceRequest::setState);
		attributeGetterFunctions.put("comments", ServiceRequest::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<ServiceRequest, String>)ServiceRequest::setComments);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getServiceRequestId() {
		return _serviceRequestId;
	}

	@Override
	public void setServiceRequestId(long serviceRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceRequestId = serviceRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public long getServiceRequestTypeId() {
		return _serviceRequestTypeId;
	}

	@Override
	public void setServiceRequestTypeId(long serviceRequestTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceRequestTypeId = serviceRequestTypeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalServiceRequestTypeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("serviceRequestTypeId"));
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subject = subject;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getDocumentProofId() {
		return _documentProofId;
	}

	@Override
	public void setDocumentProofId(long documentProofId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentProofId = documentProofId;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@JSON
	@Override
	public Long getJoiningProcessId() {
		return _joiningProcessId;
	}

	@Override
	public void setJoiningProcessId(Long joiningProcessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joiningProcessId = joiningProcessId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalJoiningProcessId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("joiningProcessId"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalDeleted() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("deleted"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comments = comments;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ServiceRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ServiceRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceRequestImpl serviceRequestImpl = new ServiceRequestImpl();

		serviceRequestImpl.setServiceRequestId(getServiceRequestId());
		serviceRequestImpl.setGroupId(getGroupId());
		serviceRequestImpl.setCompanyId(getCompanyId());
		serviceRequestImpl.setUserId(getUserId());
		serviceRequestImpl.setUserName(getUserName());
		serviceRequestImpl.setCreateDate(getCreateDate());
		serviceRequestImpl.setModifiedDate(getModifiedDate());
		serviceRequestImpl.setActive(isActive());
		serviceRequestImpl.setServiceRequestTypeId(getServiceRequestTypeId());
		serviceRequestImpl.setSubject(getSubject());
		serviceRequestImpl.setDescription(getDescription());
		serviceRequestImpl.setEmployeeId(getEmployeeId());
		serviceRequestImpl.setDocumentProofId(getDocumentProofId());
		serviceRequestImpl.setOrganizationId(getOrganizationId());
		serviceRequestImpl.setJoiningProcessId(getJoiningProcessId());
		serviceRequestImpl.setStatus(getStatus());
		serviceRequestImpl.setDeleted(isDeleted());
		serviceRequestImpl.setStatusByUserId(getStatusByUserId());
		serviceRequestImpl.setStatusByUserName(getStatusByUserName());
		serviceRequestImpl.setStatusDate(getStatusDate());
		serviceRequestImpl.setState(getState());
		serviceRequestImpl.setComments(getComments());

		serviceRequestImpl.resetOriginalValues();

		return serviceRequestImpl;
	}

	@Override
	public int compareTo(ServiceRequest serviceRequest) {
		long primaryKey = serviceRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ServiceRequest)) {
			return false;
		}

		ServiceRequest serviceRequest = (ServiceRequest)object;

		long primaryKey = serviceRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceRequest> toCacheModel() {
		ServiceRequestCacheModel serviceRequestCacheModel =
			new ServiceRequestCacheModel();

		serviceRequestCacheModel.serviceRequestId = getServiceRequestId();

		serviceRequestCacheModel.groupId = getGroupId();

		serviceRequestCacheModel.companyId = getCompanyId();

		serviceRequestCacheModel.userId = getUserId();

		serviceRequestCacheModel.userName = getUserName();

		String userName = serviceRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceRequestCacheModel.active = isActive();

		serviceRequestCacheModel.serviceRequestTypeId =
			getServiceRequestTypeId();

		serviceRequestCacheModel.subject = getSubject();

		String subject = serviceRequestCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			serviceRequestCacheModel.subject = null;
		}

		serviceRequestCacheModel.description = getDescription();

		String description = serviceRequestCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			serviceRequestCacheModel.description = null;
		}

		serviceRequestCacheModel.employeeId = getEmployeeId();

		serviceRequestCacheModel.documentProofId = getDocumentProofId();

		serviceRequestCacheModel.organizationId = getOrganizationId();

		Long joiningProcessId = getJoiningProcessId();

		if (joiningProcessId != null) {
			serviceRequestCacheModel.joiningProcessId = joiningProcessId;
		}

		serviceRequestCacheModel.status = getStatus();

		serviceRequestCacheModel.deleted = isDeleted();

		serviceRequestCacheModel.statusByUserId = getStatusByUserId();

		serviceRequestCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = serviceRequestCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			serviceRequestCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			serviceRequestCacheModel.statusDate = statusDate.getTime();
		}
		else {
			serviceRequestCacheModel.statusDate = Long.MIN_VALUE;
		}

		serviceRequestCacheModel.state = getState();

		String state = serviceRequestCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			serviceRequestCacheModel.state = null;
		}

		serviceRequestCacheModel.comments = getComments();

		String comments = serviceRequestCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			serviceRequestCacheModel.comments = null;
		}

		return serviceRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ServiceRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ServiceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ServiceRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ServiceRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ServiceRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ServiceRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ServiceRequest>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _serviceRequestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private long _serviceRequestTypeId;
	private String _subject;
	private String _description;
	private long _employeeId;
	private long _documentProofId;
	private long _organizationId;
	private Long _joiningProcessId;
	private int _status;
	private boolean _deleted;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _state;
	private String _comments;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ServiceRequest, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ServiceRequest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("serviceRequestId", _serviceRequestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put(
			"serviceRequestTypeId", _serviceRequestTypeId);
		_columnOriginalValues.put("subject", _subject);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("documentProofId", _documentProofId);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("joiningProcessId", _joiningProcessId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("comments", _comments);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("active_", "active");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("serviceRequestId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("serviceRequestTypeId", 256L);

		columnBitmasks.put("subject", 512L);

		columnBitmasks.put("description", 1024L);

		columnBitmasks.put("employeeId", 2048L);

		columnBitmasks.put("documentProofId", 4096L);

		columnBitmasks.put("organizationId", 8192L);

		columnBitmasks.put("joiningProcessId", 16384L);

		columnBitmasks.put("status", 32768L);

		columnBitmasks.put("deleted", 65536L);

		columnBitmasks.put("statusByUserId", 131072L);

		columnBitmasks.put("statusByUserName", 262144L);

		columnBitmasks.put("statusDate", 524288L);

		columnBitmasks.put("state_", 1048576L);

		columnBitmasks.put("comments", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ServiceRequest _escapedModel;

}