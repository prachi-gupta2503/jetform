/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.mdm.liferay.model.impl;

import com.adjecti.mdm.liferay.model.LevelWisePayStructure;
import com.adjecti.mdm.liferay.model.LevelWisePayStructureModel;
import com.adjecti.mdm.liferay.model.LevelWisePayStructureSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LevelWisePayStructure service. Represents a row in the &quot;mdm_LevelWisePayStructure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LevelWisePayStructureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LevelWisePayStructureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LevelWisePayStructureImpl
 * @generated
 */
@JSON(strict = true)
public class LevelWisePayStructureModelImpl
	extends BaseModelImpl<LevelWisePayStructure>
	implements LevelWisePayStructureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a level wise pay structure model instance should use the <code>LevelWisePayStructure</code> interface instead.
	 */
	public static final String TABLE_NAME = "mdm_LevelWisePayStructure";

	public static final Object[][] TABLE_COLUMNS = {
		{"levelWisePayStructureId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"fromDate", Types.TIMESTAMP}, {"toDate", Types.TIMESTAMP},
		{"levelId", Types.BIGINT}, {"structureId", Types.BIGINT},
		{"deleted", Types.BOOLEAN}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("levelWisePayStructureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("levelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("structureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table mdm_LevelWisePayStructure (levelWisePayStructureId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,fromDate DATE null,toDate DATE null,levelId LONG,structureId LONG,deleted BOOLEAN,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table mdm_LevelWisePayStructure";

	public static final String ORDER_BY_JPQL =
		" ORDER BY levelWisePayStructure.levelWisePayStructureId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY mdm_LevelWisePayStructure.levelWisePayStructureId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long LEVELWISEPAYSTRUCTUREID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static LevelWisePayStructure toModel(
		LevelWisePayStructureSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		LevelWisePayStructure model = new LevelWisePayStructureImpl();

		model.setLevelWisePayStructureId(
			soapModel.getLevelWisePayStructureId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setLevelId(soapModel.getLevelId());
		model.setStructureId(soapModel.getStructureId());
		model.setDeleted(soapModel.isDeleted());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<LevelWisePayStructure> toModels(
		LevelWisePayStructureSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LevelWisePayStructure> models =
			new ArrayList<LevelWisePayStructure>(soapModels.length);

		for (LevelWisePayStructureSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LevelWisePayStructureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _levelWisePayStructureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLevelWisePayStructureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _levelWisePayStructureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LevelWisePayStructure.class;
	}

	@Override
	public String getModelClassName() {
		return LevelWisePayStructure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LevelWisePayStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LevelWisePayStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LevelWisePayStructure, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LevelWisePayStructure)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LevelWisePayStructure, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LevelWisePayStructure, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LevelWisePayStructure)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LevelWisePayStructure, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LevelWisePayStructure, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LevelWisePayStructure>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LevelWisePayStructure.class.getClassLoader(),
			LevelWisePayStructure.class, ModelWrapper.class);

		try {
			Constructor<LevelWisePayStructure> constructor =
				(Constructor<LevelWisePayStructure>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LevelWisePayStructure, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LevelWisePayStructure, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LevelWisePayStructure, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<LevelWisePayStructure, Object>>();
		Map<String, BiConsumer<LevelWisePayStructure, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<LevelWisePayStructure, ?>>();

		attributeGetterFunctions.put(
			"levelWisePayStructureId",
			LevelWisePayStructure::getLevelWisePayStructureId);
		attributeSetterBiConsumers.put(
			"levelWisePayStructureId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setLevelWisePayStructureId);
		attributeGetterFunctions.put(
			"groupId", LevelWisePayStructure::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LevelWisePayStructure::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setCompanyId);
		attributeGetterFunctions.put(
			"userId", LevelWisePayStructure::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setUserId);
		attributeGetterFunctions.put(
			"userName", LevelWisePayStructure::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<LevelWisePayStructure, String>)
				LevelWisePayStructure::setUserName);
		attributeGetterFunctions.put(
			"createDate", LevelWisePayStructure::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LevelWisePayStructure, Date>)
				LevelWisePayStructure::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", LevelWisePayStructure::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LevelWisePayStructure, Date>)
				LevelWisePayStructure::setModifiedDate);
		attributeGetterFunctions.put(
			"active", LevelWisePayStructure::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<LevelWisePayStructure, Boolean>)
				LevelWisePayStructure::setActive);
		attributeGetterFunctions.put(
			"fromDate", LevelWisePayStructure::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate",
			(BiConsumer<LevelWisePayStructure, Date>)
				LevelWisePayStructure::setFromDate);
		attributeGetterFunctions.put(
			"toDate", LevelWisePayStructure::getToDate);
		attributeSetterBiConsumers.put(
			"toDate",
			(BiConsumer<LevelWisePayStructure, Date>)
				LevelWisePayStructure::setToDate);
		attributeGetterFunctions.put(
			"levelId", LevelWisePayStructure::getLevelId);
		attributeSetterBiConsumers.put(
			"levelId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setLevelId);
		attributeGetterFunctions.put(
			"structureId", LevelWisePayStructure::getStructureId);
		attributeSetterBiConsumers.put(
			"structureId",
			(BiConsumer<LevelWisePayStructure, Long>)
				LevelWisePayStructure::setStructureId);
		attributeGetterFunctions.put(
			"deleted", LevelWisePayStructure::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<LevelWisePayStructure, Boolean>)
				LevelWisePayStructure::setDeleted);
		attributeGetterFunctions.put(
			"status", LevelWisePayStructure::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<LevelWisePayStructure, Integer>)
				LevelWisePayStructure::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLevelWisePayStructureId() {
		return _levelWisePayStructureId;
	}

	@Override
	public void setLevelWisePayStructureId(long levelWisePayStructureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_levelWisePayStructureId = levelWisePayStructureId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toDate = toDate;
	}

	@JSON
	@Override
	public long getLevelId() {
		return _levelId;
	}

	@Override
	public void setLevelId(long levelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_levelId = levelId;
	}

	@JSON
	@Override
	public long getStructureId() {
		return _structureId;
	}

	@Override
	public void setStructureId(long structureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_structureId = structureId;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LevelWisePayStructure.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LevelWisePayStructure toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LevelWisePayStructure>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LevelWisePayStructureImpl levelWisePayStructureImpl =
			new LevelWisePayStructureImpl();

		levelWisePayStructureImpl.setLevelWisePayStructureId(
			getLevelWisePayStructureId());
		levelWisePayStructureImpl.setGroupId(getGroupId());
		levelWisePayStructureImpl.setCompanyId(getCompanyId());
		levelWisePayStructureImpl.setUserId(getUserId());
		levelWisePayStructureImpl.setUserName(getUserName());
		levelWisePayStructureImpl.setCreateDate(getCreateDate());
		levelWisePayStructureImpl.setModifiedDate(getModifiedDate());
		levelWisePayStructureImpl.setActive(isActive());
		levelWisePayStructureImpl.setFromDate(getFromDate());
		levelWisePayStructureImpl.setToDate(getToDate());
		levelWisePayStructureImpl.setLevelId(getLevelId());
		levelWisePayStructureImpl.setStructureId(getStructureId());
		levelWisePayStructureImpl.setDeleted(isDeleted());
		levelWisePayStructureImpl.setStatus(getStatus());

		levelWisePayStructureImpl.resetOriginalValues();

		return levelWisePayStructureImpl;
	}

	@Override
	public int compareTo(LevelWisePayStructure levelWisePayStructure) {
		long primaryKey = levelWisePayStructure.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LevelWisePayStructure)) {
			return false;
		}

		LevelWisePayStructure levelWisePayStructure =
			(LevelWisePayStructure)object;

		long primaryKey = levelWisePayStructure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LevelWisePayStructure> toCacheModel() {
		LevelWisePayStructureCacheModel levelWisePayStructureCacheModel =
			new LevelWisePayStructureCacheModel();

		levelWisePayStructureCacheModel.levelWisePayStructureId =
			getLevelWisePayStructureId();

		levelWisePayStructureCacheModel.groupId = getGroupId();

		levelWisePayStructureCacheModel.companyId = getCompanyId();

		levelWisePayStructureCacheModel.userId = getUserId();

		levelWisePayStructureCacheModel.userName = getUserName();

		String userName = levelWisePayStructureCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			levelWisePayStructureCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			levelWisePayStructureCacheModel.createDate = createDate.getTime();
		}
		else {
			levelWisePayStructureCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			levelWisePayStructureCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			levelWisePayStructureCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		levelWisePayStructureCacheModel.active = isActive();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			levelWisePayStructureCacheModel.fromDate = fromDate.getTime();
		}
		else {
			levelWisePayStructureCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			levelWisePayStructureCacheModel.toDate = toDate.getTime();
		}
		else {
			levelWisePayStructureCacheModel.toDate = Long.MIN_VALUE;
		}

		levelWisePayStructureCacheModel.levelId = getLevelId();

		levelWisePayStructureCacheModel.structureId = getStructureId();

		levelWisePayStructureCacheModel.deleted = isDeleted();

		levelWisePayStructureCacheModel.status = getStatus();

		return levelWisePayStructureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LevelWisePayStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LevelWisePayStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LevelWisePayStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((LevelWisePayStructure)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LevelWisePayStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LevelWisePayStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LevelWisePayStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((LevelWisePayStructure)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LevelWisePayStructure>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _levelWisePayStructureId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private Date _fromDate;
	private Date _toDate;
	private long _levelId;
	private long _structureId;
	private boolean _deleted;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LevelWisePayStructure, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LevelWisePayStructure)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"levelWisePayStructureId", _levelWisePayStructureId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("fromDate", _fromDate);
		_columnOriginalValues.put("toDate", _toDate);
		_columnOriginalValues.put("levelId", _levelId);
		_columnOriginalValues.put("structureId", _structureId);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("levelWisePayStructureId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("fromDate", 256L);

		columnBitmasks.put("toDate", 512L);

		columnBitmasks.put("levelId", 1024L);

		columnBitmasks.put("structureId", 2048L);

		columnBitmasks.put("deleted", 4096L);

		columnBitmasks.put("status", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LevelWisePayStructure _escapedModel;

}