/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.mdm.liferay.model.impl;

import com.adjecti.mdm.liferay.model.OrganizationDetail;
import com.adjecti.mdm.liferay.model.OrganizationDetailModel;
import com.adjecti.mdm.liferay.model.OrganizationDetailSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OrganizationDetail service. Represents a row in the &quot;mdm_OrganizationDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OrganizationDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrganizationDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OrganizationDetailImpl
 * @generated
 */
@JSON(strict = true)
public class OrganizationDetailModelImpl
	extends BaseModelImpl<OrganizationDetail>
	implements OrganizationDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a organization detail model instance should use the <code>OrganizationDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "mdm_OrganizationDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"organizationDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"organizationId", Types.BIGINT},
		{"organizationCode", Types.VARCHAR}, {"parentId", Types.BIGINT},
		{"parentCode", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"shortName", Types.VARCHAR}, {"longName", Types.VARCHAR},
		{"division", Types.VARCHAR}, {"addressedTo", Types.VARCHAR},
		{"address1", Types.VARCHAR}, {"address2", Types.VARCHAR},
		{"address3", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"district", Types.VARCHAR}, {"stateId", Types.BIGINT},
		{"zone", Types.VARCHAR}, {"pin", Types.VARCHAR},
		{"nearestRailwayStation", Types.VARCHAR}, {"telegram", Types.VARCHAR},
		{"fax", Types.VARCHAR}, {"telex", Types.VARCHAR},
		{"telephone1", Types.VARCHAR}, {"telephone2", Types.VARCHAR},
		{"stationId", Types.VARCHAR}, {"unitType", Types.VARCHAR},
		{"orgStatus", Types.VARCHAR}, {"deleted", Types.BOOLEAN},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organizationDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressedTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("zone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nearestRailwayStation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telegram", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unitType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table mdm_OrganizationDetail (organizationDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,organizationId LONG,organizationCode VARCHAR(75) null,parentId LONG,parentCode VARCHAR(75) null,type_ VARCHAR(75) null,shortName VARCHAR(75) null,longName VARCHAR(75) null,division VARCHAR(75) null,addressedTo VARCHAR(75) null,address1 VARCHAR(75) null,address2 VARCHAR(75) null,address3 VARCHAR(75) null,city VARCHAR(75) null,district VARCHAR(75) null,stateId LONG,zone VARCHAR(75) null,pin VARCHAR(75) null,nearestRailwayStation VARCHAR(75) null,telegram VARCHAR(75) null,fax VARCHAR(75) null,telex VARCHAR(75) null,telephone1 VARCHAR(75) null,telephone2 VARCHAR(75) null,stationId VARCHAR(75) null,unitType VARCHAR(75) null,orgStatus VARCHAR(75) null,deleted BOOLEAN,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table mdm_OrganizationDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY organizationDetail.shortName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY mdm_OrganizationDetail.shortName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONCODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PARENTCODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PARENTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SHORTNAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UNITTYPE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static OrganizationDetail toModel(OrganizationDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OrganizationDetail model = new OrganizationDetailImpl();

		model.setOrganizationDetailId(soapModel.getOrganizationDetailId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOrganizationId(soapModel.getOrganizationId());
		model.setOrganizationCode(soapModel.getOrganizationCode());
		model.setParentId(soapModel.getParentId());
		model.setParentCode(soapModel.getParentCode());
		model.setType(soapModel.getType());
		model.setShortName(soapModel.getShortName());
		model.setLongName(soapModel.getLongName());
		model.setDivision(soapModel.getDivision());
		model.setAddressedTo(soapModel.getAddressedTo());
		model.setAddress1(soapModel.getAddress1());
		model.setAddress2(soapModel.getAddress2());
		model.setAddress3(soapModel.getAddress3());
		model.setCity(soapModel.getCity());
		model.setDistrict(soapModel.getDistrict());
		model.setStateId(soapModel.getStateId());
		model.setZone(soapModel.getZone());
		model.setPin(soapModel.getPin());
		model.setNearestRailwayStation(soapModel.getNearestRailwayStation());
		model.setTelegram(soapModel.getTelegram());
		model.setFax(soapModel.getFax());
		model.setTelex(soapModel.getTelex());
		model.setTelephone1(soapModel.getTelephone1());
		model.setTelephone2(soapModel.getTelephone2());
		model.setStationId(soapModel.getStationId());
		model.setUnitType(soapModel.getUnitType());
		model.setOrgStatus(soapModel.getOrgStatus());
		model.setDeleted(soapModel.isDeleted());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<OrganizationDetail> toModels(
		OrganizationDetailSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<OrganizationDetail> models = new ArrayList<OrganizationDetail>(
			soapModels.length);

		for (OrganizationDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public OrganizationDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _organizationDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrganizationDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _organizationDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrganizationDetail.class;
	}

	@Override
	public String getModelClassName() {
		return OrganizationDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OrganizationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OrganizationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrganizationDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OrganizationDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OrganizationDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OrganizationDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OrganizationDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OrganizationDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OrganizationDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, OrganizationDetail>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			OrganizationDetail.class.getClassLoader(), OrganizationDetail.class,
			ModelWrapper.class);

		try {
			Constructor<OrganizationDetail> constructor =
				(Constructor<OrganizationDetail>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<OrganizationDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<OrganizationDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<OrganizationDetail, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<OrganizationDetail, Object>>();
		Map<String, BiConsumer<OrganizationDetail, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<OrganizationDetail, ?>>();

		attributeGetterFunctions.put(
			"organizationDetailId",
			OrganizationDetail::getOrganizationDetailId);
		attributeSetterBiConsumers.put(
			"organizationDetailId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setOrganizationDetailId);
		attributeGetterFunctions.put("groupId", OrganizationDetail::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setGroupId);
		attributeGetterFunctions.put(
			"companyId", OrganizationDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setCompanyId);
		attributeGetterFunctions.put("userId", OrganizationDetail::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setUserId);
		attributeGetterFunctions.put(
			"userName", OrganizationDetail::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setUserName);
		attributeGetterFunctions.put(
			"createDate", OrganizationDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<OrganizationDetail, Date>)
				OrganizationDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", OrganizationDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<OrganizationDetail, Date>)
				OrganizationDetail::setModifiedDate);
		attributeGetterFunctions.put(
			"organizationId", OrganizationDetail::getOrganizationId);
		attributeSetterBiConsumers.put(
			"organizationId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setOrganizationId);
		attributeGetterFunctions.put(
			"organizationCode", OrganizationDetail::getOrganizationCode);
		attributeSetterBiConsumers.put(
			"organizationCode",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setOrganizationCode);
		attributeGetterFunctions.put(
			"parentId", OrganizationDetail::getParentId);
		attributeSetterBiConsumers.put(
			"parentId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setParentId);
		attributeGetterFunctions.put(
			"parentCode", OrganizationDetail::getParentCode);
		attributeSetterBiConsumers.put(
			"parentCode",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setParentCode);
		attributeGetterFunctions.put("type", OrganizationDetail::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setType);
		attributeGetterFunctions.put(
			"shortName", OrganizationDetail::getShortName);
		attributeSetterBiConsumers.put(
			"shortName",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setShortName);
		attributeGetterFunctions.put(
			"longName", OrganizationDetail::getLongName);
		attributeSetterBiConsumers.put(
			"longName",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setLongName);
		attributeGetterFunctions.put(
			"division", OrganizationDetail::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setDivision);
		attributeGetterFunctions.put(
			"addressedTo", OrganizationDetail::getAddressedTo);
		attributeSetterBiConsumers.put(
			"addressedTo",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setAddressedTo);
		attributeGetterFunctions.put(
			"address1", OrganizationDetail::getAddress1);
		attributeSetterBiConsumers.put(
			"address1",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setAddress1);
		attributeGetterFunctions.put(
			"address2", OrganizationDetail::getAddress2);
		attributeSetterBiConsumers.put(
			"address2",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setAddress2);
		attributeGetterFunctions.put(
			"address3", OrganizationDetail::getAddress3);
		attributeSetterBiConsumers.put(
			"address3",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setAddress3);
		attributeGetterFunctions.put("city", OrganizationDetail::getCity);
		attributeSetterBiConsumers.put(
			"city",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setCity);
		attributeGetterFunctions.put(
			"district", OrganizationDetail::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setDistrict);
		attributeGetterFunctions.put("stateId", OrganizationDetail::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<OrganizationDetail, Long>)
				OrganizationDetail::setStateId);
		attributeGetterFunctions.put("zone", OrganizationDetail::getZone);
		attributeSetterBiConsumers.put(
			"zone",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setZone);
		attributeGetterFunctions.put("pin", OrganizationDetail::getPin);
		attributeSetterBiConsumers.put(
			"pin",
			(BiConsumer<OrganizationDetail, String>)OrganizationDetail::setPin);
		attributeGetterFunctions.put(
			"nearestRailwayStation",
			OrganizationDetail::getNearestRailwayStation);
		attributeSetterBiConsumers.put(
			"nearestRailwayStation",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setNearestRailwayStation);
		attributeGetterFunctions.put(
			"telegram", OrganizationDetail::getTelegram);
		attributeSetterBiConsumers.put(
			"telegram",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setTelegram);
		attributeGetterFunctions.put("fax", OrganizationDetail::getFax);
		attributeSetterBiConsumers.put(
			"fax",
			(BiConsumer<OrganizationDetail, String>)OrganizationDetail::setFax);
		attributeGetterFunctions.put("telex", OrganizationDetail::getTelex);
		attributeSetterBiConsumers.put(
			"telex",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setTelex);
		attributeGetterFunctions.put(
			"telephone1", OrganizationDetail::getTelephone1);
		attributeSetterBiConsumers.put(
			"telephone1",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setTelephone1);
		attributeGetterFunctions.put(
			"telephone2", OrganizationDetail::getTelephone2);
		attributeSetterBiConsumers.put(
			"telephone2",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setTelephone2);
		attributeGetterFunctions.put(
			"stationId", OrganizationDetail::getStationId);
		attributeSetterBiConsumers.put(
			"stationId",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setStationId);
		attributeGetterFunctions.put(
			"unitType", OrganizationDetail::getUnitType);
		attributeSetterBiConsumers.put(
			"unitType",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setUnitType);
		attributeGetterFunctions.put(
			"orgStatus", OrganizationDetail::getOrgStatus);
		attributeSetterBiConsumers.put(
			"orgStatus",
			(BiConsumer<OrganizationDetail, String>)
				OrganizationDetail::setOrgStatus);
		attributeGetterFunctions.put("deleted", OrganizationDetail::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<OrganizationDetail, Boolean>)
				OrganizationDetail::setDeleted);
		attributeGetterFunctions.put("status", OrganizationDetail::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<OrganizationDetail, Integer>)
				OrganizationDetail::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getOrganizationDetailId() {
		return _organizationDetailId;
	}

	@Override
	public void setOrganizationDetailId(long organizationDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationDetailId = organizationDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationId = organizationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganizationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organizationId"));
	}

	@JSON
	@Override
	public String getOrganizationCode() {
		if (_organizationCode == null) {
			return "";
		}
		else {
			return _organizationCode;
		}
	}

	@Override
	public void setOrganizationCode(String organizationCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationCode = organizationCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalOrganizationCode() {
		return getColumnOriginalValue("organizationCode");
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentId = parentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalParentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("parentId"));
	}

	@JSON
	@Override
	public String getParentCode() {
		if (_parentCode == null) {
			return "";
		}
		else {
			return _parentCode;
		}
	}

	@Override
	public void setParentCode(String parentCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentCode = parentCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalParentCode() {
		return getColumnOriginalValue("parentCode");
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalType() {
		return getColumnOriginalValue("type_");
	}

	@JSON
	@Override
	public String getShortName() {
		if (_shortName == null) {
			return "";
		}
		else {
			return _shortName;
		}
	}

	@Override
	public void setShortName(String shortName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shortName = shortName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalShortName() {
		return getColumnOriginalValue("shortName");
	}

	@JSON
	@Override
	public String getLongName() {
		if (_longName == null) {
			return "";
		}
		else {
			return _longName;
		}
	}

	@Override
	public void setLongName(String longName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longName = longName;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return "";
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	@JSON
	@Override
	public String getAddressedTo() {
		if (_addressedTo == null) {
			return "";
		}
		else {
			return _addressedTo;
		}
	}

	@Override
	public void setAddressedTo(String addressedTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressedTo = addressedTo;
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return "";
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address1 = address1;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address2 = address2;
	}

	@JSON
	@Override
	public String getAddress3() {
		if (_address3 == null) {
			return "";
		}
		else {
			return _address3;
		}
	}

	@Override
	public void setAddress3(String address3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address3 = address3;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStateId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("stateId"));
	}

	@JSON
	@Override
	public String getZone() {
		if (_zone == null) {
			return "";
		}
		else {
			return _zone;
		}
	}

	@Override
	public void setZone(String zone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zone = zone;
	}

	@JSON
	@Override
	public String getPin() {
		if (_pin == null) {
			return "";
		}
		else {
			return _pin;
		}
	}

	@Override
	public void setPin(String pin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pin = pin;
	}

	@JSON
	@Override
	public String getNearestRailwayStation() {
		if (_nearestRailwayStation == null) {
			return "";
		}
		else {
			return _nearestRailwayStation;
		}
	}

	@Override
	public void setNearestRailwayStation(String nearestRailwayStation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nearestRailwayStation = nearestRailwayStation;
	}

	@JSON
	@Override
	public String getTelegram() {
		if (_telegram == null) {
			return "";
		}
		else {
			return _telegram;
		}
	}

	@Override
	public void setTelegram(String telegram) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telegram = telegram;
	}

	@JSON
	@Override
	public String getFax() {
		if (_fax == null) {
			return "";
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fax = fax;
	}

	@JSON
	@Override
	public String getTelex() {
		if (_telex == null) {
			return "";
		}
		else {
			return _telex;
		}
	}

	@Override
	public void setTelex(String telex) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telex = telex;
	}

	@JSON
	@Override
	public String getTelephone1() {
		if (_telephone1 == null) {
			return "";
		}
		else {
			return _telephone1;
		}
	}

	@Override
	public void setTelephone1(String telephone1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone1 = telephone1;
	}

	@JSON
	@Override
	public String getTelephone2() {
		if (_telephone2 == null) {
			return "";
		}
		else {
			return _telephone2;
		}
	}

	@Override
	public void setTelephone2(String telephone2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone2 = telephone2;
	}

	@JSON
	@Override
	public String getStationId() {
		if (_stationId == null) {
			return "";
		}
		else {
			return _stationId;
		}
	}

	@Override
	public void setStationId(String stationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stationId = stationId;
	}

	@JSON
	@Override
	public String getUnitType() {
		if (_unitType == null) {
			return "";
		}
		else {
			return _unitType;
		}
	}

	@Override
	public void setUnitType(String unitType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitType = unitType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUnitType() {
		return getColumnOriginalValue("unitType");
	}

	@JSON
	@Override
	public String getOrgStatus() {
		if (_orgStatus == null) {
			return "";
		}
		else {
			return _orgStatus;
		}
	}

	@Override
	public void setOrgStatus(String orgStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgStatus = orgStatus;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OrganizationDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrganizationDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OrganizationDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrganizationDetailImpl organizationDetailImpl =
			new OrganizationDetailImpl();

		organizationDetailImpl.setOrganizationDetailId(
			getOrganizationDetailId());
		organizationDetailImpl.setGroupId(getGroupId());
		organizationDetailImpl.setCompanyId(getCompanyId());
		organizationDetailImpl.setUserId(getUserId());
		organizationDetailImpl.setUserName(getUserName());
		organizationDetailImpl.setCreateDate(getCreateDate());
		organizationDetailImpl.setModifiedDate(getModifiedDate());
		organizationDetailImpl.setOrganizationId(getOrganizationId());
		organizationDetailImpl.setOrganizationCode(getOrganizationCode());
		organizationDetailImpl.setParentId(getParentId());
		organizationDetailImpl.setParentCode(getParentCode());
		organizationDetailImpl.setType(getType());
		organizationDetailImpl.setShortName(getShortName());
		organizationDetailImpl.setLongName(getLongName());
		organizationDetailImpl.setDivision(getDivision());
		organizationDetailImpl.setAddressedTo(getAddressedTo());
		organizationDetailImpl.setAddress1(getAddress1());
		organizationDetailImpl.setAddress2(getAddress2());
		organizationDetailImpl.setAddress3(getAddress3());
		organizationDetailImpl.setCity(getCity());
		organizationDetailImpl.setDistrict(getDistrict());
		organizationDetailImpl.setStateId(getStateId());
		organizationDetailImpl.setZone(getZone());
		organizationDetailImpl.setPin(getPin());
		organizationDetailImpl.setNearestRailwayStation(
			getNearestRailwayStation());
		organizationDetailImpl.setTelegram(getTelegram());
		organizationDetailImpl.setFax(getFax());
		organizationDetailImpl.setTelex(getTelex());
		organizationDetailImpl.setTelephone1(getTelephone1());
		organizationDetailImpl.setTelephone2(getTelephone2());
		organizationDetailImpl.setStationId(getStationId());
		organizationDetailImpl.setUnitType(getUnitType());
		organizationDetailImpl.setOrgStatus(getOrgStatus());
		organizationDetailImpl.setDeleted(isDeleted());
		organizationDetailImpl.setStatus(getStatus());

		organizationDetailImpl.resetOriginalValues();

		return organizationDetailImpl;
	}

	@Override
	public int compareTo(OrganizationDetail organizationDetail) {
		int value = 0;

		value = getShortName().compareTo(organizationDetail.getShortName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OrganizationDetail)) {
			return false;
		}

		OrganizationDetail organizationDetail = (OrganizationDetail)object;

		long primaryKey = organizationDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OrganizationDetail> toCacheModel() {
		OrganizationDetailCacheModel organizationDetailCacheModel =
			new OrganizationDetailCacheModel();

		organizationDetailCacheModel.organizationDetailId =
			getOrganizationDetailId();

		organizationDetailCacheModel.groupId = getGroupId();

		organizationDetailCacheModel.companyId = getCompanyId();

		organizationDetailCacheModel.userId = getUserId();

		organizationDetailCacheModel.userName = getUserName();

		String userName = organizationDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			organizationDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			organizationDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			organizationDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			organizationDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			organizationDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		organizationDetailCacheModel.organizationId = getOrganizationId();

		organizationDetailCacheModel.organizationCode = getOrganizationCode();

		String organizationCode = organizationDetailCacheModel.organizationCode;

		if ((organizationCode != null) && (organizationCode.length() == 0)) {
			organizationDetailCacheModel.organizationCode = null;
		}

		organizationDetailCacheModel.parentId = getParentId();

		organizationDetailCacheModel.parentCode = getParentCode();

		String parentCode = organizationDetailCacheModel.parentCode;

		if ((parentCode != null) && (parentCode.length() == 0)) {
			organizationDetailCacheModel.parentCode = null;
		}

		organizationDetailCacheModel.type = getType();

		String type = organizationDetailCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			organizationDetailCacheModel.type = null;
		}

		organizationDetailCacheModel.shortName = getShortName();

		String shortName = organizationDetailCacheModel.shortName;

		if ((shortName != null) && (shortName.length() == 0)) {
			organizationDetailCacheModel.shortName = null;
		}

		organizationDetailCacheModel.longName = getLongName();

		String longName = organizationDetailCacheModel.longName;

		if ((longName != null) && (longName.length() == 0)) {
			organizationDetailCacheModel.longName = null;
		}

		organizationDetailCacheModel.division = getDivision();

		String division = organizationDetailCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			organizationDetailCacheModel.division = null;
		}

		organizationDetailCacheModel.addressedTo = getAddressedTo();

		String addressedTo = organizationDetailCacheModel.addressedTo;

		if ((addressedTo != null) && (addressedTo.length() == 0)) {
			organizationDetailCacheModel.addressedTo = null;
		}

		organizationDetailCacheModel.address1 = getAddress1();

		String address1 = organizationDetailCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			organizationDetailCacheModel.address1 = null;
		}

		organizationDetailCacheModel.address2 = getAddress2();

		String address2 = organizationDetailCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			organizationDetailCacheModel.address2 = null;
		}

		organizationDetailCacheModel.address3 = getAddress3();

		String address3 = organizationDetailCacheModel.address3;

		if ((address3 != null) && (address3.length() == 0)) {
			organizationDetailCacheModel.address3 = null;
		}

		organizationDetailCacheModel.city = getCity();

		String city = organizationDetailCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			organizationDetailCacheModel.city = null;
		}

		organizationDetailCacheModel.district = getDistrict();

		String district = organizationDetailCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			organizationDetailCacheModel.district = null;
		}

		organizationDetailCacheModel.stateId = getStateId();

		organizationDetailCacheModel.zone = getZone();

		String zone = organizationDetailCacheModel.zone;

		if ((zone != null) && (zone.length() == 0)) {
			organizationDetailCacheModel.zone = null;
		}

		organizationDetailCacheModel.pin = getPin();

		String pin = organizationDetailCacheModel.pin;

		if ((pin != null) && (pin.length() == 0)) {
			organizationDetailCacheModel.pin = null;
		}

		organizationDetailCacheModel.nearestRailwayStation =
			getNearestRailwayStation();

		String nearestRailwayStation =
			organizationDetailCacheModel.nearestRailwayStation;

		if ((nearestRailwayStation != null) &&
			(nearestRailwayStation.length() == 0)) {

			organizationDetailCacheModel.nearestRailwayStation = null;
		}

		organizationDetailCacheModel.telegram = getTelegram();

		String telegram = organizationDetailCacheModel.telegram;

		if ((telegram != null) && (telegram.length() == 0)) {
			organizationDetailCacheModel.telegram = null;
		}

		organizationDetailCacheModel.fax = getFax();

		String fax = organizationDetailCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			organizationDetailCacheModel.fax = null;
		}

		organizationDetailCacheModel.telex = getTelex();

		String telex = organizationDetailCacheModel.telex;

		if ((telex != null) && (telex.length() == 0)) {
			organizationDetailCacheModel.telex = null;
		}

		organizationDetailCacheModel.telephone1 = getTelephone1();

		String telephone1 = organizationDetailCacheModel.telephone1;

		if ((telephone1 != null) && (telephone1.length() == 0)) {
			organizationDetailCacheModel.telephone1 = null;
		}

		organizationDetailCacheModel.telephone2 = getTelephone2();

		String telephone2 = organizationDetailCacheModel.telephone2;

		if ((telephone2 != null) && (telephone2.length() == 0)) {
			organizationDetailCacheModel.telephone2 = null;
		}

		organizationDetailCacheModel.stationId = getStationId();

		String stationId = organizationDetailCacheModel.stationId;

		if ((stationId != null) && (stationId.length() == 0)) {
			organizationDetailCacheModel.stationId = null;
		}

		organizationDetailCacheModel.unitType = getUnitType();

		String unitType = organizationDetailCacheModel.unitType;

		if ((unitType != null) && (unitType.length() == 0)) {
			organizationDetailCacheModel.unitType = null;
		}

		organizationDetailCacheModel.orgStatus = getOrgStatus();

		String orgStatus = organizationDetailCacheModel.orgStatus;

		if ((orgStatus != null) && (orgStatus.length() == 0)) {
			organizationDetailCacheModel.orgStatus = null;
		}

		organizationDetailCacheModel.deleted = isDeleted();

		organizationDetailCacheModel.status = getStatus();

		return organizationDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OrganizationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OrganizationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrganizationDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((OrganizationDetail)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<OrganizationDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<OrganizationDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OrganizationDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((OrganizationDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OrganizationDetail>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _organizationDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _organizationId;
	private String _organizationCode;
	private long _parentId;
	private String _parentCode;
	private String _type;
	private String _shortName;
	private String _longName;
	private String _division;
	private String _addressedTo;
	private String _address1;
	private String _address2;
	private String _address3;
	private String _city;
	private String _district;
	private long _stateId;
	private String _zone;
	private String _pin;
	private String _nearestRailwayStation;
	private String _telegram;
	private String _fax;
	private String _telex;
	private String _telephone1;
	private String _telephone2;
	private String _stationId;
	private String _unitType;
	private String _orgStatus;
	private boolean _deleted;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<OrganizationDetail, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OrganizationDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"organizationDetailId", _organizationDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("organizationId", _organizationId);
		_columnOriginalValues.put("organizationCode", _organizationCode);
		_columnOriginalValues.put("parentId", _parentId);
		_columnOriginalValues.put("parentCode", _parentCode);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("shortName", _shortName);
		_columnOriginalValues.put("longName", _longName);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("addressedTo", _addressedTo);
		_columnOriginalValues.put("address1", _address1);
		_columnOriginalValues.put("address2", _address2);
		_columnOriginalValues.put("address3", _address3);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("zone", _zone);
		_columnOriginalValues.put("pin", _pin);
		_columnOriginalValues.put(
			"nearestRailwayStation", _nearestRailwayStation);
		_columnOriginalValues.put("telegram", _telegram);
		_columnOriginalValues.put("fax", _fax);
		_columnOriginalValues.put("telex", _telex);
		_columnOriginalValues.put("telephone1", _telephone1);
		_columnOriginalValues.put("telephone2", _telephone2);
		_columnOriginalValues.put("stationId", _stationId);
		_columnOriginalValues.put("unitType", _unitType);
		_columnOriginalValues.put("orgStatus", _orgStatus);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("organizationDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("organizationId", 128L);

		columnBitmasks.put("organizationCode", 256L);

		columnBitmasks.put("parentId", 512L);

		columnBitmasks.put("parentCode", 1024L);

		columnBitmasks.put("type_", 2048L);

		columnBitmasks.put("shortName", 4096L);

		columnBitmasks.put("longName", 8192L);

		columnBitmasks.put("division", 16384L);

		columnBitmasks.put("addressedTo", 32768L);

		columnBitmasks.put("address1", 65536L);

		columnBitmasks.put("address2", 131072L);

		columnBitmasks.put("address3", 262144L);

		columnBitmasks.put("city", 524288L);

		columnBitmasks.put("district", 1048576L);

		columnBitmasks.put("stateId", 2097152L);

		columnBitmasks.put("zone", 4194304L);

		columnBitmasks.put("pin", 8388608L);

		columnBitmasks.put("nearestRailwayStation", 16777216L);

		columnBitmasks.put("telegram", 33554432L);

		columnBitmasks.put("fax", 67108864L);

		columnBitmasks.put("telex", 134217728L);

		columnBitmasks.put("telephone1", 268435456L);

		columnBitmasks.put("telephone2", 536870912L);

		columnBitmasks.put("stationId", 1073741824L);

		columnBitmasks.put("unitType", 2147483648L);

		columnBitmasks.put("orgStatus", 4294967296L);

		columnBitmasks.put("deleted", 8589934592L);

		columnBitmasks.put("status", 17179869184L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OrganizationDetail _escapedModel;

}