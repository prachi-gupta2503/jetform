/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.mdm.liferay.model.impl;

import com.adjecti.mdm.liferay.model.Designation;
import com.adjecti.mdm.liferay.model.DesignationModel;
import com.adjecti.mdm.liferay.model.DesignationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Designation service. Represents a row in the &quot;mdm_Designation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DesignationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DesignationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DesignationImpl
 * @generated
 */
@JSON(strict = true)
public class DesignationModelImpl
	extends BaseModelImpl<Designation> implements DesignationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a designation model instance should use the <code>Designation</code> interface instead.
	 */
	public static final String TABLE_NAME = "mdm_Designation";

	public static final Object[][] TABLE_COLUMNS = {
		{"designationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"code_", Types.VARCHAR},
		{"name_En", Types.VARCHAR}, {"name_Hi", Types.VARCHAR},
		{"shortName", Types.VARCHAR}, {"longName", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"designationClassId", Types.BIGINT},
		{"designationGroupId", Types.BIGINT},
		{"designationGroup", Types.VARCHAR}, {"gradeId", Types.BIGINT},
		{"organizationType", Types.VARCHAR}, {"sequenceNo", Types.VARCHAR},
		{"rank_", Types.INTEGER}, {"scopeType", Types.INTEGER},
		{"scopeOrganizationId", Types.BIGINT},
		{"scopeOrganizationTypeId", Types.BIGINT},
		{"scopePostId", Types.BIGINT}, {"designationModeId", Types.BIGINT},
		{"successorGradeId", Types.BIGINT},
		{"scopeOrganizationName", Types.VARCHAR},
		{"scopePostName", Types.VARCHAR}, {"deleted", Types.BOOLEAN},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("designationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name_En", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name_Hi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designationClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rank_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("scopeType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("scopeOrganizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scopeOrganizationTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scopePostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("designationModeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("successorGradeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scopeOrganizationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scopePostName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table mdm_Designation (designationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,name_En VARCHAR(75) null,name_Hi VARCHAR(75) null,shortName VARCHAR(75) null,longName VARCHAR(75) null,description VARCHAR(75) null,designationClassId LONG,designationGroupId LONG,designationGroup VARCHAR(75) null,gradeId LONG,organizationType VARCHAR(75) null,sequenceNo VARCHAR(75) null,rank_ INTEGER,scopeType INTEGER,scopeOrganizationId LONG,scopeOrganizationTypeId LONG,scopePostId LONG,designationModeId LONG,successorGradeId LONG,scopeOrganizationName VARCHAR(75) null,scopePostName VARCHAR(75) null,deleted BOOLEAN,status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table mdm_Designation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY designation.name_En ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY mdm_Designation.name_En ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DELETED_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESIGNATIONCLASSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESIGNATIONGROUP_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESIGNATIONGROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GRADEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long NAME_EN_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Designation toModel(DesignationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Designation model = new DesignationImpl();

		model.setDesignationId(soapModel.getDesignationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCode(soapModel.getCode());
		model.setName_En(soapModel.getName_En());
		model.setName_Hi(soapModel.getName_Hi());
		model.setShortName(soapModel.getShortName());
		model.setLongName(soapModel.getLongName());
		model.setDescription(soapModel.getDescription());
		model.setDesignationClassId(soapModel.getDesignationClassId());
		model.setDesignationGroupId(soapModel.getDesignationGroupId());
		model.setDesignationGroup(soapModel.getDesignationGroup());
		model.setGradeId(soapModel.getGradeId());
		model.setOrganizationType(soapModel.getOrganizationType());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setRank(soapModel.getRank());
		model.setScopeType(soapModel.getScopeType());
		model.setScopeOrganizationId(soapModel.getScopeOrganizationId());
		model.setScopeOrganizationTypeId(
			soapModel.getScopeOrganizationTypeId());
		model.setScopePostId(soapModel.getScopePostId());
		model.setDesignationModeId(soapModel.getDesignationModeId());
		model.setSuccessorGradeId(soapModel.getSuccessorGradeId());
		model.setScopeOrganizationName(soapModel.getScopeOrganizationName());
		model.setScopePostName(soapModel.getScopePostName());
		model.setDeleted(soapModel.isDeleted());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Designation> toModels(DesignationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Designation> models = new ArrayList<Designation>(
			soapModels.length);

		for (DesignationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DesignationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _designationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDesignationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _designationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Designation.class;
	}

	@Override
	public String getModelClassName() {
		return Designation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Designation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Designation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Designation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Designation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Designation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Designation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Designation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Designation.class.getClassLoader(), Designation.class,
			ModelWrapper.class);

		try {
			Constructor<Designation> constructor =
				(Constructor<Designation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Designation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Designation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Designation, Object>>();
		Map<String, BiConsumer<Designation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Designation, ?>>();

		attributeGetterFunctions.put(
			"designationId", Designation::getDesignationId);
		attributeSetterBiConsumers.put(
			"designationId",
			(BiConsumer<Designation, Long>)Designation::setDesignationId);
		attributeGetterFunctions.put("groupId", Designation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Designation, Long>)Designation::setGroupId);
		attributeGetterFunctions.put("companyId", Designation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Designation, Long>)Designation::setCompanyId);
		attributeGetterFunctions.put("userId", Designation::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Designation, Long>)Designation::setUserId);
		attributeGetterFunctions.put("userName", Designation::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Designation, String>)Designation::setUserName);
		attributeGetterFunctions.put("createDate", Designation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Designation, Date>)Designation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Designation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Designation, Date>)Designation::setModifiedDate);
		attributeGetterFunctions.put("code", Designation::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<Designation, String>)Designation::setCode);
		attributeGetterFunctions.put("name_En", Designation::getName_En);
		attributeSetterBiConsumers.put(
			"name_En",
			(BiConsumer<Designation, String>)Designation::setName_En);
		attributeGetterFunctions.put("name_Hi", Designation::getName_Hi);
		attributeSetterBiConsumers.put(
			"name_Hi",
			(BiConsumer<Designation, String>)Designation::setName_Hi);
		attributeGetterFunctions.put("shortName", Designation::getShortName);
		attributeSetterBiConsumers.put(
			"shortName",
			(BiConsumer<Designation, String>)Designation::setShortName);
		attributeGetterFunctions.put("longName", Designation::getLongName);
		attributeSetterBiConsumers.put(
			"longName",
			(BiConsumer<Designation, String>)Designation::setLongName);
		attributeGetterFunctions.put(
			"description", Designation::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Designation, String>)Designation::setDescription);
		attributeGetterFunctions.put(
			"designationClassId", Designation::getDesignationClassId);
		attributeSetterBiConsumers.put(
			"designationClassId",
			(BiConsumer<Designation, Long>)Designation::setDesignationClassId);
		attributeGetterFunctions.put(
			"designationGroupId", Designation::getDesignationGroupId);
		attributeSetterBiConsumers.put(
			"designationGroupId",
			(BiConsumer<Designation, Long>)Designation::setDesignationGroupId);
		attributeGetterFunctions.put(
			"designationGroup", Designation::getDesignationGroup);
		attributeSetterBiConsumers.put(
			"designationGroup",
			(BiConsumer<Designation, String>)Designation::setDesignationGroup);
		attributeGetterFunctions.put("gradeId", Designation::getGradeId);
		attributeSetterBiConsumers.put(
			"gradeId", (BiConsumer<Designation, Long>)Designation::setGradeId);
		attributeGetterFunctions.put(
			"organizationType", Designation::getOrganizationType);
		attributeSetterBiConsumers.put(
			"organizationType",
			(BiConsumer<Designation, String>)Designation::setOrganizationType);
		attributeGetterFunctions.put("sequenceNo", Designation::getSequenceNo);
		attributeSetterBiConsumers.put(
			"sequenceNo",
			(BiConsumer<Designation, String>)Designation::setSequenceNo);
		attributeGetterFunctions.put("rank", Designation::getRank);
		attributeSetterBiConsumers.put(
			"rank", (BiConsumer<Designation, Integer>)Designation::setRank);
		attributeGetterFunctions.put("scopeType", Designation::getScopeType);
		attributeSetterBiConsumers.put(
			"scopeType",
			(BiConsumer<Designation, Integer>)Designation::setScopeType);
		attributeGetterFunctions.put(
			"scopeOrganizationId", Designation::getScopeOrganizationId);
		attributeSetterBiConsumers.put(
			"scopeOrganizationId",
			(BiConsumer<Designation, Long>)Designation::setScopeOrganizationId);
		attributeGetterFunctions.put(
			"scopeOrganizationTypeId", Designation::getScopeOrganizationTypeId);
		attributeSetterBiConsumers.put(
			"scopeOrganizationTypeId",
			(BiConsumer<Designation, Long>)
				Designation::setScopeOrganizationTypeId);
		attributeGetterFunctions.put(
			"scopePostId", Designation::getScopePostId);
		attributeSetterBiConsumers.put(
			"scopePostId",
			(BiConsumer<Designation, Long>)Designation::setScopePostId);
		attributeGetterFunctions.put(
			"designationModeId", Designation::getDesignationModeId);
		attributeSetterBiConsumers.put(
			"designationModeId",
			(BiConsumer<Designation, Long>)Designation::setDesignationModeId);
		attributeGetterFunctions.put(
			"successorGradeId", Designation::getSuccessorGradeId);
		attributeSetterBiConsumers.put(
			"successorGradeId",
			(BiConsumer<Designation, Long>)Designation::setSuccessorGradeId);
		attributeGetterFunctions.put(
			"scopeOrganizationName", Designation::getScopeOrganizationName);
		attributeSetterBiConsumers.put(
			"scopeOrganizationName",
			(BiConsumer<Designation, String>)
				Designation::setScopeOrganizationName);
		attributeGetterFunctions.put(
			"scopePostName", Designation::getScopePostName);
		attributeSetterBiConsumers.put(
			"scopePostName",
			(BiConsumer<Designation, String>)Designation::setScopePostName);
		attributeGetterFunctions.put("deleted", Designation::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<Designation, Boolean>)Designation::setDeleted);
		attributeGetterFunctions.put("status", Designation::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Designation, Integer>)Designation::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDesignationId() {
		return _designationId;
	}

	@Override
	public void setDesignationId(long designationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationId = designationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCode() {
		return getColumnOriginalValue("code_");
	}

	@JSON
	@Override
	public String getName_En() {
		if (_name_En == null) {
			return "";
		}
		else {
			return _name_En;
		}
	}

	@Override
	public void setName_En(String name_En) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name_En = name_En;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName_En() {
		return getColumnOriginalValue("name_En");
	}

	@JSON
	@Override
	public String getName_Hi() {
		if (_name_Hi == null) {
			return "";
		}
		else {
			return _name_Hi;
		}
	}

	@Override
	public void setName_Hi(String name_Hi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name_Hi = name_Hi;
	}

	@JSON
	@Override
	public String getShortName() {
		if (_shortName == null) {
			return "";
		}
		else {
			return _shortName;
		}
	}

	@Override
	public void setShortName(String shortName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shortName = shortName;
	}

	@JSON
	@Override
	public String getLongName() {
		if (_longName == null) {
			return "";
		}
		else {
			return _longName;
		}
	}

	@Override
	public void setLongName(String longName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longName = longName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getDesignationClassId() {
		return _designationClassId;
	}

	@Override
	public void setDesignationClassId(long designationClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationClassId = designationClassId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDesignationClassId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("designationClassId"));
	}

	@JSON
	@Override
	public long getDesignationGroupId() {
		return _designationGroupId;
	}

	@Override
	public void setDesignationGroupId(long designationGroupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationGroupId = designationGroupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDesignationGroupId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("designationGroupId"));
	}

	@JSON
	@Override
	public String getDesignationGroup() {
		if (_designationGroup == null) {
			return "";
		}
		else {
			return _designationGroup;
		}
	}

	@Override
	public void setDesignationGroup(String designationGroup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationGroup = designationGroup;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDesignationGroup() {
		return getColumnOriginalValue("designationGroup");
	}

	@JSON
	@Override
	public long getGradeId() {
		return _gradeId;
	}

	@Override
	public void setGradeId(long gradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gradeId = gradeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGradeId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("gradeId"));
	}

	@JSON
	@Override
	public String getOrganizationType() {
		if (_organizationType == null) {
			return "";
		}
		else {
			return _organizationType;
		}
	}

	@Override
	public void setOrganizationType(String organizationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationType = organizationType;
	}

	@JSON
	@Override
	public String getSequenceNo() {
		if (_sequenceNo == null) {
			return "";
		}
		else {
			return _sequenceNo;
		}
	}

	@Override
	public void setSequenceNo(String sequenceNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public int getRank() {
		return _rank;
	}

	@Override
	public void setRank(int rank) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rank = rank;
	}

	@JSON
	@Override
	public int getScopeType() {
		return _scopeType;
	}

	@Override
	public void setScopeType(int scopeType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopeType = scopeType;
	}

	@JSON
	@Override
	public long getScopeOrganizationId() {
		return _scopeOrganizationId;
	}

	@Override
	public void setScopeOrganizationId(long scopeOrganizationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopeOrganizationId = scopeOrganizationId;
	}

	@JSON
	@Override
	public long getScopeOrganizationTypeId() {
		return _scopeOrganizationTypeId;
	}

	@Override
	public void setScopeOrganizationTypeId(long scopeOrganizationTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopeOrganizationTypeId = scopeOrganizationTypeId;
	}

	@JSON
	@Override
	public long getScopePostId() {
		return _scopePostId;
	}

	@Override
	public void setScopePostId(long scopePostId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopePostId = scopePostId;
	}

	@JSON
	@Override
	public long getDesignationModeId() {
		return _designationModeId;
	}

	@Override
	public void setDesignationModeId(long designationModeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designationModeId = designationModeId;
	}

	@JSON
	@Override
	public long getSuccessorGradeId() {
		return _successorGradeId;
	}

	@Override
	public void setSuccessorGradeId(long successorGradeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successorGradeId = successorGradeId;
	}

	@JSON
	@Override
	public String getScopeOrganizationName() {
		if (_scopeOrganizationName == null) {
			return "";
		}
		else {
			return _scopeOrganizationName;
		}
	}

	@Override
	public void setScopeOrganizationName(String scopeOrganizationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopeOrganizationName = scopeOrganizationName;
	}

	@JSON
	@Override
	public String getScopePostName() {
		if (_scopePostName == null) {
			return "";
		}
		else {
			return _scopePostName;
		}
	}

	@Override
	public void setScopePostName(String scopePostName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopePostName = scopePostName;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalDeleted() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("deleted"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Designation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Designation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Designation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DesignationImpl designationImpl = new DesignationImpl();

		designationImpl.setDesignationId(getDesignationId());
		designationImpl.setGroupId(getGroupId());
		designationImpl.setCompanyId(getCompanyId());
		designationImpl.setUserId(getUserId());
		designationImpl.setUserName(getUserName());
		designationImpl.setCreateDate(getCreateDate());
		designationImpl.setModifiedDate(getModifiedDate());
		designationImpl.setCode(getCode());
		designationImpl.setName_En(getName_En());
		designationImpl.setName_Hi(getName_Hi());
		designationImpl.setShortName(getShortName());
		designationImpl.setLongName(getLongName());
		designationImpl.setDescription(getDescription());
		designationImpl.setDesignationClassId(getDesignationClassId());
		designationImpl.setDesignationGroupId(getDesignationGroupId());
		designationImpl.setDesignationGroup(getDesignationGroup());
		designationImpl.setGradeId(getGradeId());
		designationImpl.setOrganizationType(getOrganizationType());
		designationImpl.setSequenceNo(getSequenceNo());
		designationImpl.setRank(getRank());
		designationImpl.setScopeType(getScopeType());
		designationImpl.setScopeOrganizationId(getScopeOrganizationId());
		designationImpl.setScopeOrganizationTypeId(
			getScopeOrganizationTypeId());
		designationImpl.setScopePostId(getScopePostId());
		designationImpl.setDesignationModeId(getDesignationModeId());
		designationImpl.setSuccessorGradeId(getSuccessorGradeId());
		designationImpl.setScopeOrganizationName(getScopeOrganizationName());
		designationImpl.setScopePostName(getScopePostName());
		designationImpl.setDeleted(isDeleted());
		designationImpl.setStatus(getStatus());

		designationImpl.resetOriginalValues();

		return designationImpl;
	}

	@Override
	public int compareTo(Designation designation) {
		int value = 0;

		value = getName_En().compareTo(designation.getName_En());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Designation)) {
			return false;
		}

		Designation designation = (Designation)object;

		long primaryKey = designation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Designation> toCacheModel() {
		DesignationCacheModel designationCacheModel =
			new DesignationCacheModel();

		designationCacheModel.designationId = getDesignationId();

		designationCacheModel.groupId = getGroupId();

		designationCacheModel.companyId = getCompanyId();

		designationCacheModel.userId = getUserId();

		designationCacheModel.userName = getUserName();

		String userName = designationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			designationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			designationCacheModel.createDate = createDate.getTime();
		}
		else {
			designationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			designationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			designationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		designationCacheModel.code = getCode();

		String code = designationCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			designationCacheModel.code = null;
		}

		designationCacheModel.name_En = getName_En();

		String name_En = designationCacheModel.name_En;

		if ((name_En != null) && (name_En.length() == 0)) {
			designationCacheModel.name_En = null;
		}

		designationCacheModel.name_Hi = getName_Hi();

		String name_Hi = designationCacheModel.name_Hi;

		if ((name_Hi != null) && (name_Hi.length() == 0)) {
			designationCacheModel.name_Hi = null;
		}

		designationCacheModel.shortName = getShortName();

		String shortName = designationCacheModel.shortName;

		if ((shortName != null) && (shortName.length() == 0)) {
			designationCacheModel.shortName = null;
		}

		designationCacheModel.longName = getLongName();

		String longName = designationCacheModel.longName;

		if ((longName != null) && (longName.length() == 0)) {
			designationCacheModel.longName = null;
		}

		designationCacheModel.description = getDescription();

		String description = designationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			designationCacheModel.description = null;
		}

		designationCacheModel.designationClassId = getDesignationClassId();

		designationCacheModel.designationGroupId = getDesignationGroupId();

		designationCacheModel.designationGroup = getDesignationGroup();

		String designationGroup = designationCacheModel.designationGroup;

		if ((designationGroup != null) && (designationGroup.length() == 0)) {
			designationCacheModel.designationGroup = null;
		}

		designationCacheModel.gradeId = getGradeId();

		designationCacheModel.organizationType = getOrganizationType();

		String organizationType = designationCacheModel.organizationType;

		if ((organizationType != null) && (organizationType.length() == 0)) {
			designationCacheModel.organizationType = null;
		}

		designationCacheModel.sequenceNo = getSequenceNo();

		String sequenceNo = designationCacheModel.sequenceNo;

		if ((sequenceNo != null) && (sequenceNo.length() == 0)) {
			designationCacheModel.sequenceNo = null;
		}

		designationCacheModel.rank = getRank();

		designationCacheModel.scopeType = getScopeType();

		designationCacheModel.scopeOrganizationId = getScopeOrganizationId();

		designationCacheModel.scopeOrganizationTypeId =
			getScopeOrganizationTypeId();

		designationCacheModel.scopePostId = getScopePostId();

		designationCacheModel.designationModeId = getDesignationModeId();

		designationCacheModel.successorGradeId = getSuccessorGradeId();

		designationCacheModel.scopeOrganizationName =
			getScopeOrganizationName();

		String scopeOrganizationName =
			designationCacheModel.scopeOrganizationName;

		if ((scopeOrganizationName != null) &&
			(scopeOrganizationName.length() == 0)) {

			designationCacheModel.scopeOrganizationName = null;
		}

		designationCacheModel.scopePostName = getScopePostName();

		String scopePostName = designationCacheModel.scopePostName;

		if ((scopePostName != null) && (scopePostName.length() == 0)) {
			designationCacheModel.scopePostName = null;
		}

		designationCacheModel.deleted = isDeleted();

		designationCacheModel.status = getStatus();

		return designationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Designation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Designation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Designation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Designation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Designation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Designation>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _designationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _code;
	private String _name_En;
	private String _name_Hi;
	private String _shortName;
	private String _longName;
	private String _description;
	private long _designationClassId;
	private long _designationGroupId;
	private String _designationGroup;
	private long _gradeId;
	private String _organizationType;
	private String _sequenceNo;
	private int _rank;
	private int _scopeType;
	private long _scopeOrganizationId;
	private long _scopeOrganizationTypeId;
	private long _scopePostId;
	private long _designationModeId;
	private long _successorGradeId;
	private String _scopeOrganizationName;
	private String _scopePostName;
	private boolean _deleted;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Designation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Designation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("designationId", _designationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("code_", _code);
		_columnOriginalValues.put("name_En", _name_En);
		_columnOriginalValues.put("name_Hi", _name_Hi);
		_columnOriginalValues.put("shortName", _shortName);
		_columnOriginalValues.put("longName", _longName);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("designationClassId", _designationClassId);
		_columnOriginalValues.put("designationGroupId", _designationGroupId);
		_columnOriginalValues.put("designationGroup", _designationGroup);
		_columnOriginalValues.put("gradeId", _gradeId);
		_columnOriginalValues.put("organizationType", _organizationType);
		_columnOriginalValues.put("sequenceNo", _sequenceNo);
		_columnOriginalValues.put("rank_", _rank);
		_columnOriginalValues.put("scopeType", _scopeType);
		_columnOriginalValues.put("scopeOrganizationId", _scopeOrganizationId);
		_columnOriginalValues.put(
			"scopeOrganizationTypeId", _scopeOrganizationTypeId);
		_columnOriginalValues.put("scopePostId", _scopePostId);
		_columnOriginalValues.put("designationModeId", _designationModeId);
		_columnOriginalValues.put("successorGradeId", _successorGradeId);
		_columnOriginalValues.put(
			"scopeOrganizationName", _scopeOrganizationName);
		_columnOriginalValues.put("scopePostName", _scopePostName);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("code_", "code");
		attributeNames.put("rank_", "rank");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("designationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("code_", 128L);

		columnBitmasks.put("name_En", 256L);

		columnBitmasks.put("name_Hi", 512L);

		columnBitmasks.put("shortName", 1024L);

		columnBitmasks.put("longName", 2048L);

		columnBitmasks.put("description", 4096L);

		columnBitmasks.put("designationClassId", 8192L);

		columnBitmasks.put("designationGroupId", 16384L);

		columnBitmasks.put("designationGroup", 32768L);

		columnBitmasks.put("gradeId", 65536L);

		columnBitmasks.put("organizationType", 131072L);

		columnBitmasks.put("sequenceNo", 262144L);

		columnBitmasks.put("rank_", 524288L);

		columnBitmasks.put("scopeType", 1048576L);

		columnBitmasks.put("scopeOrganizationId", 2097152L);

		columnBitmasks.put("scopeOrganizationTypeId", 4194304L);

		columnBitmasks.put("scopePostId", 8388608L);

		columnBitmasks.put("designationModeId", 16777216L);

		columnBitmasks.put("successorGradeId", 33554432L);

		columnBitmasks.put("scopeOrganizationName", 67108864L);

		columnBitmasks.put("scopePostName", 134217728L);

		columnBitmasks.put("deleted", 268435456L);

		columnBitmasks.put("status", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Designation _escapedModel;

}