/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.ayudh.comnet.admin.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.ayudh.comnet.admin.model.ApplicationUser;
import net.ayudh.comnet.admin.model.ApplicationUserModel;
import net.ayudh.comnet.admin.model.ApplicationUserSoap;

/**
 * The base model implementation for the ApplicationUser service. Represents a row in the &quot;comnet_ApplicationUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ApplicationUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApplicationUserImpl
 * @generated
 */
@JSON(strict = true)
public class ApplicationUserModelImpl
	extends BaseModelImpl<ApplicationUser> implements ApplicationUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application user model instance should use the <code>ApplicationUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "comnet_ApplicationUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"applicationUserId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"employeeId", Types.BIGINT},
		{"loginId", Types.VARCHAR}, {"status", Types.INTEGER},
		{"deleted", Types.BOOLEAN}, {"idamUser", Types.BOOLEAN},
		{"emailAccess", Types.BOOLEAN}, {"digitalSigning", Types.BOOLEAN},
		{"eGovAccess", Types.BOOLEAN}, {"pisAccess", Types.BOOLEAN},
		{"lastIdamUser", Types.BOOLEAN}, {"lastEmailAccess", Types.BOOLEAN},
		{"lastDigitalSigning", Types.BOOLEAN},
		{"lastEGovAccess", Types.BOOLEAN}, {"lastPisAccess", Types.BOOLEAN},
		{"idamServiceStatus", Types.BOOLEAN},
		{"idamServiceMessage", Types.VARCHAR},
		{"idamUserCreated", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loginId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("idamUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("emailAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("digitalSigning", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("eGovAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pisAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastIdamUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastEmailAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastDigitalSigning", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastEGovAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastPisAccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("idamServiceStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("idamServiceMessage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idamUserCreated", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table comnet_ApplicationUser (applicationUserId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,loginId VARCHAR(75) null,status INTEGER,deleted BOOLEAN,idamUser BOOLEAN,emailAccess BOOLEAN,digitalSigning BOOLEAN,eGovAccess BOOLEAN,pisAccess BOOLEAN,lastIdamUser BOOLEAN,lastEmailAccess BOOLEAN,lastDigitalSigning BOOLEAN,lastEGovAccess BOOLEAN,lastPisAccess BOOLEAN,idamServiceStatus BOOLEAN,idamServiceMessage VARCHAR(75) null,idamUserCreated BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table comnet_ApplicationUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY applicationUser.applicationUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY comnet_ApplicationUser.applicationUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long LOGINID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long APPLICATIONUSERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ApplicationUser toModel(ApplicationUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApplicationUser model = new ApplicationUserImpl();

		model.setApplicationUserId(soapModel.getApplicationUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setLoginId(soapModel.getLoginId());
		model.setStatus(soapModel.getStatus());
		model.setDeleted(soapModel.isDeleted());
		model.setIdamUser(soapModel.isIdamUser());
		model.setEmailAccess(soapModel.isEmailAccess());
		model.setDigitalSigning(soapModel.isDigitalSigning());
		model.setEGovAccess(soapModel.isEGovAccess());
		model.setPisAccess(soapModel.isPisAccess());
		model.setLastIdamUser(soapModel.isLastIdamUser());
		model.setLastEmailAccess(soapModel.isLastEmailAccess());
		model.setLastDigitalSigning(soapModel.isLastDigitalSigning());
		model.setLastEGovAccess(soapModel.isLastEGovAccess());
		model.setLastPisAccess(soapModel.isLastPisAccess());
		model.setIdamServiceStatus(soapModel.isIdamServiceStatus());
		model.setIdamServiceMessage(soapModel.getIdamServiceMessage());
		model.setIdamUserCreated(soapModel.isIdamUserCreated());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ApplicationUser> toModels(
		ApplicationUserSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ApplicationUser> models = new ArrayList<ApplicationUser>(
			soapModels.length);

		for (ApplicationUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ApplicationUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationUser.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ApplicationUser, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ApplicationUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ApplicationUser)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ApplicationUser, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ApplicationUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ApplicationUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ApplicationUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ApplicationUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ApplicationUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ApplicationUser.class.getClassLoader(), ApplicationUser.class,
			ModelWrapper.class);

		try {
			Constructor<ApplicationUser> constructor =
				(Constructor<ApplicationUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ApplicationUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ApplicationUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ApplicationUser, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ApplicationUser, Object>>();
		Map<String, BiConsumer<ApplicationUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ApplicationUser, ?>>();

		attributeGetterFunctions.put(
			"applicationUserId", ApplicationUser::getApplicationUserId);
		attributeSetterBiConsumers.put(
			"applicationUserId",
			(BiConsumer<ApplicationUser, Long>)
				ApplicationUser::setApplicationUserId);
		attributeGetterFunctions.put("groupId", ApplicationUser::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ApplicationUser, Long>)ApplicationUser::setGroupId);
		attributeGetterFunctions.put(
			"companyId", ApplicationUser::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ApplicationUser, Long>)ApplicationUser::setCompanyId);
		attributeGetterFunctions.put("userId", ApplicationUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ApplicationUser, Long>)ApplicationUser::setUserId);
		attributeGetterFunctions.put("userName", ApplicationUser::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ApplicationUser, String>)ApplicationUser::setUserName);
		attributeGetterFunctions.put(
			"createDate", ApplicationUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ApplicationUser, Date>)ApplicationUser::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ApplicationUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ApplicationUser, Date>)
				ApplicationUser::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", ApplicationUser::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<ApplicationUser, Long>)ApplicationUser::setEmployeeId);
		attributeGetterFunctions.put("loginId", ApplicationUser::getLoginId);
		attributeSetterBiConsumers.put(
			"loginId",
			(BiConsumer<ApplicationUser, String>)ApplicationUser::setLoginId);
		attributeGetterFunctions.put("status", ApplicationUser::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ApplicationUser, Integer>)ApplicationUser::setStatus);
		attributeGetterFunctions.put("deleted", ApplicationUser::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<ApplicationUser, Boolean>)ApplicationUser::setDeleted);
		attributeGetterFunctions.put("idamUser", ApplicationUser::getIdamUser);
		attributeSetterBiConsumers.put(
			"idamUser",
			(BiConsumer<ApplicationUser, Boolean>)ApplicationUser::setIdamUser);
		attributeGetterFunctions.put(
			"emailAccess", ApplicationUser::getEmailAccess);
		attributeSetterBiConsumers.put(
			"emailAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setEmailAccess);
		attributeGetterFunctions.put(
			"digitalSigning", ApplicationUser::getDigitalSigning);
		attributeSetterBiConsumers.put(
			"digitalSigning",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setDigitalSigning);
		attributeGetterFunctions.put(
			"eGovAccess", ApplicationUser::getEGovAccess);
		attributeSetterBiConsumers.put(
			"eGovAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setEGovAccess);
		attributeGetterFunctions.put(
			"pisAccess", ApplicationUser::getPisAccess);
		attributeSetterBiConsumers.put(
			"pisAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setPisAccess);
		attributeGetterFunctions.put(
			"lastIdamUser", ApplicationUser::getLastIdamUser);
		attributeSetterBiConsumers.put(
			"lastIdamUser",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setLastIdamUser);
		attributeGetterFunctions.put(
			"lastEmailAccess", ApplicationUser::getLastEmailAccess);
		attributeSetterBiConsumers.put(
			"lastEmailAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setLastEmailAccess);
		attributeGetterFunctions.put(
			"lastDigitalSigning", ApplicationUser::getLastDigitalSigning);
		attributeSetterBiConsumers.put(
			"lastDigitalSigning",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setLastDigitalSigning);
		attributeGetterFunctions.put(
			"lastEGovAccess", ApplicationUser::getLastEGovAccess);
		attributeSetterBiConsumers.put(
			"lastEGovAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setLastEGovAccess);
		attributeGetterFunctions.put(
			"lastPisAccess", ApplicationUser::getLastPisAccess);
		attributeSetterBiConsumers.put(
			"lastPisAccess",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setLastPisAccess);
		attributeGetterFunctions.put(
			"idamServiceStatus", ApplicationUser::getIdamServiceStatus);
		attributeSetterBiConsumers.put(
			"idamServiceStatus",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setIdamServiceStatus);
		attributeGetterFunctions.put(
			"idamServiceMessage", ApplicationUser::getIdamServiceMessage);
		attributeSetterBiConsumers.put(
			"idamServiceMessage",
			(BiConsumer<ApplicationUser, String>)
				ApplicationUser::setIdamServiceMessage);
		attributeGetterFunctions.put(
			"idamUserCreated", ApplicationUser::getIdamUserCreated);
		attributeSetterBiConsumers.put(
			"idamUserCreated",
			(BiConsumer<ApplicationUser, Boolean>)
				ApplicationUser::setIdamUserCreated);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getApplicationUserId() {
		return _applicationUserId;
	}

	@Override
	public void setApplicationUserId(long applicationUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationUserId = applicationUserId;
	}

	@Override
	public String getApplicationUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(
				getApplicationUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setApplicationUserUuid(String applicationUserUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public String getLoginId() {
		if (_loginId == null) {
			return "";
		}
		else {
			return _loginId;
		}
	}

	@Override
	public void setLoginId(String loginId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loginId = loginId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLoginId() {
		return getColumnOriginalValue("loginId");
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	@JSON
	@Override
	public boolean getIdamUser() {
		return _idamUser;
	}

	@JSON
	@Override
	public boolean isIdamUser() {
		return _idamUser;
	}

	@Override
	public void setIdamUser(boolean idamUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamUser = idamUser;
	}

	@JSON
	@Override
	public boolean getEmailAccess() {
		return _emailAccess;
	}

	@JSON
	@Override
	public boolean isEmailAccess() {
		return _emailAccess;
	}

	@Override
	public void setEmailAccess(boolean emailAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAccess = emailAccess;
	}

	@JSON
	@Override
	public boolean getDigitalSigning() {
		return _digitalSigning;
	}

	@JSON
	@Override
	public boolean isDigitalSigning() {
		return _digitalSigning;
	}

	@Override
	public void setDigitalSigning(boolean digitalSigning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_digitalSigning = digitalSigning;
	}

	@JSON
	@Override
	public boolean getEGovAccess() {
		return _eGovAccess;
	}

	@JSON
	@Override
	public boolean isEGovAccess() {
		return _eGovAccess;
	}

	@Override
	public void setEGovAccess(boolean eGovAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eGovAccess = eGovAccess;
	}

	@JSON
	@Override
	public boolean getPisAccess() {
		return _pisAccess;
	}

	@JSON
	@Override
	public boolean isPisAccess() {
		return _pisAccess;
	}

	@Override
	public void setPisAccess(boolean pisAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pisAccess = pisAccess;
	}

	@JSON
	@Override
	public boolean getLastIdamUser() {
		return _lastIdamUser;
	}

	@JSON
	@Override
	public boolean isLastIdamUser() {
		return _lastIdamUser;
	}

	@Override
	public void setLastIdamUser(boolean lastIdamUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastIdamUser = lastIdamUser;
	}

	@JSON
	@Override
	public boolean getLastEmailAccess() {
		return _lastEmailAccess;
	}

	@JSON
	@Override
	public boolean isLastEmailAccess() {
		return _lastEmailAccess;
	}

	@Override
	public void setLastEmailAccess(boolean lastEmailAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastEmailAccess = lastEmailAccess;
	}

	@JSON
	@Override
	public boolean getLastDigitalSigning() {
		return _lastDigitalSigning;
	}

	@JSON
	@Override
	public boolean isLastDigitalSigning() {
		return _lastDigitalSigning;
	}

	@Override
	public void setLastDigitalSigning(boolean lastDigitalSigning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastDigitalSigning = lastDigitalSigning;
	}

	@JSON
	@Override
	public boolean getLastEGovAccess() {
		return _lastEGovAccess;
	}

	@JSON
	@Override
	public boolean isLastEGovAccess() {
		return _lastEGovAccess;
	}

	@Override
	public void setLastEGovAccess(boolean lastEGovAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastEGovAccess = lastEGovAccess;
	}

	@JSON
	@Override
	public boolean getLastPisAccess() {
		return _lastPisAccess;
	}

	@JSON
	@Override
	public boolean isLastPisAccess() {
		return _lastPisAccess;
	}

	@Override
	public void setLastPisAccess(boolean lastPisAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastPisAccess = lastPisAccess;
	}

	@JSON
	@Override
	public boolean getIdamServiceStatus() {
		return _idamServiceStatus;
	}

	@JSON
	@Override
	public boolean isIdamServiceStatus() {
		return _idamServiceStatus;
	}

	@Override
	public void setIdamServiceStatus(boolean idamServiceStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamServiceStatus = idamServiceStatus;
	}

	@JSON
	@Override
	public String getIdamServiceMessage() {
		if (_idamServiceMessage == null) {
			return "";
		}
		else {
			return _idamServiceMessage;
		}
	}

	@Override
	public void setIdamServiceMessage(String idamServiceMessage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamServiceMessage = idamServiceMessage;
	}

	@JSON
	@Override
	public boolean getIdamUserCreated() {
		return _idamUserCreated;
	}

	@JSON
	@Override
	public boolean isIdamUserCreated() {
		return _idamUserCreated;
	}

	@Override
	public void setIdamUserCreated(boolean idamUserCreated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idamUserCreated = idamUserCreated;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ApplicationUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ApplicationUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationUserImpl applicationUserImpl = new ApplicationUserImpl();

		applicationUserImpl.setApplicationUserId(getApplicationUserId());
		applicationUserImpl.setGroupId(getGroupId());
		applicationUserImpl.setCompanyId(getCompanyId());
		applicationUserImpl.setUserId(getUserId());
		applicationUserImpl.setUserName(getUserName());
		applicationUserImpl.setCreateDate(getCreateDate());
		applicationUserImpl.setModifiedDate(getModifiedDate());
		applicationUserImpl.setEmployeeId(getEmployeeId());
		applicationUserImpl.setLoginId(getLoginId());
		applicationUserImpl.setStatus(getStatus());
		applicationUserImpl.setDeleted(isDeleted());
		applicationUserImpl.setIdamUser(isIdamUser());
		applicationUserImpl.setEmailAccess(isEmailAccess());
		applicationUserImpl.setDigitalSigning(isDigitalSigning());
		applicationUserImpl.setEGovAccess(isEGovAccess());
		applicationUserImpl.setPisAccess(isPisAccess());
		applicationUserImpl.setLastIdamUser(isLastIdamUser());
		applicationUserImpl.setLastEmailAccess(isLastEmailAccess());
		applicationUserImpl.setLastDigitalSigning(isLastDigitalSigning());
		applicationUserImpl.setLastEGovAccess(isLastEGovAccess());
		applicationUserImpl.setLastPisAccess(isLastPisAccess());
		applicationUserImpl.setIdamServiceStatus(isIdamServiceStatus());
		applicationUserImpl.setIdamServiceMessage(getIdamServiceMessage());
		applicationUserImpl.setIdamUserCreated(isIdamUserCreated());

		applicationUserImpl.resetOriginalValues();

		return applicationUserImpl;
	}

	@Override
	public int compareTo(ApplicationUser applicationUser) {
		long primaryKey = applicationUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ApplicationUser)) {
			return false;
		}

		ApplicationUser applicationUser = (ApplicationUser)object;

		long primaryKey = applicationUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationUser> toCacheModel() {
		ApplicationUserCacheModel applicationUserCacheModel =
			new ApplicationUserCacheModel();

		applicationUserCacheModel.applicationUserId = getApplicationUserId();

		applicationUserCacheModel.groupId = getGroupId();

		applicationUserCacheModel.companyId = getCompanyId();

		applicationUserCacheModel.userId = getUserId();

		applicationUserCacheModel.userName = getUserName();

		String userName = applicationUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicationUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationUserCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicationUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicationUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicationUserCacheModel.employeeId = getEmployeeId();

		applicationUserCacheModel.loginId = getLoginId();

		String loginId = applicationUserCacheModel.loginId;

		if ((loginId != null) && (loginId.length() == 0)) {
			applicationUserCacheModel.loginId = null;
		}

		applicationUserCacheModel.status = getStatus();

		applicationUserCacheModel.deleted = isDeleted();

		applicationUserCacheModel.idamUser = isIdamUser();

		applicationUserCacheModel.emailAccess = isEmailAccess();

		applicationUserCacheModel.digitalSigning = isDigitalSigning();

		applicationUserCacheModel.eGovAccess = isEGovAccess();

		applicationUserCacheModel.pisAccess = isPisAccess();

		applicationUserCacheModel.lastIdamUser = isLastIdamUser();

		applicationUserCacheModel.lastEmailAccess = isLastEmailAccess();

		applicationUserCacheModel.lastDigitalSigning = isLastDigitalSigning();

		applicationUserCacheModel.lastEGovAccess = isLastEGovAccess();

		applicationUserCacheModel.lastPisAccess = isLastPisAccess();

		applicationUserCacheModel.idamServiceStatus = isIdamServiceStatus();

		applicationUserCacheModel.idamServiceMessage = getIdamServiceMessage();

		String idamServiceMessage =
			applicationUserCacheModel.idamServiceMessage;

		if ((idamServiceMessage != null) &&
			(idamServiceMessage.length() == 0)) {

			applicationUserCacheModel.idamServiceMessage = null;
		}

		applicationUserCacheModel.idamUserCreated = isIdamUserCreated();

		return applicationUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ApplicationUser, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ApplicationUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ApplicationUser)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ApplicationUser, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ApplicationUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ApplicationUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ApplicationUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _applicationUserId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private String _loginId;
	private int _status;
	private boolean _deleted;
	private boolean _idamUser;
	private boolean _emailAccess;
	private boolean _digitalSigning;
	private boolean _eGovAccess;
	private boolean _pisAccess;
	private boolean _lastIdamUser;
	private boolean _lastEmailAccess;
	private boolean _lastDigitalSigning;
	private boolean _lastEGovAccess;
	private boolean _lastPisAccess;
	private boolean _idamServiceStatus;
	private String _idamServiceMessage;
	private boolean _idamUserCreated;

	public <T> T getColumnValue(String columnName) {
		Function<ApplicationUser, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ApplicationUser)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("applicationUserId", _applicationUserId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("loginId", _loginId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("idamUser", _idamUser);
		_columnOriginalValues.put("emailAccess", _emailAccess);
		_columnOriginalValues.put("digitalSigning", _digitalSigning);
		_columnOriginalValues.put("eGovAccess", _eGovAccess);
		_columnOriginalValues.put("pisAccess", _pisAccess);
		_columnOriginalValues.put("lastIdamUser", _lastIdamUser);
		_columnOriginalValues.put("lastEmailAccess", _lastEmailAccess);
		_columnOriginalValues.put("lastDigitalSigning", _lastDigitalSigning);
		_columnOriginalValues.put("lastEGovAccess", _lastEGovAccess);
		_columnOriginalValues.put("lastPisAccess", _lastPisAccess);
		_columnOriginalValues.put("idamServiceStatus", _idamServiceStatus);
		_columnOriginalValues.put("idamServiceMessage", _idamServiceMessage);
		_columnOriginalValues.put("idamUserCreated", _idamUserCreated);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("applicationUserId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("employeeId", 128L);

		columnBitmasks.put("loginId", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("deleted", 1024L);

		columnBitmasks.put("idamUser", 2048L);

		columnBitmasks.put("emailAccess", 4096L);

		columnBitmasks.put("digitalSigning", 8192L);

		columnBitmasks.put("eGovAccess", 16384L);

		columnBitmasks.put("pisAccess", 32768L);

		columnBitmasks.put("lastIdamUser", 65536L);

		columnBitmasks.put("lastEmailAccess", 131072L);

		columnBitmasks.put("lastDigitalSigning", 262144L);

		columnBitmasks.put("lastEGovAccess", 524288L);

		columnBitmasks.put("lastPisAccess", 1048576L);

		columnBitmasks.put("idamServiceStatus", 2097152L);

		columnBitmasks.put("idamServiceMessage", 4194304L);

		columnBitmasks.put("idamUserCreated", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ApplicationUser _escapedModel;

}