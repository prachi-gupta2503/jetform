/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.ayudh.comnet.admin.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.ayudh.comnet.admin.model.ApplicationAccess;
import net.ayudh.comnet.admin.model.ApplicationAccessModel;
import net.ayudh.comnet.admin.model.ApplicationAccessSoap;

/**
 * The base model implementation for the ApplicationAccess service. Represents a row in the &quot;comnet_ApplicationAccess&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ApplicationAccessModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationAccessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApplicationAccessImpl
 * @generated
 */
@JSON(strict = true)
public class ApplicationAccessModelImpl
	extends BaseModelImpl<ApplicationAccess> implements ApplicationAccessModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application access model instance should use the <code>ApplicationAccess</code> interface instead.
	 */
	public static final String TABLE_NAME = "comnet_ApplicationAccess";

	public static final Object[][] TABLE_COLUMNS = {
		{"applicationAccessId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"employeeId", Types.BIGINT},
		{"applicationId", Types.BIGINT}, {"status", Types.INTEGER},
		{"deleted", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("applicationAccessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table comnet_ApplicationAccess (applicationAccessId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,employeeId LONG,applicationId LONG,status INTEGER,deleted BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table comnet_ApplicationAccess";

	public static final String ORDER_BY_JPQL =
		" ORDER BY applicationAccess.applicationAccessId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY comnet_ApplicationAccess.applicationAccessId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long APPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long APPLICATIONACCESSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ApplicationAccess toModel(ApplicationAccessSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApplicationAccess model = new ApplicationAccessImpl();

		model.setApplicationAccessId(soapModel.getApplicationAccessId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setApplicationId(soapModel.getApplicationId());
		model.setStatus(soapModel.getStatus());
		model.setDeleted(soapModel.isDeleted());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ApplicationAccess> toModels(
		ApplicationAccessSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ApplicationAccess> models = new ArrayList<ApplicationAccess>(
			soapModels.length);

		for (ApplicationAccessSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ApplicationAccessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationAccessId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationAccessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationAccessId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationAccess.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationAccess.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ApplicationAccess, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ApplicationAccess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationAccess, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ApplicationAccess)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ApplicationAccess, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ApplicationAccess, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ApplicationAccess)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ApplicationAccess, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ApplicationAccess, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ApplicationAccess>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ApplicationAccess.class.getClassLoader(), ApplicationAccess.class,
			ModelWrapper.class);

		try {
			Constructor<ApplicationAccess> constructor =
				(Constructor<ApplicationAccess>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ApplicationAccess, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ApplicationAccess, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ApplicationAccess, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ApplicationAccess, Object>>();
		Map<String, BiConsumer<ApplicationAccess, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ApplicationAccess, ?>>();

		attributeGetterFunctions.put(
			"applicationAccessId", ApplicationAccess::getApplicationAccessId);
		attributeSetterBiConsumers.put(
			"applicationAccessId",
			(BiConsumer<ApplicationAccess, Long>)
				ApplicationAccess::setApplicationAccessId);
		attributeGetterFunctions.put("groupId", ApplicationAccess::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ApplicationAccess, Long>)ApplicationAccess::setGroupId);
		attributeGetterFunctions.put(
			"companyId", ApplicationAccess::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ApplicationAccess, Long>)
				ApplicationAccess::setCompanyId);
		attributeGetterFunctions.put("userId", ApplicationAccess::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ApplicationAccess, Long>)ApplicationAccess::setUserId);
		attributeGetterFunctions.put(
			"userName", ApplicationAccess::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ApplicationAccess, String>)
				ApplicationAccess::setUserName);
		attributeGetterFunctions.put(
			"createDate", ApplicationAccess::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ApplicationAccess, Date>)
				ApplicationAccess::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ApplicationAccess::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ApplicationAccess, Date>)
				ApplicationAccess::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeId", ApplicationAccess::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<ApplicationAccess, Long>)
				ApplicationAccess::setEmployeeId);
		attributeGetterFunctions.put(
			"applicationId", ApplicationAccess::getApplicationId);
		attributeSetterBiConsumers.put(
			"applicationId",
			(BiConsumer<ApplicationAccess, Long>)
				ApplicationAccess::setApplicationId);
		attributeGetterFunctions.put("status", ApplicationAccess::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ApplicationAccess, Integer>)
				ApplicationAccess::setStatus);
		attributeGetterFunctions.put("deleted", ApplicationAccess::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<ApplicationAccess, Boolean>)
				ApplicationAccess::setDeleted);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getApplicationAccessId() {
		return _applicationAccessId;
	}

	@Override
	public void setApplicationAccessId(long applicationAccessId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationAccessId = applicationAccessId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@JSON
	@Override
	public long getApplicationId() {
		return _applicationId;
	}

	@Override
	public void setApplicationId(long applicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationId = applicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("applicationId"));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ApplicationAccess.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationAccess toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ApplicationAccess>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationAccessImpl applicationAccessImpl =
			new ApplicationAccessImpl();

		applicationAccessImpl.setApplicationAccessId(getApplicationAccessId());
		applicationAccessImpl.setGroupId(getGroupId());
		applicationAccessImpl.setCompanyId(getCompanyId());
		applicationAccessImpl.setUserId(getUserId());
		applicationAccessImpl.setUserName(getUserName());
		applicationAccessImpl.setCreateDate(getCreateDate());
		applicationAccessImpl.setModifiedDate(getModifiedDate());
		applicationAccessImpl.setEmployeeId(getEmployeeId());
		applicationAccessImpl.setApplicationId(getApplicationId());
		applicationAccessImpl.setStatus(getStatus());
		applicationAccessImpl.setDeleted(isDeleted());

		applicationAccessImpl.resetOriginalValues();

		return applicationAccessImpl;
	}

	@Override
	public int compareTo(ApplicationAccess applicationAccess) {
		long primaryKey = applicationAccess.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ApplicationAccess)) {
			return false;
		}

		ApplicationAccess applicationAccess = (ApplicationAccess)object;

		long primaryKey = applicationAccess.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationAccess> toCacheModel() {
		ApplicationAccessCacheModel applicationAccessCacheModel =
			new ApplicationAccessCacheModel();

		applicationAccessCacheModel.applicationAccessId =
			getApplicationAccessId();

		applicationAccessCacheModel.groupId = getGroupId();

		applicationAccessCacheModel.companyId = getCompanyId();

		applicationAccessCacheModel.userId = getUserId();

		applicationAccessCacheModel.userName = getUserName();

		String userName = applicationAccessCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicationAccessCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicationAccessCacheModel.createDate = createDate.getTime();
		}
		else {
			applicationAccessCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicationAccessCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicationAccessCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicationAccessCacheModel.employeeId = getEmployeeId();

		applicationAccessCacheModel.applicationId = getApplicationId();

		applicationAccessCacheModel.status = getStatus();

		applicationAccessCacheModel.deleted = isDeleted();

		return applicationAccessCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ApplicationAccess, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ApplicationAccess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationAccess, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ApplicationAccess)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ApplicationAccess, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ApplicationAccess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApplicationAccess, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ApplicationAccess)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ApplicationAccess>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _applicationAccessId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _employeeId;
	private long _applicationId;
	private int _status;
	private boolean _deleted;

	public <T> T getColumnValue(String columnName) {
		Function<ApplicationAccess, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ApplicationAccess)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("applicationAccessId", _applicationAccessId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("applicationId", _applicationId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("deleted", _deleted);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("applicationAccessId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("employeeId", 128L);

		columnBitmasks.put("applicationId", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("deleted", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ApplicationAccess _escapedModel;

}